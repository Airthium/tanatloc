{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { authActionTypes } from './action';\nexport const authInitialState = {\n  user: {}\n};\nexport default function reducer(state = authInitialState, action) {\n  switch (action.type) {\n    case authActionTypes.LOGIN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: action.user\n      });\n\n    case authActionTypes.LOGOUT:\n      return authInitialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/store/auth/reducer.js"],"names":["authActionTypes","authInitialState","user","reducer","state","action","type","LOGIN","LOGOUT"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,UAAhC;AAEA,OAAO,MAAMC,gBAAgB,GAAG;AAC9BC,EAAAA,IAAI,EAAE;AADwB,CAAzB;AAIP,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGH,gBAAzB,EAA2CI,MAA3C,EAAmD;AAChE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,eAAe,CAACO,KAArB;AACE,6CACKH,KADL;AAEEF,QAAAA,IAAI,EAAEG,MAAM,CAACH;AAFf;;AAIF,SAAKF,eAAe,CAACQ,MAArB;AACE,aAAOP,gBAAP;;AACF;AACE,aAAOG,KAAP;AATJ;AAWD","sourcesContent":["import { authActionTypes } from './action'\n\nexport const authInitialState = {\n  user: {}\n}\n\nexport default function reducer(state = authInitialState, action) {\n  switch (action.type) {\n    case authActionTypes.LOGIN:\n      return {\n        ...state,\n        user: action.user\n      }\n    case authActionTypes.LOGOUT:\n      return authInitialState\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}