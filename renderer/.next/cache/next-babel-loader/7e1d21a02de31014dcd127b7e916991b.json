{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport auth, { authInitialState } from './auth/reducer';\nvar store;\nvar globalInitialState = {\n  auth: authInitialState\n}; // COMBINE\n\nvar combinedReducers = combineReducers({\n  auth: auth\n}); // REDUCERS\n\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : globalInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return combinedReducers(state, action);\n}; // PERSIST\n\nvar persistConfig = {\n  key: 'primary',\n  storage: storage // whitelist: ['auth'] // place to select which state you want to persist\n\n};\nvar persistedReducer = persistReducer(persistConfig, reducer);\n\nfunction makeStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : globalInitialState;\n  return createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware()));\n}\n\nexport var initializeStore = function initializeStore(preloadedState) {\n  var _store2;\n\n  var _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : makeStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = makeStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  var store = useMemo(function () {\n    return initializeStore(initialState);\n  }, [initialState]);\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}