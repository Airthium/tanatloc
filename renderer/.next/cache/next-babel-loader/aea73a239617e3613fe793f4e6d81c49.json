{"ast":null,"code":"import \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/space/style\";\nimport _Space from \"antd/lib/space\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport { useState } from 'react';\nimport login from '../src/lib/api/user/login';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login as reduxLogin } from '../store/auth/action';\nvar errors = {\n  BAD_CREDENTIALS: 'Bad credentials. Please check your username and password'\n}; // Login page\n\nexport default (function () {\n  // State\n  var _useState = useState(false),\n      checking = _useState[0],\n      setChecking = _useState[1]; // Router\n\n\n  var router = useRouter(); // Redux\n\n  var dispatch = useDispatch(); // Check user\n\n  var _useSelector = useSelector(function (store) {\n    return store.auth;\n  }),\n      user = _useSelector.user;\n\n  if (true && user.id) {\n    // Go to dashboard\n    router.push('/dashboard');\n  } // On login\n\n\n  var onLogin = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var check;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // State\n              setChecking(true); // Check\n\n              _context.next = 3;\n              return login(values);\n\n            case 3:\n              check = _context.sent;\n\n              // Authorized or not\n              if (check.authorized) {\n                dispatch(reduxLogin({\n                  username: values.username,\n                  id: check.id\n                }));\n                router.push('/dashboard');\n              } else {\n                _message.error(errors.BAD_CREDENTIALS);\n\n                setChecking(false);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onLogin(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Render\n\n\n  return __jsx(_Layout, null, __jsx(_Card, {\n    className: \"Login\"\n  }, __jsx(_Space, {\n    direction: \"vertical\",\n    size: \"large\"\n  }, __jsx(\"img\", {\n    src: \"banner.png\"\n  }), __jsx(_Form, {\n    initialValues: {\n      remember: true\n    },\n    onFinish: onLogin\n  }, __jsx(_Form.Item, {\n    name: \"username\",\n    rules: [{\n      required: true,\n      message: 'Please fill your Username!'\n    }]\n  }, __jsx(_Input, {\n    placeholder: \"username\",\n    autoComplete: \"username\"\n  })), __jsx(_Form.Item, {\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: 'Please fill your Password!'\n    }]\n  }, __jsx(_Input.Password, {\n    placeholder: \"password\",\n    autoComplete: \"current-password\"\n  })), __jsx(_Form.Item, null, __jsx(_Form.Item, {\n    name: \"remember\",\n    valuePropName: \"checked\",\n    noStyle: true\n  }, __jsx(_Checkbox, null, \"remember me\")), __jsx(\"a\", {\n    className: \"Login-forgot\",\n    href: \"\"\n  }, \"forgot password\")), __jsx(_Form.Item, {\n    className: \"Login-submit\"\n  }, __jsx(_Button, {\n    type: \"primary\",\n    loading: checking,\n    htmlType: \"submit\"\n  }, \"Log in\"), __jsx(\"a\", {\n    href: \"\"\n  }, \"or register now!\"))))));\n});","map":null,"metadata":{},"sourceType":"module"}