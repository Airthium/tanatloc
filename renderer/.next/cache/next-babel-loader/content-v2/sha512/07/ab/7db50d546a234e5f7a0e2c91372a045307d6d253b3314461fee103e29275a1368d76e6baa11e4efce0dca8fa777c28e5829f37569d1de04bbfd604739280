{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _Button from \"antd/lib/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/account/hpc/plugin.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { Error } from '../../assets/notification';\nimport PluginForm from './pluginForm';\nimport List from './list';\nimport PluginAPI from '../../../../src/api/plugin';\n/**\n * Errors hpc/plugin\n */\n\nconst errors = {\n  updateError: 'Unable to update plugins'\n};\n/**\n * Plugin\n * @param {Object} props Props\n */\n\nconst Plugin = ({\n  plugin\n}) => {\n  // State\n  const {\n    0: add,\n    1: setAdd\n  } = useState(false); // Data\n\n  const [, {\n    addOnePlugin\n  }] = PluginAPI.usePlugins();\n  /**\n   * On finish\n   * @param {Object} values Values\n   */\n\n  const onFinish = async values => {\n    try {\n      // New plugin\n      const newPlugin = _objectSpread({}, plugin); // Set values\n\n\n      Object.keys(values).forEach(key => {\n        newPlugin.configuration[key].value = values[key];\n      }); // Remove logo\n\n      newPlugin.logo && delete newPlugin.logo; // Remove renderer\n\n      newPlugin.renderer && delete newPlugin.renderer; // Set uuid\n\n      newPlugin.uuid = uuid(); // API\n\n      await PluginAPI.add(newPlugin); // Mutate\n\n      addOnePlugin(newPlugin); // Finish\n\n      setAdd(false);\n    } catch (err) {\n      Error(errors.updateError, err);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [add ? /*#__PURE__*/_jsxDEV(PluginForm, {\n      plugin: plugin,\n      onFinish: onFinish,\n      onCancel: () => setAdd(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Button, {\n      type: \"primary\",\n      onClick: () => setAdd(true),\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      plugin: plugin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Plugin;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/account/hpc/plugin.js"],"names":["useState","v4","uuid","Error","PluginForm","List","PluginAPI","errors","updateError","Plugin","plugin","add","setAdd","addOnePlugin","usePlugins","onFinish","values","newPlugin","Object","keys","forEach","key","configuration","value","logo","renderer","err"],"mappings":";;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,SAASC,KAAT,QAAsB,2BAAtB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAOC,SAAP,MAAsB,4BAAtB;AAEA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,WAAW,EAAE;AADA,CAAf;AAIA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC7B;AACA,QAAM;AAAA,OAACC,GAAD;AAAA,OAAMC;AAAN,MAAgBZ,QAAQ,CAAC,KAAD,CAA9B,CAF6B,CAI7B;;AACA,QAAM,GAAG;AAAEa,IAAAA;AAAF,GAAH,IAAuBP,SAAS,CAACQ,UAAV,EAA7B;AAEA;AACF;AACA;AACA;;AACE,QAAMC,QAAQ,GAAG,MAAOC,MAAP,IAAkB;AACjC,QAAI;AACF;AACA,YAAMC,SAAS,qBAAQP,MAAR,CAAf,CAFE,CAIF;;;AACAQ,MAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA6BC,GAAD,IAAS;AACnCJ,QAAAA,SAAS,CAACK,aAAV,CAAwBD,GAAxB,EAA6BE,KAA7B,GAAqCP,MAAM,CAACK,GAAD,CAA3C;AACD,OAFD,EALE,CASF;;AACAJ,MAAAA,SAAS,CAACO,IAAV,IAAkB,OAAOP,SAAS,CAACO,IAAnC,CAVE,CAYF;;AACAP,MAAAA,SAAS,CAACQ,QAAV,IAAsB,OAAOR,SAAS,CAACQ,QAAvC,CAbE,CAeF;;AACAR,MAAAA,SAAS,CAACf,IAAV,GAAiBA,IAAI,EAArB,CAhBE,CAkBF;;AACA,YAAMI,SAAS,CAACK,GAAV,CAAcM,SAAd,CAAN,CAnBE,CAqBF;;AACAJ,MAAAA,YAAY,CAACI,SAAD,CAAZ,CAtBE,CAwBF;;AACAL,MAAAA,MAAM,CAAC,KAAD,CAAN;AACD,KA1BD,CA0BE,OAAOc,GAAP,EAAY;AACZvB,MAAAA,KAAK,CAACI,MAAM,CAACC,WAAR,EAAqBkB,GAArB,CAAL;AACD;AACF,GA9BD;AAgCA;AACF;AACA;;;AACE,sBACE;AAAA,eACGf,GAAG,gBACF,QAAC,UAAD;AACE,MAAA,MAAM,EAAED,MADV;AAEE,MAAA,QAAQ,EAAEK,QAFZ;AAGE,MAAA,QAAQ,EAAE,MAAMH,MAAM,CAAC,KAAD;AAHxB;AAAA;AAAA;AAAA;AAAA,YADE,gBAOF;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,OAAO,EAAE,MAAMA,MAAM,CAAC,IAAD,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eAYE,QAAC,IAAD;AAAM,MAAA,MAAM,EAAEF;AAAd;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA,kBADF;AAgBD,CA9DD;;AAgEA,eAAeD,MAAf","sourcesContent":["import { useState } from 'react'\nimport { Button } from 'antd'\nimport { v4 as uuid } from 'uuid'\n\nimport { Error } from '../../assets/notification'\n\nimport PluginForm from './pluginForm'\nimport List from './list'\n\nimport PluginAPI from '../../../../src/api/plugin'\n\n/**\n * Errors hpc/plugin\n */\nconst errors = {\n  updateError: 'Unable to update plugins'\n}\n\n/**\n * Plugin\n * @param {Object} props Props\n */\nconst Plugin = ({ plugin }) => {\n  // State\n  const [add, setAdd] = useState(false)\n\n  // Data\n  const [, { addOnePlugin }] = PluginAPI.usePlugins()\n\n  /**\n   * On finish\n   * @param {Object} values Values\n   */\n  const onFinish = async (values) => {\n    try {\n      // New plugin\n      const newPlugin = { ...plugin }\n\n      // Set values\n      Object.keys(values).forEach((key) => {\n        newPlugin.configuration[key].value = values[key]\n      })\n\n      // Remove logo\n      newPlugin.logo && delete newPlugin.logo\n\n      // Remove renderer\n      newPlugin.renderer && delete newPlugin.renderer\n\n      // Set uuid\n      newPlugin.uuid = uuid()\n\n      // API\n      await PluginAPI.add(newPlugin)\n\n      // Mutate\n      addOnePlugin(newPlugin)\n\n      // Finish\n      setAdd(false)\n    } catch (err) {\n      Error(errors.updateError, err)\n    }\n  }\n\n  /**\n   * Render\n   */\n  return (\n    <>\n      {add ? (\n        <PluginForm\n          plugin={plugin}\n          onFinish={onFinish}\n          onCancel={() => setAdd(false)}\n        />\n      ) : (\n        <Button type=\"primary\" onClick={() => setAdd(true)}>\n          Add\n        </Button>\n      )}\n      <List plugin={plugin} />\n    </>\n  )\n}\n\nexport default Plugin\n"]},"metadata":{},"sourceType":"module"}