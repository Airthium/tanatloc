{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/edit/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { Error } from '../../../../assets/notification';\nimport { EditButton } from '../../../../assets/button';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors boundaryCondition/edit\n */\n\nconst errors = {\n  updateError: 'Unable to edit the material'\n};\n/**\n * Edit material\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nconst Edit = ({\n  disabled,\n  material,\n  project,\n  simulation,\n  part,\n  close\n}) => {\n  // State\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(); // Data\n\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations);\n  /**\n   * On edit\n   */\n\n  const onEdit = async () => {\n    setLoading(true);\n\n    try {\n      // New simulation\n      const newSimulation = _objectSpread({}, simulation);\n\n      const materials = newSimulation.scheme.configuration.materials; // Modify selection\n\n      const selection = part.solids.map(f => {\n        if (material.selected.includes(f.uuid)) return {\n          uuid: f.uuid,\n          label: f.number\n        };\n      }).filter(s => s);\n      material.selected = selection; // Update local\n\n      const index = materials.values.findIndex(m => m.uuid === material.uuid);\n      materials.values = [...materials.values.slice(0, index), material, ...materials.values.slice(index + 1)]; // Diff\n\n      const diff = _objectSpread({}, materials); // Update\n\n\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'materials'],\n        value: diff\n      }]); // Mutate\n\n      mutateOneSimulation(newSimulation); // Close\n\n      close();\n    } catch (err) {\n      Error(errors.updateError, err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(EditButton, {\n    disabled: disabled,\n    loading: loading,\n    onEdit: onEdit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Edit;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/edit/index.js"],"names":["useState","Error","EditButton","SimulationAPI","errors","updateError","Edit","disabled","material","project","simulation","part","close","loading","setLoading","mutateOneSimulation","useSimulations","simulations","onEdit","newSimulation","materials","scheme","configuration","selection","solids","map","f","selected","includes","uuid","label","number","filter","s","index","values","findIndex","m","slice","diff","update","id","key","type","method","path","value","err"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nimport { Error } from '../../../../assets/notification'\nimport { EditButton } from '../../../../assets/button'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\n/**\n * Errors boundaryCondition/edit\n */\nconst errors = {\n  updateError: 'Unable to edit the material'\n}\n\n/**\n * Edit material\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\nconst Edit = ({ disabled, material, project, simulation, part, close }) => {\n  // State\n  const [loading, setLoading] = useState()\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n\n  /**\n   * On edit\n   */\n  const onEdit = async () => {\n    setLoading(true)\n\n    try {\n      // New simulation\n      const newSimulation = { ...simulation }\n      const materials = newSimulation.scheme.configuration.materials\n\n      // Modify selection\n      const selection = part.solids\n        .map((f) => {\n          if (material.selected.includes(f.uuid))\n            return {\n              uuid: f.uuid,\n              label: f.number\n            }\n        })\n        .filter((s) => s)\n      material.selected = selection\n\n      // Update local\n      const index = materials.values.findIndex((m) => m.uuid === material.uuid)\n      materials.values = [\n        ...materials.values.slice(0, index),\n        material,\n        ...materials.values.slice(index + 1)\n      ]\n\n      // Diff\n      const diff = {\n        ...materials\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'materials'],\n          value: diff\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(newSimulation)\n\n      // Close\n      close()\n    } catch (err) {\n      Error(errors.updateError, err)\n    } finally {\n      setLoading(false)\n    }\n  }\n  /**\n   * Render\n   */\n  return <EditButton disabled={disabled} loading={loading} onEdit={onEdit} />\n}\n\nexport default Edit\n"]},"metadata":{},"sourceType":"module"}