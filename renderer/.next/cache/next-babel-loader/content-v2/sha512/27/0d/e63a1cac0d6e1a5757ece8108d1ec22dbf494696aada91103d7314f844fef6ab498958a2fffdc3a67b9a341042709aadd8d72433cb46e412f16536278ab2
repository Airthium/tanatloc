{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { Error } from '../../../../assets/notification';\nimport { DeleteButton } from '../../../../assets/button';\nimport { useDispatch } from 'react-redux';\nimport { unselect } from '../../../../../store/select/action';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors boundaryConditions/delete\n * @memberof module:renderer/components/project/simulation\n */\n\nconst errors = {\n  updateError: 'Unable to delete the boundary condition'\n};\n/**\n * Delete boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nconst Delete = ({\n  project,\n  simulation,\n  type,\n  index\n}) => {\n  // State\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // Data\n\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations);\n  const dispatch = useDispatch();\n  /**\n   * On delete\n   */\n\n  const onDelete = async () => {\n    setLoading(true);\n\n    try {\n      // New simulation\n      const newSimulation = _objectSpread({}, simulation); // Update local\n\n\n      const boundaryConditions = newSimulation.scheme.configuration.boundaryConditions;\n      const typedBoundaryCondition = boundaryConditions[type]; // (unselect)\n\n      const boundaryCondition = typedBoundaryCondition.values[index];\n      boundaryCondition.selected.forEach(s => {\n        dispatch(unselect(s.uuid));\n      });\n      typedBoundaryCondition.values = [...typedBoundaryCondition.values.slice(0, index), ...typedBoundaryCondition.values.slice(index + 1)]; // Diff\n\n      let done = false;\n      Object.keys(boundaryConditions).forEach(t => {\n        var _boundaryConditions$t;\n\n        if (t === 'index' || t === 'title' || t === 'done') return;\n        if ((_boundaryConditions$t = boundaryConditions[t].values) !== null && _boundaryConditions$t !== void 0 && _boundaryConditions$t.length) done = true;\n      });\n\n      const diff = _objectSpread(_objectSpread({}, boundaryConditions), {}, {\n        done: done\n      }); // Update\n\n\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'boundaryConditions'],\n        value: diff\n      }]);\n      mutateOneSimulation(newSimulation);\n    } catch (err) {\n      Error(errors.updateError, err);\n      setLoading(false);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(DeleteButton, {\n    loading: loading,\n    onDelete: onDelete\n  });\n};\n\nexport default Delete;","map":null,"metadata":{},"sourceType":"module"}