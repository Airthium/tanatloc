{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/delete/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { Error } from '../../../../assets/notification';\nimport { DeleteButton } from '../../../../assets/button';\nimport { useDispatch } from 'react-redux';\nimport { unselect } from '../../../../../store/select/action';\nimport SimulationAPI from '../../../../../../src/api/simulation';\nconst errors = {\n  updateError: 'Unable to delete the material'\n};\n/**\n * Delete material\n * @param {Object} props Props\n */\n\nconst Delete = ({\n  project,\n  simulation,\n  index\n}) => {\n  // State\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // Data\n\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations);\n  const dispatch = useDispatch();\n  /**\n   * On delete\n   */\n\n  const onDelete = async () => {\n    setLoading(true);\n\n    try {\n      var _newSimulation$scheme, _newSimulation$scheme2;\n\n      // New simulation\n      const newSimulation = _objectSpread({}, simulation); // Update local\n\n\n      const materials = newSimulation === null || newSimulation === void 0 ? void 0 : (_newSimulation$scheme = newSimulation.scheme) === null || _newSimulation$scheme === void 0 ? void 0 : (_newSimulation$scheme2 = _newSimulation$scheme.configuration) === null || _newSimulation$scheme2 === void 0 ? void 0 : _newSimulation$scheme2.materials;\n      const material = materials.values[index]; // (unselect)\n\n      material.selected.forEach(s => {\n        dispatch(unselect(s.uuid));\n      });\n      materials.values = [...materials.values.slice(0, index), ...materials.values.slice(index + 1)]; // Diff\n\n      const diff = _objectSpread(_objectSpread({}, materials), {}, {\n        done: !!materials.values.length\n      }); // Update\n\n\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'materials'],\n        value: diff\n      }]); // Mutate\n\n      mutateOneSimulation(newSimulation);\n    } catch (err) {\n      Error(errors.updateError, err);\n      setLoading(false);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(DeleteButton, {\n    loading: loading,\n    onDelete: onDelete\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Delete;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/delete/index.js"],"names":["useState","Error","DeleteButton","useDispatch","unselect","SimulationAPI","errors","updateError","Delete","project","simulation","index","loading","setLoading","mutateOneSimulation","useSimulations","simulations","dispatch","onDelete","newSimulation","materials","scheme","configuration","material","values","selected","forEach","s","uuid","slice","diff","done","length","update","id","key","type","method","path","value","err"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,KAAT,QAAsB,iCAAtB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,oCAAzB;AAEA,OAAOC,aAAP,MAA0B,sCAA1B;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,WAAW,EAAE;AADA,CAAf;AAIA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,UAAX;AAAuBC,EAAAA;AAAvB,CAAD,KAAoC;AACjD;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBb,QAAQ,CAAC,KAAD,CAAtC,CAFiD,CAIjD;;AACA,QAAM,GAAG;AAAEc,IAAAA;AAAF,GAAH,IAA8BT,aAAa,CAACU,cAAd,CAClCN,OADkC,aAClCA,OADkC,uBAClCA,OAAO,CAAEO,WADyB,CAApC;AAGA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEA;AACF;AACA;;AACE,QAAMe,QAAQ,GAAG,YAAY;AAC3BL,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AAAA;;AACF;AACA,YAAMM,aAAa,qBAAQT,UAAR,CAAnB,CAFE,CAIF;;;AACA,YAAMU,SAAS,GAAGD,aAAH,aAAGA,aAAH,gDAAGA,aAAa,CAAEE,MAAlB,oFAAG,sBAAuBC,aAA1B,2DAAG,uBAAsCF,SAAxD;AACA,YAAMG,QAAQ,GAAGH,SAAS,CAACI,MAAV,CAAiBb,KAAjB,CAAjB,CANE,CAQF;;AACAY,MAAAA,QAAQ,CAACE,QAAT,CAAkBC,OAAlB,CAA2BC,CAAD,IAAO;AAC/BV,QAAAA,QAAQ,CAACb,QAAQ,CAACuB,CAAC,CAACC,IAAH,CAAT,CAAR;AACD,OAFD;AAIAR,MAAAA,SAAS,CAACI,MAAV,GAAmB,CACjB,GAAGJ,SAAS,CAACI,MAAV,CAAiBK,KAAjB,CAAuB,CAAvB,EAA0BlB,KAA1B,CADc,EAEjB,GAAGS,SAAS,CAACI,MAAV,CAAiBK,KAAjB,CAAuBlB,KAAK,GAAG,CAA/B,CAFc,CAAnB,CAbE,CAkBF;;AACA,YAAMmB,IAAI,mCACLV,SADK;AAERW,QAAAA,IAAI,EAAE,CAAC,CAACX,SAAS,CAACI,MAAV,CAAiBQ;AAFjB,QAAV,CAnBE,CAwBF;;;AACA,YAAM3B,aAAa,CAAC4B,MAAd,CAAqB;AAAEC,QAAAA,EAAE,EAAExB,UAAU,CAACwB;AAAjB,OAArB,EAA4C,CAChD;AACEC,QAAAA,GAAG,EAAE,QADP;AAEEC,QAAAA,IAAI,EAAE,MAFR;AAGEC,QAAAA,MAAM,EAAE,MAHV;AAIEC,QAAAA,IAAI,EAAE,CAAC,eAAD,EAAkB,WAAlB,CAJR;AAKEC,QAAAA,KAAK,EAAET;AALT,OADgD,CAA5C,CAAN,CAzBE,CAmCF;;AACAhB,MAAAA,mBAAmB,CAACK,aAAD,CAAnB;AACD,KArCD,CAqCE,OAAOqB,GAAP,EAAY;AACZvC,MAAAA,KAAK,CAACK,MAAM,CAACC,WAAR,EAAqBiC,GAArB,CAAL;AACA3B,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GA5CD;AA8CA;AACF;AACA;;;AACE,sBAAO,QAAC,YAAD;AAAc,IAAA,OAAO,EAAED,OAAvB;AAAgC,IAAA,QAAQ,EAAEM;AAA1C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA/DD;;AAiEA,eAAeV,MAAf","sourcesContent":["import { useState } from 'react'\n\nimport { Error } from '../../../../assets/notification'\nimport { DeleteButton } from '../../../../assets/button'\n\nimport { useDispatch } from 'react-redux'\nimport { unselect } from '../../../../../store/select/action'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\nconst errors = {\n  updateError: 'Unable to delete the material'\n}\n\n/**\n * Delete material\n * @param {Object} props Props\n */\nconst Delete = ({ project, simulation, index }) => {\n  // State\n  const [loading, setLoading] = useState(false)\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n  const dispatch = useDispatch()\n\n  /**\n   * On delete\n   */\n  const onDelete = async () => {\n    setLoading(true)\n\n    try {\n      // New simulation\n      const newSimulation = { ...simulation }\n\n      // Update local\n      const materials = newSimulation?.scheme?.configuration?.materials\n      const material = materials.values[index]\n\n      // (unselect)\n      material.selected.forEach((s) => {\n        dispatch(unselect(s.uuid))\n      })\n\n      materials.values = [\n        ...materials.values.slice(0, index),\n        ...materials.values.slice(index + 1)\n      ]\n\n      // Diff\n      const diff = {\n        ...materials,\n        done: !!materials.values.length\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'materials'],\n          value: diff\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(newSimulation)\n    } catch (err) {\n      Error(errors.updateError, err)\n      setLoading(false)\n    }\n  }\n\n  /**\n   * Render\n   */\n  return <DeleteButton loading={loading} onDelete={onDelete} />\n}\n\nexport default Delete\n"]},"metadata":{},"sourceType":"module"}