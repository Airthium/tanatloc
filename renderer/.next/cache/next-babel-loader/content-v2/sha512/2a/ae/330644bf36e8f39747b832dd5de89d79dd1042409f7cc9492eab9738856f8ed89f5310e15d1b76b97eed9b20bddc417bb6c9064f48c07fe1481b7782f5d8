{"ast":null,"code":"import _Layout from \"antd/lib/layout\";\nimport _Card from \"antd/lib/card\";\nimport _Steps from \"antd/lib/steps\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _Space from \"antd/lib/space\";\nimport _Button from \"antd/lib/button\";\nimport _Drawer from \"antd/lib/drawer\";\nimport _Tabs from \"antd/lib/tabs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/run/index.js\";\nimport { useState, useEffect } from 'react';\nimport { CloudServerOutlined, EyeOutlined, EyeInvisibleOutlined, FileTextOutlined, RocketOutlined } from '@ant-design/icons';\nimport { Error } from '../../../assets/notification';\nimport CloudServer from './cloudServer';\nimport SimulationAPI from '../../../../../src/api/simulation';\n/**\n * Errors simulation/run\n * @memberof module:renderer/components/project/simulation\n */\n\nconst errors = {\n  runError: 'Unable to run the simulation',\n  updateError: 'Unable to update the simulation'\n};\n/**\n * Run\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nconst Run = ({\n  project,\n  simulation\n}) => {\n  var _simulation$scheme;\n\n  // State\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(false);\n  const {\n    0: cloudServerVisible,\n    1: setCloudServerVisible\n  } = useState(false);\n  const {\n    0: running,\n    1: setRunning\n  } = useState(false);\n  const {\n    0: logVisible,\n    1: setLogVisible\n  } = useState(false);\n  const {\n    0: logContent,\n    1: setLogContent\n  } = useState();\n  const {\n    0: meshingTasks,\n    1: setMeshingTasks\n  } = useState();\n  const {\n    0: simulatingTasks,\n    1: setSimulatingTasks\n  } = useState();\n  const {\n    0: configuration,\n    1: setConfiguration\n  } = useState(simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme = simulation.scheme) === null || _simulation$scheme === void 0 ? void 0 : _simulation$scheme.configuration);\n  const {\n    0: currentConfiguration,\n    1: setCurrentConfiguration\n  } = useState(); // Data\n\n  const [currentSimulation, {\n    mutateSimulation\n  }] = SimulationAPI.useSimulation(simulation === null || simulation === void 0 ? void 0 : simulation.id, 500);\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations); // Check tasks\n\n  useEffect(() => {\n    let done = true;\n    configuration && Object.keys(configuration).forEach(key => {\n      if (key === 'part' || key === 'run') return;\n      if (!configuration[key].done) done = false;\n    });\n    if (!configuration.run.cloudServer) done = false;\n    setDisabled(!done);\n  }, configuration);\n  useEffect(() => {\n    var _currentSimulation$ta, _currentSimulation$ta2, _currentSimulation$ta3;\n\n    const meshing = currentSimulation === null || currentSimulation === void 0 ? void 0 : (_currentSimulation$ta = currentSimulation.tasks) === null || _currentSimulation$ta === void 0 ? void 0 : _currentSimulation$ta.filter(t => t.type === 'mesh');\n    setMeshingTasks(meshing);\n    const simulating = currentSimulation === null || currentSimulation === void 0 ? void 0 : (_currentSimulation$ta2 = currentSimulation.tasks) === null || _currentSimulation$ta2 === void 0 ? void 0 : _currentSimulation$ta2.filter(t => t.type === 'simulation');\n    setSimulatingTasks(simulating);\n    const runningTasks = currentSimulation === null || currentSimulation === void 0 ? void 0 : (_currentSimulation$ta3 = currentSimulation.tasks) === null || _currentSimulation$ta3 === void 0 ? void 0 : _currentSimulation$ta3.filter(t => t.status !== 'finish' && t.status !== 'error');\n    if (runningTasks !== null && runningTasks !== void 0 && runningTasks.length) setRunning(true);else setRunning(false);\n  }, [JSON.stringify(currentSimulation)]);\n  useEffect(() => {\n    var _simulation$scheme2;\n\n    setConfiguration(simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme2 = simulation.scheme) === null || _simulation$scheme2 === void 0 ? void 0 : _simulation$scheme2.configuration);\n  }, [JSON.stringify(simulation)]);\n  useEffect(() => {\n    var _currentSimulation$sc;\n\n    setCurrentConfiguration(currentSimulation === null || currentSimulation === void 0 ? void 0 : (_currentSimulation$sc = currentSimulation.scheme) === null || _currentSimulation$sc === void 0 ? void 0 : _currentSimulation$sc.configuration);\n  }, [JSON.stringify(currentSimulation)]);\n  useEffect(() => {\n    if ((currentConfiguration === null || currentConfiguration === void 0 ? void 0 : currentConfiguration.run.done) !== (configuration === null || configuration === void 0 ? void 0 : configuration.run.done) || (currentConfiguration === null || currentConfiguration === void 0 ? void 0 : currentConfiguration.run.error) !== (configuration === null || configuration === void 0 ? void 0 : configuration.run.error)) mutateOneSimulation(currentSimulation);\n  }, [JSON.stringify(configuration), JSON.stringify(currentConfiguration)]);\n  /**\n   * On cloud server\n   * @param {Object} cloudServer Cloud server\n   */\n\n  const onCloudServer = async cloudServer => {\n    // Update local\n    currentConfiguration.run.cloudServer = cloudServer;\n\n    try {\n      // Update simulation\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'run'],\n        value: currentConfiguration.run\n      }]); // Mutate\n\n      mutateOneSimulation(currentSimulation);\n      mutateOneSimulation(newSimulation);\n    } catch (err) {\n      Error(errors.updateError, err);\n    }\n  };\n  /**\n   * On run\n   */\n\n\n  const onRun = async () => {\n    setRunning(true);\n    SimulationAPI.run({\n      id: simulation.id\n    }).catch(err => {\n      Error(errors.runError, err);\n    });\n  };\n  /**\n   * On log\n   * @param {Array} tasks Tasks\n   * @param {string} title Tabs title\n   */\n\n\n  const onLog = (tasks, title) => {\n    // Content\n    const content = tasks.map((t, index) => {\n      var _t$log;\n\n      return /*#__PURE__*/_jsxDEV(_Tabs.TabPane, {\n        tab: title + ' ' + (index + 1),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: t === null || t === void 0 ? void 0 : (_t$log = t.log) === null || _t$log === void 0 ? void 0 : _t$log.replace(/\\n\\n/g, '\\n').replace(/\\n/g, '<br />')\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }, this);\n    });\n    setLogContent( /*#__PURE__*/_jsxDEV(_Tabs, {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 19\n    }, this)); // Open\n\n    toggleLog();\n  };\n  /**\n   * Toogle log visibility\n   */\n\n\n  const toggleLog = () => {\n    setLogVisible(!logVisible);\n  };\n  /**\n   * Set part\n   * @param {Object} file File\n   */\n\n\n  const setPart = async file => {\n    // Update local\n    currentConfiguration.part = file;\n\n    try {\n      // Update simulation\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'part'],\n        value: file\n      }]); // Mutate\n\n      mutateOneSimulation(currentSimulation);\n    } catch (err) {\n      Error(errors.updateError, err);\n    }\n  };\n\n  const resultFiles = [];\n  simulatingTasks === null || simulatingTasks === void 0 ? void 0 : simulatingTasks.forEach(task => {\n    resultFiles.push(...(task.files || []));\n  });\n  /**\n   * Render\n   */\n\n  return /*#__PURE__*/_jsxDEV(_Layout, {\n    children: /*#__PURE__*/_jsxDEV(_Layout.Content, {\n      children: [/*#__PURE__*/_jsxDEV(CloudServer, {\n        visible: cloudServerVisible,\n        onClose: () => setCloudServerVisible(false),\n        onOk: onCloudServer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Drawer, {\n        title: \"Log\",\n        visible: logVisible,\n        onClose: toggleLog,\n        width: 512,\n        children: logContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Space, {\n        direction: \"vertical\",\n        children: [/*#__PURE__*/_jsxDEV(_Space, {\n          children: [/*#__PURE__*/_jsxDEV(_Button, {\n            icon: /*#__PURE__*/_jsxDEV(CloudServerOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 21\n            }, this),\n            onClick: () => setCloudServerVisible(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(_Button, {\n            disabled: disabled,\n            icon: /*#__PURE__*/_jsxDEV(RocketOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 21\n            }, this),\n            loading: running,\n            onClick: onRun,\n            children: \"Run\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(_Steps, {\n          direction: \"vertical\",\n          children: [meshingTasks === null || meshingTasks === void 0 ? void 0 : meshingTasks.map((task, index) => {\n            var _currentConfiguration, _task$file;\n\n            return /*#__PURE__*/_jsxDEV(_Steps.Step, {\n              title: \"Meshing\",\n              description: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(_Button, {\n                  icon: /*#__PURE__*/_jsxDEV(FileTextOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 31\n                  }, this),\n                  onClick: () => onLog(meshingTasks, 'Mesh'),\n                  size: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(_Button, {\n                  icon: ((_currentConfiguration = currentConfiguration.part) === null || _currentConfiguration === void 0 ? void 0 : _currentConfiguration.fileName) === ((_task$file = task.file) === null || _task$file === void 0 ? void 0 : _task$file.fileName) ? /*#__PURE__*/_jsxDEV(EyeInvisibleOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 29\n                  }, this) : /*#__PURE__*/_jsxDEV(EyeOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 253,\n                    columnNumber: 29\n                  }, this),\n                  size: \"small\",\n                  onClick: () => {\n                    var _currentConfiguration2, _task$file2;\n\n                    return setPart(((_currentConfiguration2 = currentConfiguration.part) === null || _currentConfiguration2 === void 0 ? void 0 : _currentConfiguration2.fileName) === ((_task$file2 = task.file) === null || _task$file2 === void 0 ? void 0 : _task$file2.fileName) ? null : task.file);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true),\n              subTitle: '(' + (index + 1) + '/' + (meshingTasks === null || meshingTasks === void 0 ? void 0 : meshingTasks.length) + ')',\n              status: task.status\n            }, task, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this);\n          }), simulatingTasks === null || simulatingTasks === void 0 ? void 0 : simulatingTasks.map((task, index) => {\n            return /*#__PURE__*/_jsxDEV(_Steps.Step, {\n              title: \"Simulating\",\n              description: /*#__PURE__*/_jsxDEV(_Button, {\n                icon: /*#__PURE__*/_jsxDEV(FileTextOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 29\n                }, this),\n                onClick: () => onLog(simulatingTasks, 'Simulation'),\n                size: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 21\n              }, this),\n              subTitle: '(' + (index + 1) + '/' + (simulatingTasks === null || simulatingTasks === void 0 ? void 0 : simulatingTasks.length) + ')',\n              status: task.status\n            }, task, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), resultFiles.length ? /*#__PURE__*/_jsxDEV(_Card, {\n          title: \"Results\",\n          children: /*#__PURE__*/_jsxDEV(_Space, {\n            direction: \"vertical\",\n            children: resultFiles.map(result => {\n              var _currentConfiguration3, _currentConfiguration4;\n\n              return /*#__PURE__*/_jsxDEV(_Space, {\n                children: [/*#__PURE__*/_jsxDEV(_Button, {\n                  icon: ((_currentConfiguration3 = currentConfiguration.part) === null || _currentConfiguration3 === void 0 ? void 0 : _currentConfiguration3.fileName) === (result === null || result === void 0 ? void 0 : result.fileName) && ((_currentConfiguration4 = currentConfiguration.part) === null || _currentConfiguration4 === void 0 ? void 0 : _currentConfiguration4.name) === (result === null || result === void 0 ? void 0 : result.name) ? /*#__PURE__*/_jsxDEV(EyeInvisibleOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 306,\n                    columnNumber: 29\n                  }, this) : /*#__PURE__*/_jsxDEV(EyeOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 29\n                  }, this),\n                  onClick: () => {\n                    var _currentConfiguration5, _currentConfiguration6;\n\n                    return setPart(((_currentConfiguration5 = currentConfiguration.part) === null || _currentConfiguration5 === void 0 ? void 0 : _currentConfiguration5.fileName) === (result === null || result === void 0 ? void 0 : result.fileName) && ((_currentConfiguration6 = currentConfiguration.part) === null || _currentConfiguration6 === void 0 ? void 0 : _currentConfiguration6.name) === (result === null || result === void 0 ? void 0 : result.name) ? null : result);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 23\n                }, this), result.name]\n              }, result.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Run;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/run/index.js"],"names":["useState","useEffect","CloudServerOutlined","EyeOutlined","EyeInvisibleOutlined","FileTextOutlined","RocketOutlined","Error","CloudServer","SimulationAPI","errors","runError","updateError","Run","project","simulation","disabled","setDisabled","cloudServerVisible","setCloudServerVisible","running","setRunning","logVisible","setLogVisible","logContent","setLogContent","meshingTasks","setMeshingTasks","simulatingTasks","setSimulatingTasks","configuration","setConfiguration","scheme","currentConfiguration","setCurrentConfiguration","currentSimulation","mutateSimulation","useSimulation","id","mutateOneSimulation","useSimulations","simulations","done","Object","keys","forEach","key","run","cloudServer","meshing","tasks","filter","t","type","simulating","runningTasks","status","length","JSON","stringify","error","onCloudServer","update","method","path","value","newSimulation","err","onRun","catch","onLog","title","content","map","index","__html","log","replace","toggleLog","setPart","file","part","resultFiles","task","push","files","fileName","result","name"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Button, Card, Drawer, Layout, Space, Steps, Tabs } from 'antd'\nimport {\n  CloudServerOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  FileTextOutlined,\n  RocketOutlined\n} from '@ant-design/icons'\n\nimport { Error } from '../../../assets/notification'\n\nimport CloudServer from './cloudServer'\n\nimport SimulationAPI from '../../../../../src/api/simulation'\n\n/**\n * Errors simulation/run\n * @memberof module:renderer/components/project/simulation\n */\nconst errors = {\n  runError: 'Unable to run the simulation',\n  updateError: 'Unable to update the simulation'\n}\n\n/**\n * Run\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\nconst Run = ({ project, simulation }) => {\n  // State\n  const [disabled, setDisabled] = useState(false)\n  const [cloudServerVisible, setCloudServerVisible] = useState(false)\n  const [running, setRunning] = useState(false)\n  const [logVisible, setLogVisible] = useState(false)\n  const [logContent, setLogContent] = useState()\n  const [meshingTasks, setMeshingTasks] = useState()\n  const [simulatingTasks, setSimulatingTasks] = useState()\n\n  const [configuration, setConfiguration] = useState(\n    simulation?.scheme?.configuration\n  )\n  const [currentConfiguration, setCurrentConfiguration] = useState()\n\n  // Data\n  const [currentSimulation, { mutateSimulation }] = SimulationAPI.useSimulation(\n    simulation?.id,\n    500\n  )\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n\n  // Check tasks\n  useEffect(() => {\n    let done = true\n    configuration &&\n      Object.keys(configuration).forEach((key) => {\n        if (key === 'part' || key === 'run') return\n        if (!configuration[key].done) done = false\n      })\n    if (!configuration.run.cloudServer) done = false\n    setDisabled(!done)\n  }, configuration)\n\n  useEffect(() => {\n    const meshing = currentSimulation?.tasks?.filter((t) => t.type === 'mesh')\n    setMeshingTasks(meshing)\n\n    const simulating = currentSimulation?.tasks?.filter(\n      (t) => t.type === 'simulation'\n    )\n    setSimulatingTasks(simulating)\n\n    const runningTasks = currentSimulation?.tasks?.filter(\n      (t) => t.status !== 'finish' && t.status !== 'error'\n    )\n    if (runningTasks?.length) setRunning(true)\n    else setRunning(false)\n  }, [JSON.stringify(currentSimulation)])\n\n  useEffect(() => {\n    setConfiguration(simulation?.scheme?.configuration)\n  }, [JSON.stringify(simulation)])\n\n  useEffect(() => {\n    setCurrentConfiguration(currentSimulation?.scheme?.configuration)\n  }, [JSON.stringify(currentSimulation)])\n\n  useEffect(() => {\n    if (\n      currentConfiguration?.run.done !== configuration?.run.done ||\n      currentConfiguration?.run.error !== configuration?.run.error\n    )\n      mutateOneSimulation(currentSimulation)\n  }, [JSON.stringify(configuration), JSON.stringify(currentConfiguration)])\n\n  /**\n   * On cloud server\n   * @param {Object} cloudServer Cloud server\n   */\n  const onCloudServer = async (cloudServer) => {\n    // Update local\n    currentConfiguration.run.cloudServer = cloudServer\n\n    try {\n      // Update simulation\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'run'],\n          value: currentConfiguration.run\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(currentSimulation)\n      mutateOneSimulation(newSimulation)\n    } catch (err) {\n      Error(errors.updateError, err)\n    }\n  }\n\n  /**\n   * On run\n   */\n  const onRun = async () => {\n    setRunning(true)\n\n    SimulationAPI.run({ id: simulation.id }).catch((err) => {\n      Error(errors.runError, err)\n    })\n  }\n\n  /**\n   * On log\n   * @param {Array} tasks Tasks\n   * @param {string} title Tabs title\n   */\n  const onLog = (tasks, title) => {\n    // Content\n    const content = tasks.map((t, index) => (\n      <Tabs.TabPane key={index} tab={title + ' ' + (index + 1)}>\n        <div\n          dangerouslySetInnerHTML={{\n            __html: t?.log?.replace(/\\n\\n/g, '\\n').replace(/\\n/g, '<br />')\n          }}\n        />\n      </Tabs.TabPane>\n    ))\n    setLogContent(<Tabs>{content}</Tabs>)\n\n    // Open\n    toggleLog()\n  }\n\n  /**\n   * Toogle log visibility\n   */\n  const toggleLog = () => {\n    setLogVisible(!logVisible)\n  }\n\n  /**\n   * Set part\n   * @param {Object} file File\n   */\n  const setPart = async (file) => {\n    // Update local\n    currentConfiguration.part = file\n\n    try {\n      // Update simulation\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'part'],\n          value: file\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(currentSimulation)\n    } catch (err) {\n      Error(errors.updateError, err)\n    }\n  }\n\n  const resultFiles = []\n  simulatingTasks?.forEach((task) => {\n    resultFiles.push(...(task.files || []))\n  })\n\n  /**\n   * Render\n   */\n  return (\n    <Layout>\n      <Layout.Content>\n        <CloudServer\n          visible={cloudServerVisible}\n          onClose={() => setCloudServerVisible(false)}\n          onOk={onCloudServer}\n        />\n        <Drawer\n          title=\"Log\"\n          visible={logVisible}\n          onClose={toggleLog}\n          width={512}\n        >\n          {logContent}\n        </Drawer>\n        <Space direction=\"vertical\">\n          <Space>\n            <Button\n              icon={<CloudServerOutlined />}\n              onClick={() => setCloudServerVisible(true)}\n            />\n            <Button\n              disabled={disabled}\n              icon={<RocketOutlined />}\n              loading={running}\n              onClick={onRun}\n            >\n              Run\n            </Button>\n          </Space>\n\n          <Steps direction=\"vertical\">\n            {meshingTasks?.map((task, index) => {\n              return (\n                <Steps.Step\n                  key={task}\n                  title=\"Meshing\"\n                  description={\n                    <>\n                      <Button\n                        icon={<FileTextOutlined />}\n                        onClick={() => onLog(meshingTasks, 'Mesh')}\n                        size=\"small\"\n                      />\n                      <Button\n                        icon={\n                          currentConfiguration.part?.fileName ===\n                          task.file?.fileName ? (\n                            <EyeInvisibleOutlined />\n                          ) : (\n                            <EyeOutlined />\n                          )\n                        }\n                        size=\"small\"\n                        onClick={() =>\n                          setPart(\n                            currentConfiguration.part?.fileName ===\n                              task.file?.fileName\n                              ? null\n                              : task.file\n                          )\n                        }\n                      />\n                    </>\n                  }\n                  subTitle={\n                    '(' + (index + 1) + '/' + meshingTasks?.length + ')'\n                  }\n                  status={task.status}\n                />\n              )\n            })}\n            {simulatingTasks?.map((task, index) => {\n              return (\n                <Steps.Step\n                  key={task}\n                  title=\"Simulating\"\n                  description={\n                    <Button\n                      icon={<FileTextOutlined />}\n                      onClick={() => onLog(simulatingTasks, 'Simulation')}\n                      size=\"small\"\n                    />\n                  }\n                  subTitle={\n                    '(' + (index + 1) + '/' + simulatingTasks?.length + ')'\n                  }\n                  status={task.status}\n                />\n              )\n            })}\n          </Steps>\n          {resultFiles.length ? (\n            <Card title=\"Results\">\n              <Space direction=\"vertical\">\n                {resultFiles.map((result) => {\n                  return (\n                    <Space key={result.name}>\n                      <Button\n                        icon={\n                          currentConfiguration.part?.fileName ===\n                            result?.fileName &&\n                          currentConfiguration.part?.name === result?.name ? (\n                            <EyeInvisibleOutlined />\n                          ) : (\n                            <EyeOutlined />\n                          )\n                        }\n                        onClick={() =>\n                          setPart(\n                            currentConfiguration.part?.fileName ===\n                              result?.fileName &&\n                              currentConfiguration.part?.name === result?.name\n                              ? null\n                              : result\n                          )\n                        }\n                      />\n                      {result.name}\n                    </Space>\n                  )\n                })}\n              </Space>\n            </Card>\n          ) : null}\n        </Space>\n      </Layout.Content>\n    </Layout>\n  )\n}\n\nexport default Run\n"]},"metadata":{},"sourceType":"module"}