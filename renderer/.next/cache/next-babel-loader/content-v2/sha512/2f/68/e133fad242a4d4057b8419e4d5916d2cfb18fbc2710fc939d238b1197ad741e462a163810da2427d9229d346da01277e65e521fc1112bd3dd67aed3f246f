{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Space from \"antd/lib/space\";\nimport _Table from \"antd/lib/table\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _Empty from \"antd/lib/empty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from 'next/router';\nimport { Error } from '../../assets/notification';\nimport Data from '../data';\nimport Delete from '../delete';\nimport ProjectAPI from '../../../../src/api/project';\n/**\n * Errors project/list\n * @memberof module:renderer/components/project\n */\n\nconst errors = {\n  updateError: 'Unable to update the project'\n};\n/**\n * Projects' list\n * @memberof module:renderer/components/project\n * @param {Object} props Props\n */\n\nconst ProjectList = ({\n  workspace,\n  filter\n}) => {\n  // Router\n  const router = useRouter(); // Load projects\n\n  const [projects, {\n    mutateOneProject\n  }] = ProjectAPI.useProjects(workspace === null || workspace === void 0 ? void 0 : workspace.projects); // Data\n\n  const data = projects.map(project => {\n    return Data(project, filter, title => setTitle(project, title));\n  }).filter(d => d); // Open project\n\n  const openProject = project => {\n    router.push({\n      pathname: '/project',\n      query: {\n        workspaceId: workspace.id,\n        projectId: project.id\n      }\n    });\n  };\n  /**\n   * Set title\n   * @param {string} project Project { id }\n   * @param {string} title Title\n   */\n\n\n  const setTitle = async (project, title) => {\n    try {\n      // Update\n      await ProjectAPI.update({\n        id: project.id\n      }, [{\n        key: 'title',\n        value: title\n      }]); // Mutate project\n\n      mutateOneProject(_objectSpread(_objectSpread({}, project), {}, {\n        title: title\n      }));\n    } catch (err) {\n      Error(errors.updateError, err);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxs(_Table, {\n    pagination: false,\n    dataSource: data,\n    bordered: true,\n    size: \"small\",\n    scroll: {\n      y: 'calc(100vh - 232px)'\n    },\n    locale: {\n      emptyText: /*#__PURE__*/_jsx(_Empty, {\n        image: _Empty.PRESENTED_IMAGE_SIMPLE,\n        description: \"No projects yet.\"\n      })\n    },\n    children: [/*#__PURE__*/_jsx(_Table.Column, {\n      title: \"\",\n      dataIndex: \"snapshot\",\n      onCell: project => {\n        return {\n          onClick: () => openProject(project)\n        };\n      }\n    }), /*#__PURE__*/_jsx(_Table.Column, {\n      title: \"Project Name\",\n      dataIndex: \"title\"\n    }), /*#__PURE__*/_jsx(_Table.Column, {\n      title: \"Status\",\n      dataIndex: \"tags\",\n      align: \"center\"\n    }), /*#__PURE__*/_jsx(_Table.Column, {\n      title: \"Administrators\",\n      dataIndex: \"owners\",\n      align: \"center\"\n    }), /*#__PURE__*/_jsx(_Table.Column, {\n      title: \"Actions\",\n      align: \"center\",\n      render: value => /*#__PURE__*/_jsx(_Space, {\n        size: \"middle\",\n        children: /*#__PURE__*/_jsx(Delete, {\n          workspace: workspace,\n          project: value\n        })\n      })\n    })]\n  });\n};\n\nexport default ProjectList;","map":null,"metadata":{},"sourceType":"module"}