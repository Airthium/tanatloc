{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/edit/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { Error } from '../../../../assets/notification';\nimport { EditButton } from '../../../../assets/button';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors boundaryCondition/edit\n */\n\nvar errors = {\n  updateError: 'Unable to edit the material'\n};\n/**\n * Edit material\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nvar Edit = function Edit(_ref) {\n  _s();\n\n  var disabled = _ref.disabled,\n      material = _ref.material,\n      project = _ref.project,\n      simulation = _ref.simulation,\n      part = _ref.part,\n      close = _ref.close;\n\n  // State\n  var _useState = useState(),\n      loading = _useState[0],\n      setLoading = _useState[1]; // Data\n\n\n  var _SimulationAPI$useSim = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations),\n      _SimulationAPI$useSim2 = _slicedToArray(_SimulationAPI$useSim, 2),\n      mutateOneSimulation = _SimulationAPI$useSim2[1].mutateOneSimulation;\n  /**\n   * On edit\n   */\n\n\n  var onEdit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newSimulation, materials, selection, index, diff;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n              // New simulation\n              newSimulation = _objectSpread({}, simulation);\n              materials = newSimulation.scheme.configuration.materials; // Modify selection\n\n              selection = part.solids.map(function (f) {\n                if (material.selected.includes(f.uuid)) return {\n                  uuid: f.uuid,\n                  label: f.number\n                };\n              }).filter(function (s) {\n                return s;\n              });\n              material.selected = selection; // Update local\n\n              index = materials.values.findIndex(function (m) {\n                return m.uuid === material.uuid;\n              });\n              materials.values = [].concat(_toConsumableArray(materials.values.slice(0, index)), [material], _toConsumableArray(materials.values.slice(index + 1))); // Diff\n\n              diff = _objectSpread({}, materials); // Update\n\n              _context.next = 11;\n              return SimulationAPI.update({\n                id: simulation.id\n              }, [{\n                key: 'scheme',\n                type: 'json',\n                method: 'diff',\n                path: ['configuration', 'materials'],\n                value: diff\n              }]);\n\n            case 11:\n              // Mutate\n              mutateOneSimulation(newSimulation); // Close\n\n              close();\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](1);\n              Error(errors.updateError, _context.t0);\n\n            case 18:\n              _context.prev = 18;\n              setLoading(false);\n              return _context.finish(18);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 15, 18, 21]]);\n    }));\n\n    return function onEdit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(EditButton, {\n    disabled: disabled,\n    loading: loading,\n    onEdit: onEdit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Edit, \"lB8uRqy6FxzCrckHoPcNtYg0gzY=\", false, function () {\n  return [SimulationAPI.useSimulations];\n});\n\n_c = Edit;\nexport default Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/edit/index.js"],"names":["useState","Error","EditButton","SimulationAPI","errors","updateError","Edit","disabled","material","project","simulation","part","close","loading","setLoading","useSimulations","simulations","mutateOneSimulation","onEdit","newSimulation","materials","scheme","configuration","selection","solids","map","f","selected","includes","uuid","label","number","filter","s","index","values","findIndex","m","slice","diff","update","id","key","type","method","path","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nimport { Error } from '../../../../assets/notification'\nimport { EditButton } from '../../../../assets/button'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\n/**\n * Errors boundaryCondition/edit\n */\nconst errors = {\n  updateError: 'Unable to edit the material'\n}\n\n/**\n * Edit material\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\nconst Edit = ({ disabled, material, project, simulation, part, close }) => {\n  // State\n  const [loading, setLoading] = useState()\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n\n  /**\n   * On edit\n   */\n  const onEdit = async () => {\n    setLoading(true)\n\n    try {\n      // New simulation\n      const newSimulation = { ...simulation }\n      const materials = newSimulation.scheme.configuration.materials\n\n      // Modify selection\n      const selection = part.solids\n        .map((f) => {\n          if (material.selected.includes(f.uuid))\n            return {\n              uuid: f.uuid,\n              label: f.number\n            }\n        })\n        .filter((s) => s)\n      material.selected = selection\n\n      // Update local\n      const index = materials.values.findIndex((m) => m.uuid === material.uuid)\n      materials.values = [\n        ...materials.values.slice(0, index),\n        material,\n        ...materials.values.slice(index + 1)\n      ]\n\n      // Diff\n      const diff = {\n        ...materials\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'materials'],\n          value: diff\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(newSimulation)\n\n      // Close\n      close()\n    } catch (err) {\n      Error(errors.updateError, err)\n    } finally {\n      setLoading(false)\n    }\n  }\n  /**\n   * Render\n   */\n  return <EditButton disabled={disabled} loading={loading} onEdit={onEdit} />\n}\n\nexport default Edit\n"]},"metadata":{},"sourceType":"module"}