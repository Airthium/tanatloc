{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/delete/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { Error } from '../../../../assets/notification';\nimport { DeleteButton } from '../../../../assets/button';\nimport { useDispatch } from 'react-redux';\nimport { unselect } from '../../../../../store/select/action';\nimport SimulationAPI from '../../../../../../src/api/simulation';\nvar errors = {\n  updateError: 'Unable to delete the material'\n};\n/**\n * Delete material\n * @param {Object} props Props\n */\n\nvar Delete = function Delete(_ref) {\n  _s();\n\n  var project = _ref.project,\n      simulation = _ref.simulation,\n      index = _ref.index;\n\n  // State\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1]; // Data\n\n\n  var _SimulationAPI$useSim = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations),\n      _SimulationAPI$useSim2 = _slicedToArray(_SimulationAPI$useSim, 2),\n      mutateOneSimulation = _SimulationAPI$useSim2[1].mutateOneSimulation;\n\n  var dispatch = useDispatch();\n  /**\n   * On delete\n   */\n\n  var onDelete = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _newSimulation$scheme, _newSimulation$scheme2, newSimulation, materials, material, diff;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n              // New simulation\n              newSimulation = _objectSpread({}, simulation); // Update local\n\n              materials = newSimulation === null || newSimulation === void 0 ? void 0 : (_newSimulation$scheme = newSimulation.scheme) === null || _newSimulation$scheme === void 0 ? void 0 : (_newSimulation$scheme2 = _newSimulation$scheme.configuration) === null || _newSimulation$scheme2 === void 0 ? void 0 : _newSimulation$scheme2.materials;\n              material = materials.values[index]; // (unselect)\n\n              material.selected.forEach(function (s) {\n                dispatch(unselect(s.uuid));\n              });\n              materials.values = [].concat(_toConsumableArray(materials.values.slice(0, index)), _toConsumableArray(materials.values.slice(index + 1))); // Diff\n\n              diff = _objectSpread(_objectSpread({}, materials), {}, {\n                done: !!materials.values.length\n              }); // Update\n\n              _context.next = 10;\n              return SimulationAPI.update({\n                id: simulation.id\n              }, [{\n                key: 'scheme',\n                type: 'json',\n                method: 'diff',\n                path: ['configuration', 'materials'],\n                value: diff\n              }]);\n\n            case 10:\n              // Mutate\n              mutateOneSimulation(newSimulation);\n              _context.next = 17;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              Error(errors.updateError, _context.t0);\n              setLoading(false);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    }));\n\n    return function onDelete() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(DeleteButton, {\n    loading: loading,\n    onDelete: onDelete\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Delete, \"vO1D7/5R3dZn2qZWuD0eceUM5S8=\", false, function () {\n  return [SimulationAPI.useSimulations, useDispatch];\n});\n\n_c = Delete;\nexport default Delete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Delete\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/delete/index.js"],"names":["useState","Error","DeleteButton","useDispatch","unselect","SimulationAPI","errors","updateError","Delete","project","simulation","index","loading","setLoading","useSimulations","simulations","mutateOneSimulation","dispatch","onDelete","newSimulation","materials","scheme","configuration","material","values","selected","forEach","s","uuid","slice","diff","done","length","update","id","key","type","method","path","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nimport { Error } from '../../../../assets/notification'\nimport { DeleteButton } from '../../../../assets/button'\n\nimport { useDispatch } from 'react-redux'\nimport { unselect } from '../../../../../store/select/action'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\nconst errors = {\n  updateError: 'Unable to delete the material'\n}\n\n/**\n * Delete material\n * @param {Object} props Props\n */\nconst Delete = ({ project, simulation, index }) => {\n  // State\n  const [loading, setLoading] = useState(false)\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n  const dispatch = useDispatch()\n\n  /**\n   * On delete\n   */\n  const onDelete = async () => {\n    setLoading(true)\n\n    try {\n      // New simulation\n      const newSimulation = { ...simulation }\n\n      // Update local\n      const materials = newSimulation?.scheme?.configuration?.materials\n      const material = materials.values[index]\n\n      // (unselect)\n      material.selected.forEach((s) => {\n        dispatch(unselect(s.uuid))\n      })\n\n      materials.values = [\n        ...materials.values.slice(0, index),\n        ...materials.values.slice(index + 1)\n      ]\n\n      // Diff\n      const diff = {\n        ...materials,\n        done: !!materials.values.length\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'materials'],\n          value: diff\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(newSimulation)\n    } catch (err) {\n      Error(errors.updateError, err)\n      setLoading(false)\n    }\n  }\n\n  /**\n   * Render\n   */\n  return <DeleteButton loading={loading} onDelete={onDelete} />\n}\n\nexport default Delete\n"]},"metadata":{},"sourceType":"module"}