{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _Button from \"antd/lib/button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { Error } from '../../assets/notification';\nimport PluginForm from './pluginForm';\nimport List from './list';\nimport PluginAPI from '../../../../src/api/plugin';\n/**\n * Errors hpc/plugin\n */\n\nconst errors = {\n  updateError: 'Unable to update plugins'\n};\n/**\n * Plugin\n * @param {Object} props Props\n */\n\nconst Plugin = ({\n  plugin\n}) => {\n  // State\n  const {\n    0: add,\n    1: setAdd\n  } = useState(false); // Data\n\n  const [, {\n    addOnePlugin\n  }] = PluginAPI.usePlugins();\n  /**\n   * On finish\n   * @param {Object} values Values\n   */\n\n  const onFinish = async values => {\n    try {\n      // Set values\n      Object.keys(values).forEach(key => {\n        plugin.configuration[key].value = values[key];\n      }); // Remove logo\n\n      plugin.logo && delete plugin.logo; // Set uuid\n\n      plugin.uuid = uuid(); // API\n\n      await PluginAPI.add(plugin); // Mutate\n\n      addOnePlugin(plugin); // Finish\n\n      setAdd(false);\n    } catch (err) {\n      Error(errors.updateError, err);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [add ? /*#__PURE__*/_jsx(PluginForm, {\n      plugin: plugin,\n      onFinish: onFinish,\n      onCancel: () => setAdd(false)\n    }) : /*#__PURE__*/_jsx(_Button, {\n      type: \"primary\",\n      onClick: () => setAdd(true),\n      children: \"Add\"\n    }), /*#__PURE__*/_jsx(List, {\n      plugin: plugin\n    })]\n  });\n};\n\nexport default Plugin;","map":null,"metadata":{},"sourceType":"module"}