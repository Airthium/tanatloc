{"ast":null,"code":"import _Card from \"antd/lib/card\";\nimport _Row from \"antd/lib/row\";\nimport _Input from \"antd/lib/input\";\nimport _Col from \"antd/lib/col\";\nimport _Space from \"antd/lib/space\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Upload from \"antd/lib/upload\";\nimport _Button from \"antd/lib/button\";\nimport _Avatar from \"antd/lib/avatar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _notification from \"antd/lib/notification\";\nimport _Form from \"antd/lib/form\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { UploadOutlined, UserOutlined } from '@ant-design/icons';\nimport { Error } from '../../assets/notification';\nimport UserAPI from '../../../../src/api/user';\nimport AvatarAPI from '../../../../src/api/avatar';\n/**\n * Errors account/information\n * @memberof module:renderer/components/account\n */\n\nconst errors = {\n  updateError: 'Unable to update informations',\n  badFormat: 'Supported format: jpg, png',\n  badSize: 'Image must be smaller than 5MB'\n};\n/**\n * Information\n * @memberof module:renderer/components/account\n */\n\nconst Information = () => {\n  // State\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: uploading,\n    1: setUploading\n  } = useState(false); // Form\n\n  const [form] = _Form.useForm(); // Data\n\n\n  const [user, {\n    mutateUser\n  }] = UserAPI.useUser(); // Layout\n\n  const avatarLayout = {\n    wrapperCol: {\n      offset: 0,\n      span: 4\n    }\n  };\n  const layout = {\n    labelCol: {\n      span: 5\n    },\n    wrapperCol: {\n      span: 8\n    }\n  };\n  const buttonLayout = {\n    wrapperCol: {\n      offset: 5,\n      span: 8\n    }\n  };\n  /**\n   * On finish\n   * @param {Object} data Data\n   */\n\n  const onFinish = async data => {\n    setLoading(true);\n\n    try {\n      const toUpdate = []; // TODO disable for now\n      // if (data.username !== user.email)\n      //   toUpdate.push({ key: 'email', value: data.username })\n\n      if (data.firstname !== user.firstname) toUpdate.push({\n        key: 'firstname',\n        value: data.firstname\n      });\n      if (data.lastname !== user.lastname) toUpdate.push({\n        key: 'lastname',\n        value: data.lastname\n      });\n      if (data.email !== user.email) toUpdate.push({\n        key: 'email',\n        value: data.email\n      }); // Update\n\n      await UserAPI.update(toUpdate); // Mutate user\n\n      mutateUser({\n        user: _objectSpread(_objectSpread({}, user), {}, {\n          firstname: data.firstname,\n          lastname: data.lastname,\n          email: data.email\n        })\n      });\n    } catch (err) {\n      Error(errors.updateError, err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  /**\n   * On cancel\n   */\n\n\n  const onCancel = () => {\n    form.resetFields();\n  };\n  /**\n   * Before upload\n   * @param {File} file File\n   */\n\n\n  const beforeUpload = file => {\n    const goodFormat = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!goodFormat) _notification.error({\n      message: errors.badFormat\n    });\n    const goodSize = file.size / 1024 / 1024 < 5;\n    if (!goodSize) _notification.error({\n      message: errors.badSize\n    });\n    return goodFormat && goodSize;\n  };\n  /**\n   * On avatar change\n   * @param {Object} info Info\n   */\n\n\n  const onChange = async info => {\n    if (info.file.status === 'uploading') {\n      setUploading(true);\n    }\n\n    if (info.file.status === 'done') {\n      try {\n        // Read image\n        const img = await getBase64(info.file.originFileObj); // Add avatar\n\n        await AvatarAPI.add({\n          name: info.file.name,\n          uid: info.file.uid,\n          data: img\n        }); // Mutate user\n\n        mutateUser({\n          user: _objectSpread(_objectSpread({}, user), {}, {\n            avatar: img\n          })\n        });\n      } catch (err) {\n        Error(err.message, err);\n      } finally {\n        setUploading(false);\n      }\n    }\n  };\n  /**\n   * Read base64 image\n   * @param {File} file File\n   */\n\n\n  const getBase64 = async file => {\n    const reader = new FileReader();\n    const img = await new Promise(resolve => {\n      reader.addEventListener('load', () => {\n        resolve(reader.result);\n      });\n      reader.readAsDataURL(file);\n    });\n    return img;\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(_Card, {\n    title: \"Contact Details\",\n    className: \"Vertical-gutter\",\n    children: /*#__PURE__*/_jsx(_Form, _objectSpread(_objectSpread({}, layout), {}, {\n      form: form,\n      initialValues: {\n        firstname: user.firstname,\n        lastname: user.lastname,\n        email: user.email\n      },\n      onFinish: onFinish,\n      name: \"personalForm\",\n      children: /*#__PURE__*/_jsxs(_Row, {\n        children: [/*#__PURE__*/_jsx(_Col, {\n          span: 4,\n          children: /*#__PURE__*/_jsx(_Form.Item, _objectSpread(_objectSpread({}, avatarLayout), {}, {\n            children: /*#__PURE__*/_jsxs(_Space, {\n              direction: \"vertical\",\n              className: \"Account-avatar\",\n              children: [/*#__PURE__*/_jsx(_Avatar, {\n                size: 128,\n                src: user.avatar && Buffer.from(user.avatar).toString(),\n                icon: /*#__PURE__*/_jsx(UserOutlined, {})\n              }), /*#__PURE__*/_jsx(_Upload, {\n                accept: '.jpg,.png',\n                showUploadList: false,\n                beforeUpload: beforeUpload,\n                onChange: onChange,\n                children: /*#__PURE__*/_jsx(_Button, {\n                  size: \"small\",\n                  icon: /*#__PURE__*/_jsx(UploadOutlined, {}),\n                  loading: uploading,\n                  children: \"Upload new\"\n                })\n              })]\n            })\n          }))\n        }), /*#__PURE__*/_jsxs(_Col, {\n          span: 20,\n          children: [/*#__PURE__*/_jsx(_Form.Item, {\n            label: \"Email\",\n            name: \"email\",\n            children: /*#__PURE__*/_jsx(_Input, {})\n          }), /*#__PURE__*/_jsx(_Form.Item, {\n            label: \"First name\",\n            name: \"firstname\",\n            children: /*#__PURE__*/_jsx(_Input, {})\n          }), /*#__PURE__*/_jsx(_Form.Item, {\n            label: \"Last name\",\n            name: \"lastname\",\n            children: /*#__PURE__*/_jsx(_Input, {})\n          }), /*#__PURE__*/_jsx(_Form.Item, _objectSpread(_objectSpread({}, buttonLayout), {}, {\n            style: {\n              marginBottom: 'unset'\n            },\n            children: /*#__PURE__*/_jsxs(_Space, {\n              children: [/*#__PURE__*/_jsx(_Button, {\n                type: \"primary\",\n                htmlType: \"submit\",\n                loading: loading,\n                children: \"Apply changes\"\n              }), /*#__PURE__*/_jsx(_Button, {\n                type: \"text\",\n                onClick: onCancel,\n                children: \"Cancel\"\n              })]\n            })\n          }))]\n        })]\n      })\n    }))\n  });\n};\n\nexport default Information;","map":null,"metadata":{},"sourceType":"module"}