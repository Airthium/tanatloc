{"ast":null,"code":"import _Drawer from \"antd/lib/drawer\";\nimport _Button from \"antd/lib/button\";\nimport _Card from \"antd/lib/card\";\nimport _Space from \"antd/lib/space\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Typography from \"antd/lib/typography\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport DataBase from '../database';\nimport Formula from '../../../../assets/formula';\nimport Selector from '../../../../assets/selector';\nimport Add from '../add';\nimport Edit from '../edit';\n\nconst Material = ({\n  project,\n  simulation,\n  visible,\n  part,\n  materials,\n  material,\n  close\n}) => {\n  var _current$material, _materials$children;\n\n  // State\n  const {\n    0: current,\n    1: setCurrent\n  } = useState();\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(true); // Edit\n\n  useEffect(() => {\n    if (material) setCurrent(material);\n  }, [material]); // Disabled\n\n  useEffect(() => {\n    var _current$selected;\n\n    if (!current || !current.material || !((_current$selected = current.selected) !== null && _current$selected !== void 0 && _current$selected.length)) setDisabled(true);else setDisabled(false);\n  }, [current]);\n  /**\n   *\n   * @param {Object} currentMaterial Current material\n   */\n\n  const onMaterialSelect = currentMaterial => {\n    setCurrent(_objectSpread(_objectSpread({}, current), {}, {\n      material: currentMaterial\n    }));\n  };\n  /**\n   * On select\n   * @param {Object} selected Selected\n   */\n\n\n  const onSelected = selected => {\n    setCurrent(_objectSpread(_objectSpread({}, current), {}, {\n      selected\n    }));\n  };\n  /**\n   * On close\n   */\n\n\n  const onClose = () => {\n    close();\n  };\n\n  return /*#__PURE__*/_jsxs(_Drawer, {\n    title: \"Material\",\n    placement: \"left\",\n    closable: false,\n    visible: visible,\n    mask: false,\n    maskClosable: false,\n    width: 300,\n    children: [/*#__PURE__*/_jsx(_Card, {\n      children: /*#__PURE__*/_jsxs(_Space, {\n        direction: \"vertical\",\n        children: [/*#__PURE__*/_jsx(DataBase, {\n          onSelect: onMaterialSelect\n        }), /*#__PURE__*/_jsx(_Typography.Text, {\n          children: current === null || current === void 0 ? void 0 : (_current$material = current.material) === null || _current$material === void 0 ? void 0 : _current$material.label\n        }), materials === null || materials === void 0 ? void 0 : (_materials$children = materials.children) === null || _materials$children === void 0 ? void 0 : _materials$children.map(child => {\n          var _current$material2, _current$material2$ch;\n\n          const m = current === null || current === void 0 ? void 0 : (_current$material2 = current.material) === null || _current$material2 === void 0 ? void 0 : (_current$material2$ch = _current$material2.children) === null || _current$material2$ch === void 0 ? void 0 : _current$material2$ch.find(c => c.symbol === child.name);\n          if (m) return /*#__PURE__*/_jsx(Formula, {\n            defaultValue: m.value,\n            unit: child.unit,\n            onChange: val => {\n              m.value = val;\n            }\n          }, m.symbol);\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Selector, {\n      part: part,\n      updateSelected: onSelected\n    }), /*#__PURE__*/_jsxs(_Space, {\n      children: [/*#__PURE__*/_jsx(_Button, {\n        type: \"danger\",\n        onClick: onClose,\n        children: \"Cancel\"\n      }), material ? /*#__PURE__*/_jsx(Edit, {\n        disabled: disabled,\n        material: current,\n        project: project,\n        simulation: simulation,\n        part: part,\n        close: onClose\n      }) : /*#__PURE__*/_jsx(Add, {\n        disabled: disabled,\n        material: current,\n        project: project,\n        simulation: simulation,\n        part: part,\n        close: onClose\n      })]\n    })]\n  });\n};\n\nexport default Material;","map":null,"metadata":{},"sourceType":"module"}