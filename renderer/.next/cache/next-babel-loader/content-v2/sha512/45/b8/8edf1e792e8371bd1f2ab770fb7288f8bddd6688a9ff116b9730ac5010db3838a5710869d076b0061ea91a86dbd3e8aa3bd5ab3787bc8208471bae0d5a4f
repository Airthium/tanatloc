{"ast":null,"code":"import { AdditiveBlending, Color, DoubleSide, LinearFilter, Matrix4, MeshBasicMaterial, MeshDepthMaterial, NoBlending, RGBADepthPacking, RGBAFormat, ShaderMaterial, UniformsUtils, Vector2, Vector3, WebGLRenderTarget } from '../../../build/three.module.js';\nimport { Pass } from '../postprocessing/Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar OutlinePass = function OutlinePass(resolution, scene, camera, selectedObjects) {\n  this.renderScene = scene;\n  this.renderCamera = camera;\n  this.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n  this.visibleEdgeColor = new Color(1, 1, 1);\n  this.hiddenEdgeColor = new Color(0.1, 0.04, 0.02);\n  this.edgeGlow = 0.0;\n  this.usePatternTexture = false;\n  this.edgeThickness = 1.0;\n  this.edgeStrength = 3.0;\n  this.downSampleRatio = 2;\n  this.pulsePeriod = 0;\n  this._visibilityCache = new Map();\n  Pass.call(this);\n  this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n  var pars = {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  };\n  var resx = Math.round(this.resolution.x / this.downSampleRatio);\n  var resy = Math.round(this.resolution.y / this.downSampleRatio);\n  this.maskBufferMaterial = new MeshBasicMaterial({\n    color: 0xffffff\n  });\n  this.maskBufferMaterial.side = DoubleSide;\n  this.renderTargetMaskBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y, pars);\n  this.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\n  this.renderTargetMaskBuffer.texture.generateMipmaps = false;\n  this.depthMaterial = new MeshDepthMaterial();\n  this.depthMaterial.side = DoubleSide;\n  this.depthMaterial.depthPacking = RGBADepthPacking;\n  this.depthMaterial.blending = NoBlending;\n  this.prepareMaskMaterial = this.getPrepareMaskMaterial();\n  this.prepareMaskMaterial.side = DoubleSide;\n  this.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ(this.prepareMaskMaterial.fragmentShader, this.renderCamera);\n  this.renderTargetDepthBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y, pars);\n  this.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\n  this.renderTargetDepthBuffer.texture.generateMipmaps = false;\n  this.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget(resx, resy, pars);\n  this.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\n  this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n  this.renderTargetBlurBuffer1 = new WebGLRenderTarget(resx, resy, pars);\n  this.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\n  this.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n  this.renderTargetBlurBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2), pars);\n  this.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\n  this.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n  this.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n  this.renderTargetEdgeBuffer1 = new WebGLRenderTarget(resx, resy, pars);\n  this.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\n  this.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n  this.renderTargetEdgeBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2), pars);\n  this.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\n  this.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n  var MAX_EDGE_THICKNESS = 4;\n  var MAX_EDGE_GLOW = 4;\n  this.separableBlurMaterial1 = this.getSeperableBlurMaterial(MAX_EDGE_THICKNESS);\n  this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n  this.separableBlurMaterial1.uniforms['kernelRadius'].value = 1;\n  this.separableBlurMaterial2 = this.getSeperableBlurMaterial(MAX_EDGE_GLOW);\n  this.separableBlurMaterial2.uniforms['texSize'].value.set(Math.round(resx / 2), Math.round(resy / 2));\n  this.separableBlurMaterial2.uniforms['kernelRadius'].value = MAX_EDGE_GLOW; // Overlay material\n\n  this.overlayMaterial = this.getOverlayMaterial(); // copy material\n\n  if (CopyShader === undefined) console.error('THREE.OutlinePass relies on CopyShader');\n  var copyShader = CopyShader;\n  this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n  this.copyUniforms['opacity'].value = 1.0;\n  this.materialCopy = new ShaderMaterial({\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false,\n    transparent: true\n  });\n  this.enabled = true;\n  this.needsSwap = false;\n  this._oldClearColor = new Color();\n  this.oldClearAlpha = 1;\n  this.fsQuad = new Pass.FullScreenQuad(null);\n  this.tempPulseColor1 = new Color();\n  this.tempPulseColor2 = new Color();\n  this.textureMatrix = new Matrix4();\n\n  function replaceDepthToViewZ(string, camera) {\n    var type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n    return string.replace(/DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ');\n  }\n};\n\n_c = OutlinePass;\nOutlinePass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: OutlinePass,\n  dispose: function dispose() {\n    this.renderTargetMaskBuffer.dispose();\n    this.renderTargetDepthBuffer.dispose();\n    this.renderTargetMaskDownSampleBuffer.dispose();\n    this.renderTargetBlurBuffer1.dispose();\n    this.renderTargetBlurBuffer2.dispose();\n    this.renderTargetEdgeBuffer1.dispose();\n    this.renderTargetEdgeBuffer2.dispose();\n  },\n  setSize: function setSize(width, height) {\n    this.renderTargetMaskBuffer.setSize(width, height);\n    var resx = Math.round(width / this.downSampleRatio);\n    var resy = Math.round(height / this.downSampleRatio);\n    this.renderTargetMaskDownSampleBuffer.setSize(resx, resy);\n    this.renderTargetBlurBuffer1.setSize(resx, resy);\n    this.renderTargetEdgeBuffer1.setSize(resx, resy);\n    this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n    this.renderTargetBlurBuffer2.setSize(resx, resy);\n    this.renderTargetEdgeBuffer2.setSize(resx, resy);\n    this.separableBlurMaterial2.uniforms['texSize'].value.set(resx, resy);\n  },\n  changeVisibilityOfSelectedObjects: function changeVisibilityOfSelectedObjects(bVisible) {\n    var cache = this._visibilityCache;\n\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) {\n        if (bVisible === true) {\n          object.visible = cache.get(object);\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n\n    for (var i = 0; i < this.selectedObjects.length; i++) {\n      var selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n  },\n  changeVisibilityOfNonSelectedObjects: function changeVisibilityOfNonSelectedObjects(bVisible) {\n    var cache = this._visibilityCache;\n    var selectedMeshes = [];\n\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) selectedMeshes.push(object);\n    }\n\n    for (var i = 0; i < this.selectedObjects.length; i++) {\n      var selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n\n    function VisibilityChangeCallBack(object) {\n      if (object.isMesh || object.isSprite) {\n        // only meshes and sprites are supported by OutlinePass\n        var bFound = false;\n\n        for (var i = 0; i < selectedMeshes.length; i++) {\n          var selectedObjectId = selectedMeshes[i].id;\n\n          if (selectedObjectId === object.id) {\n            bFound = true;\n            break;\n          }\n        }\n\n        if (bFound === false) {\n          var visibility = object.visible;\n\n          if (bVisible === false || cache.get(object) === true) {\n            object.visible = bVisible;\n          }\n\n          cache.set(object, visibility);\n        }\n      } else if (object.isPoints || object.isLine) {\n        // the visibilty of points and lines is always set to false in order to\n        // not affect the outline computation\n        if (bVisible === true) {\n          object.visible = cache.get(object); // restore\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n\n    this.renderScene.traverse(VisibilityChangeCallBack);\n  },\n  updateTextureMatrix: function updateTextureMatrix() {\n    this.textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    this.textureMatrix.multiply(this.renderCamera.projectionMatrix);\n    this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse);\n  },\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (this.selectedObjects.length > 0) {\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      renderer.setClearColor(0xffffff, 1); // Make selected objects invisible\n\n      this.changeVisibilityOfSelectedObjects(false);\n      var currentBackground = this.renderScene.background;\n      this.renderScene.background = null; // 1. Draw Non Selected objects in the depth buffer\n\n      this.renderScene.overrideMaterial = this.depthMaterial;\n      renderer.setRenderTarget(this.renderTargetDepthBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera); // Make selected objects visible\n\n      this.changeVisibilityOfSelectedObjects(true);\n\n      this._visibilityCache.clear(); // Update Texture Matrix for Depth compare\n\n\n      this.updateTextureMatrix(); // Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\n      this.changeVisibilityOfNonSelectedObjects(false);\n      this.renderScene.overrideMaterial = this.prepareMaskMaterial;\n      this.prepareMaskMaterial.uniforms['cameraNearFar'].value.set(this.renderCamera.near, this.renderCamera.far);\n      this.prepareMaskMaterial.uniforms['depthTexture'].value = this.renderTargetDepthBuffer.texture;\n      this.prepareMaskMaterial.uniforms['textureMatrix'].value = this.textureMatrix;\n      renderer.setRenderTarget(this.renderTargetMaskBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera);\n      this.renderScene.overrideMaterial = null;\n      this.changeVisibilityOfNonSelectedObjects(true);\n\n      this._visibilityCache.clear();\n\n      this.renderScene.background = currentBackground; // 2. Downsample to Half resolution\n\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = this.renderTargetMaskBuffer.texture;\n      renderer.setRenderTarget(this.renderTargetMaskDownSampleBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.tempPulseColor1.copy(this.visibleEdgeColor);\n      this.tempPulseColor2.copy(this.hiddenEdgeColor);\n\n      if (this.pulsePeriod > 0) {\n        var scalar = (1 + 0.25) / 2 + Math.cos(performance.now() * 0.01 / this.pulsePeriod) * (1.0 - 0.25) / 2;\n        this.tempPulseColor1.multiplyScalar(scalar);\n        this.tempPulseColor2.multiplyScalar(scalar);\n      } // 3. Apply Edge Detection Pass\n\n\n      this.fsQuad.material = this.edgeDetectionMaterial;\n      this.edgeDetectionMaterial.uniforms['maskTexture'].value = this.renderTargetMaskDownSampleBuffer.texture;\n      this.edgeDetectionMaterial.uniforms['texSize'].value.set(this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height);\n      this.edgeDetectionMaterial.uniforms['visibleEdgeColor'].value = this.tempPulseColor1;\n      this.edgeDetectionMaterial.uniforms['hiddenEdgeColor'].value = this.tempPulseColor2;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer); // 4. Apply Blur on Half res\n\n      this.fsQuad.material = this.separableBlurMaterial1;\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = OutlinePass.BlurDirectionX;\n      this.separableBlurMaterial1.uniforms['kernelRadius'].value = this.edgeThickness;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetBlurBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = OutlinePass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Apply Blur on quarter res\n\n      this.fsQuad.material = this.separableBlurMaterial2;\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = OutlinePass.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetBlurBuffer2.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = OutlinePass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Blend it additively over the input texture\n\n      this.fsQuad.material = this.overlayMaterial;\n      this.overlayMaterial.uniforms['maskTexture'].value = this.renderTargetMaskBuffer.texture;\n      this.overlayMaterial.uniforms['edgeTexture1'].value = this.renderTargetEdgeBuffer1.texture;\n      this.overlayMaterial.uniforms['edgeTexture2'].value = this.renderTargetEdgeBuffer2.texture;\n      this.overlayMaterial.uniforms['patternTexture'].value = this.patternTexture;\n      this.overlayMaterial.uniforms['edgeStrength'].value = this.edgeStrength;\n      this.overlayMaterial.uniforms['edgeGlow'].value = this.edgeGlow;\n      this.overlayMaterial.uniforms['usePatternTexture'].value = this.usePatternTexture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    }\n  },\n  getPrepareMaskMaterial: function getPrepareMaskMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        'depthTexture': {\n          value: null\n        },\n        'cameraNearFar': {\n          value: new Vector2(0.5, 0.5)\n        },\n        'textureMatrix': {\n          value: null\n        }\n      },\n      vertexShader: ['#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', 'varying vec4 projTexCoord;', 'varying vec4 vPosition;', 'uniform mat4 textureMatrix;', 'void main() {', '\t#include <skinbase_vertex>', '\t#include <begin_vertex>', '\t#include <morphtarget_vertex>', '\t#include <skinning_vertex>', '\t#include <project_vertex>', '\tvPosition = mvPosition;', '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\tprojTexCoord = textureMatrix * worldPosition;', '}'].join('\\n'),\n      fragmentShader: ['#include <packing>', 'varying vec4 vPosition;', 'varying vec4 projTexCoord;', 'uniform sampler2D depthTexture;', 'uniform vec2 cameraNearFar;', 'void main() {', '\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));', '\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );', '\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;', '\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);', '}'].join('\\n')\n    });\n  },\n  getEdgeDetectionMaterial: function getEdgeDetectionMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        'maskTexture': {\n          value: null\n        },\n        'texSize': {\n          value: new Vector2(0.5, 0.5)\n        },\n        'visibleEdgeColor': {\n          value: new Vector3(1.0, 1.0, 1.0)\n        },\n        'hiddenEdgeColor': {\n          value: new Vector3(1.0, 1.0, 1.0)\n        }\n      },\n      vertexShader: 'varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}',\n      fragmentShader: 'varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D maskTexture;\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec3 visibleEdgeColor;\\\n\t\t\t\tuniform vec3 hiddenEdgeColor;\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\\\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\\\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\\\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\\\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\\\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\\\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\\\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\\\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\\\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\\\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\\\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\\\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\\\n\t\t\t\t}'\n    });\n  },\n  getSeperableBlurMaterial: function getSeperableBlurMaterial(maxRadius) {\n    return new ShaderMaterial({\n      defines: {\n        'MAX_RADIUS': maxRadius\n      },\n      uniforms: {\n        'colorTexture': {\n          value: null\n        },\n        'texSize': {\n          value: new Vector2(0.5, 0.5)\n        },\n        'direction': {\n          value: new Vector2(0.5, 0.5)\n        },\n        'kernelRadius': {\n          value: 1.0\n        }\n      },\n      vertexShader: 'varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}',\n      fragmentShader: '#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\\n\t\t\t\tuniform sampler2D colorTexture;\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\tuniform float kernelRadius;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\\\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\\\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\\\n\t\t\t\t\tvec2 uvOffset = delta;\\\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\\\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\\\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\\\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\\\n\t\t\t\t\t\tweightSum += (2.0 * w);\\\n\t\t\t\t\t\tuvOffset += delta;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\\\n\t\t\t\t}'\n    });\n  },\n  getOverlayMaterial: function getOverlayMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        'maskTexture': {\n          value: null\n        },\n        'edgeTexture1': {\n          value: null\n        },\n        'edgeTexture2': {\n          value: null\n        },\n        'patternTexture': {\n          value: null\n        },\n        'edgeStrength': {\n          value: 1.0\n        },\n        'edgeGlow': {\n          value: 1.0\n        },\n        'usePatternTexture': {\n          value: 0.0\n        }\n      },\n      vertexShader: 'varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}',\n      fragmentShader: 'varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D maskTexture;\\\n\t\t\t\tuniform sampler2D edgeTexture1;\\\n\t\t\t\tuniform sampler2D edgeTexture2;\\\n\t\t\t\tuniform sampler2D patternTexture;\\\n\t\t\t\tuniform float edgeStrength;\\\n\t\t\t\tuniform float edgeGlow;\\\n\t\t\t\tuniform bool usePatternTexture;\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\\\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\\\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\\\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\\\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\\\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\\\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\\\n\t\t\t\t\tif(usePatternTexture)\\\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\\\n\t\t\t\t\tgl_FragColor = finalColor;\\\n\t\t\t\t}',\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n  }\n});\nOutlinePass.BlurDirectionX = new Vector2(1.0, 0.0);\nOutlinePass.BlurDirectionY = new Vector2(0.0, 1.0);\nexport { OutlinePass };\n\nvar _c;\n\n$RefreshReg$(_c, \"OutlinePass\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/node_modules/three/examples/jsm/postprocessing/OutlinePass.js"],"names":["AdditiveBlending","Color","DoubleSide","LinearFilter","Matrix4","MeshBasicMaterial","MeshDepthMaterial","NoBlending","RGBADepthPacking","RGBAFormat","ShaderMaterial","UniformsUtils","Vector2","Vector3","WebGLRenderTarget","Pass","CopyShader","OutlinePass","resolution","scene","camera","selectedObjects","renderScene","renderCamera","undefined","visibleEdgeColor","hiddenEdgeColor","edgeGlow","usePatternTexture","edgeThickness","edgeStrength","downSampleRatio","pulsePeriod","_visibilityCache","Map","call","x","y","pars","minFilter","magFilter","format","resx","Math","round","resy","maskBufferMaterial","color","side","renderTargetMaskBuffer","texture","name","generateMipmaps","depthMaterial","depthPacking","blending","prepareMaskMaterial","getPrepareMaskMaterial","fragmentShader","replaceDepthToViewZ","renderTargetDepthBuffer","renderTargetMaskDownSampleBuffer","renderTargetBlurBuffer1","renderTargetBlurBuffer2","edgeDetectionMaterial","getEdgeDetectionMaterial","renderTargetEdgeBuffer1","renderTargetEdgeBuffer2","MAX_EDGE_THICKNESS","MAX_EDGE_GLOW","separableBlurMaterial1","getSeperableBlurMaterial","uniforms","value","set","separableBlurMaterial2","overlayMaterial","getOverlayMaterial","console","error","copyShader","copyUniforms","clone","materialCopy","vertexShader","depthTest","depthWrite","transparent","enabled","needsSwap","_oldClearColor","oldClearAlpha","fsQuad","FullScreenQuad","tempPulseColor1","tempPulseColor2","textureMatrix","string","type","isPerspectiveCamera","replace","prototype","Object","assign","create","constructor","dispose","setSize","width","height","changeVisibilityOfSelectedObjects","bVisible","cache","gatherSelectedMeshesCallBack","object","isMesh","visible","get","i","length","selectedObject","traverse","changeVisibilityOfNonSelectedObjects","selectedMeshes","push","VisibilityChangeCallBack","isSprite","bFound","selectedObjectId","id","visibility","isPoints","isLine","updateTextureMatrix","multiply","projectionMatrix","matrixWorldInverse","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","state","buffers","stencil","setTest","setClearColor","currentBackground","background","overrideMaterial","setRenderTarget","clear","near","far","material","copy","scalar","cos","performance","now","multiplyScalar","BlurDirectionX","BlurDirectionY","patternTexture","renderToScreen","join","maxRadius","defines"],"mappings":"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","sourcesContent":["import {\n\tAdditiveBlending,\n\tColor,\n\tDoubleSide,\n\tLinearFilter,\n\tMatrix4,\n\tMeshBasicMaterial,\n\tMeshDepthMaterial,\n\tNoBlending,\n\tRGBADepthPacking,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from '../../../build/three.module.js';\nimport { Pass } from '../postprocessing/Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar OutlinePass = function ( resolution, scene, camera, selectedObjects ) {\n\n\tthis.renderScene = scene;\n\tthis.renderCamera = camera;\n\tthis.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n\tthis.visibleEdgeColor = new Color( 1, 1, 1 );\n\tthis.hiddenEdgeColor = new Color( 0.1, 0.04, 0.02 );\n\tthis.edgeGlow = 0.0;\n\tthis.usePatternTexture = false;\n\tthis.edgeThickness = 1.0;\n\tthis.edgeStrength = 3.0;\n\tthis.downSampleRatio = 2;\n\tthis.pulsePeriod = 0;\n\n\tthis._visibilityCache = new Map();\n\n\tPass.call( this );\n\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\tvar resx = Math.round( this.resolution.x / this.downSampleRatio );\n\tvar resy = Math.round( this.resolution.y / this.downSampleRatio );\n\n\tthis.maskBufferMaterial = new MeshBasicMaterial( { color: 0xffffff } );\n\tthis.maskBufferMaterial.side = DoubleSide;\n\tthis.renderTargetMaskBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y, pars );\n\tthis.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\n\tthis.renderTargetMaskBuffer.texture.generateMipmaps = false;\n\n\tthis.depthMaterial = new MeshDepthMaterial();\n\tthis.depthMaterial.side = DoubleSide;\n\tthis.depthMaterial.depthPacking = RGBADepthPacking;\n\tthis.depthMaterial.blending = NoBlending;\n\n\tthis.prepareMaskMaterial = this.getPrepareMaskMaterial();\n\tthis.prepareMaskMaterial.side = DoubleSide;\n\tthis.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ( this.prepareMaskMaterial.fragmentShader, this.renderCamera );\n\n\tthis.renderTargetDepthBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y, pars );\n\tthis.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\n\tthis.renderTargetDepthBuffer.texture.generateMipmaps = false;\n\n\tthis.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\n\tthis.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n\n\tthis.renderTargetBlurBuffer1 = new WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\n\tthis.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n\tthis.renderTargetBlurBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), pars );\n\tthis.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\n\tthis.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n\n\tthis.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n\tthis.renderTargetEdgeBuffer1 = new WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\n\tthis.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n\tthis.renderTargetEdgeBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), pars );\n\tthis.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\n\tthis.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n\n\tvar MAX_EDGE_THICKNESS = 4;\n\tvar MAX_EDGE_GLOW = 4;\n\n\tthis.separableBlurMaterial1 = this.getSeperableBlurMaterial( MAX_EDGE_THICKNESS );\n\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\n\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = 1;\n\tthis.separableBlurMaterial2 = this.getSeperableBlurMaterial( MAX_EDGE_GLOW );\n\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( Math.round( resx / 2 ), Math.round( resy / 2 ) );\n\tthis.separableBlurMaterial2.uniforms[ 'kernelRadius' ].value = MAX_EDGE_GLOW;\n\n\t// Overlay material\n\tthis.overlayMaterial = this.getOverlayMaterial();\n\n\t// copy material\n\tif ( CopyShader === undefined )\n\t\tconsole.error( 'THREE.OutlinePass relies on CopyShader' );\n\n\tvar copyShader = CopyShader;\n\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\tthis.copyUniforms[ 'opacity' ].value = 1.0;\n\n\tthis.materialCopy = new ShaderMaterial( {\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t} );\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis._oldClearColor = new Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n\tthis.tempPulseColor1 = new Color();\n\tthis.tempPulseColor2 = new Color();\n\tthis.textureMatrix = new Matrix4();\n\n\tfunction replaceDepthToViewZ( string, camera ) {\n\n\t\tvar type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n\n\t\treturn string.replace( /DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ' );\n\n\t}\n\n};\n\nOutlinePass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: OutlinePass,\n\n\tdispose: function () {\n\n\t\tthis.renderTargetMaskBuffer.dispose();\n\t\tthis.renderTargetDepthBuffer.dispose();\n\t\tthis.renderTargetMaskDownSampleBuffer.dispose();\n\t\tthis.renderTargetBlurBuffer1.dispose();\n\t\tthis.renderTargetBlurBuffer2.dispose();\n\t\tthis.renderTargetEdgeBuffer1.dispose();\n\t\tthis.renderTargetEdgeBuffer2.dispose();\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis.renderTargetMaskBuffer.setSize( width, height );\n\n\t\tvar resx = Math.round( width / this.downSampleRatio );\n\t\tvar resy = Math.round( height / this.downSampleRatio );\n\t\tthis.renderTargetMaskDownSampleBuffer.setSize( resx, resy );\n\t\tthis.renderTargetBlurBuffer1.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer1.setSize( resx, resy );\n\t\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\t\tresy = Math.round( resy / 2 );\n\n\t\tthis.renderTargetBlurBuffer2.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer2.setSize( resx, resy );\n\n\t\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( resx, resy );\n\n\t},\n\n\tchangeVisibilityOfSelectedObjects: function ( bVisible ) {\n\n\t\tvar cache = this._visibilityCache;\n\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( bVisible === true ) {\n\n\t\t\t\t\tobject.visible = cache.get( object );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcache.set( object, object.visible );\n\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.selectedObjects.length; i ++ ) {\n\n\t\t\tvar selectedObject = this.selectedObjects[ i ];\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\n\n\t\t}\n\n\t},\n\n\tchangeVisibilityOfNonSelectedObjects: function ( bVisible ) {\n\n\t\tvar cache = this._visibilityCache;\n\t\tvar selectedMeshes = [];\n\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\n\n\t\t\tif ( object.isMesh ) selectedMeshes.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.selectedObjects.length; i ++ ) {\n\n\t\t\tvar selectedObject = this.selectedObjects[ i ];\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\n\n\t\t}\n\n\t\tfunction VisibilityChangeCallBack( object ) {\n\n\t\t\tif ( object.isMesh || object.isSprite ) {\n\n\t\t\t\t// only meshes and sprites are supported by OutlinePass\n\n\t\t\t\tvar bFound = false;\n\n\t\t\t\tfor ( var i = 0; i < selectedMeshes.length; i ++ ) {\n\n\t\t\t\t\tvar selectedObjectId = selectedMeshes[ i ].id;\n\n\t\t\t\t\tif ( selectedObjectId === object.id ) {\n\n\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( bFound === false ) {\n\n\t\t\t\t\tvar visibility = object.visible;\n\n\t\t\t\t\tif ( bVisible === false || cache.get( object ) === true ) {\n\n\t\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcache.set( object, visibility );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints || object.isLine ) {\n\n\t\t\t\t// the visibilty of points and lines is always set to false in order to\n\t\t\t\t// not affect the outline computation\n\n\t\t\t\tif ( bVisible === true ) {\n\n\t\t\t\t\tobject.visible = cache.get( object ); // restore\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcache.set( object, object.visible );\n\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderScene.traverse( VisibilityChangeCallBack );\n\n\t},\n\n\tupdateTextureMatrix: function () {\n\n\t\tthis.textureMatrix.set( 0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0 );\n\t\tthis.textureMatrix.multiply( this.renderCamera.projectionMatrix );\n\t\tthis.textureMatrix.multiply( this.renderCamera.matrixWorldInverse );\n\n\t},\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( this.selectedObjects.length > 0 ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\t\tvar oldAutoClear = renderer.autoClear;\n\n\t\t\trenderer.autoClear = false;\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t\trenderer.setClearColor( 0xffffff, 1 );\n\n\t\t\t// Make selected objects invisible\n\t\t\tthis.changeVisibilityOfSelectedObjects( false );\n\n\t\t\tvar currentBackground = this.renderScene.background;\n\t\t\tthis.renderScene.background = null;\n\n\t\t\t// 1. Draw Non Selected objects in the depth buffer\n\t\t\tthis.renderScene.overrideMaterial = this.depthMaterial;\n\t\t\trenderer.setRenderTarget( this.renderTargetDepthBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\n\t\t\t// Make selected objects visible\n\t\t\tthis.changeVisibilityOfSelectedObjects( true );\n\t\t\tthis._visibilityCache.clear();\n\n\t\t\t// Update Texture Matrix for Depth compare\n\t\t\tthis.updateTextureMatrix();\n\n\t\t\t// Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( false );\n\t\t\tthis.renderScene.overrideMaterial = this.prepareMaskMaterial;\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'cameraNearFar' ].value.set( this.renderCamera.near, this.renderCamera.far );\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'depthTexture' ].value = this.renderTargetDepthBuffer.texture;\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'textureMatrix' ].value = this.textureMatrix;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\t\t\tthis.renderScene.overrideMaterial = null;\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( true );\n\t\t\tthis._visibilityCache.clear();\n\n\t\t\tthis.renderScene.background = currentBackground;\n\n\t\t\t// 2. Downsample to Half resolution\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetMaskBuffer.texture;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskDownSampleBuffer );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.tempPulseColor1.copy( this.visibleEdgeColor );\n\t\t\tthis.tempPulseColor2.copy( this.hiddenEdgeColor );\n\n\t\t\tif ( this.pulsePeriod > 0 ) {\n\n\t\t\t\tvar scalar = ( 1 + 0.25 ) / 2 + Math.cos( performance.now() * 0.01 / this.pulsePeriod ) * ( 1.0 - 0.25 ) / 2;\n\t\t\t\tthis.tempPulseColor1.multiplyScalar( scalar );\n\t\t\t\tthis.tempPulseColor2.multiplyScalar( scalar );\n\n\t\t\t}\n\n\t\t\t// 3. Apply Edge Detection Pass\n\t\t\tthis.fsQuad.material = this.edgeDetectionMaterial;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskDownSampleBuffer.texture;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'texSize' ].value.set( this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height );\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'visibleEdgeColor' ].value = this.tempPulseColor1;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'hiddenEdgeColor' ].value = this.tempPulseColor2;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// 4. Apply Blur on Half res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial1;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = this.edgeThickness;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// Apply Blur on quarter res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial2;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer2.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// Blend it additively over the input texture\n\t\t\tthis.fsQuad.material = this.overlayMaterial;\n\t\t\tthis.overlayMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskBuffer.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture1' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture2' ].value = this.renderTargetEdgeBuffer2.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'patternTexture' ].value = this.patternTexture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeStrength' ].value = this.edgeStrength;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeGlow' ].value = this.edgeGlow;\n\t\t\tthis.overlayMaterial.uniforms[ 'usePatternTexture' ].value = this.usePatternTexture;\n\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\t\trenderer.autoClear = oldAutoClear;\n\n\t\t}\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t},\n\n\tgetPrepareMaskMaterial: function () {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'depthTexture': { value: null },\n\t\t\t\t'cameraNearFar': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'textureMatrix': { value: null }\n\t\t\t},\n\n\t\t\tvertexShader: [\n\t\t\t\t'#include <morphtarget_pars_vertex>',\n\t\t\t\t'#include <skinning_pars_vertex>',\n\n\t\t\t\t'varying vec4 projTexCoord;',\n\t\t\t\t'varying vec4 vPosition;',\n\t\t\t\t'uniform mat4 textureMatrix;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\t#include <skinbase_vertex>',\n\t\t\t\t'\t#include <begin_vertex>',\n\t\t\t\t'\t#include <morphtarget_vertex>',\n\t\t\t\t'\t#include <skinning_vertex>',\n\t\t\t\t'\t#include <project_vertex>',\n\n\t\t\t\t'\tvPosition = mvPosition;',\n\t\t\t\t'\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n\t\t\t\t'\tprojTexCoord = textureMatrix * worldPosition;',\n\n\t\t\t\t'}'\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\t\t\t\t'#include <packing>',\n\t\t\t\t'varying vec4 vPosition;',\n\t\t\t\t'varying vec4 projTexCoord;',\n\t\t\t\t'uniform sampler2D depthTexture;',\n\t\t\t\t'uniform vec2 cameraNearFar;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));',\n\t\t\t\t'\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );',\n\t\t\t\t'\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;',\n\t\t\t\t'\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);',\n\n\t\t\t\t'}'\n\t\t\t].join( '\\n' )\n\n\t\t} );\n\n\t},\n\n\tgetEdgeDetectionMaterial: function () {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'maskTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'visibleEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t\t'hiddenEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t'varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}',\n\n\t\t\tfragmentShader:\n\t\t\t\t'varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D maskTexture;\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec3 visibleEdgeColor;\\\n\t\t\t\tuniform vec3 hiddenEdgeColor;\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\\\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\\\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\\\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\\\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\\\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\\\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\\\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\\\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\\\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\\\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\\\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\\\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\\\n\t\t\t\t}'\n\t\t} );\n\n\t},\n\n\tgetSeperableBlurMaterial: function ( maxRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'MAX_RADIUS': maxRadius,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'kernelRadius': { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t'varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}',\n\n\t\t\tfragmentShader:\n\t\t\t\t'#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\\n\t\t\t\tuniform sampler2D colorTexture;\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\tuniform float kernelRadius;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\\\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\\\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\\\n\t\t\t\t\tvec2 uvOffset = delta;\\\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\\\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\\\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\\\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\\\n\t\t\t\t\t\tweightSum += (2.0 * w);\\\n\t\t\t\t\t\tuvOffset += delta;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\\\n\t\t\t\t}'\n\t\t} );\n\n\t},\n\n\tgetOverlayMaterial: function () {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'maskTexture': { value: null },\n\t\t\t\t'edgeTexture1': { value: null },\n\t\t\t\t'edgeTexture2': { value: null },\n\t\t\t\t'patternTexture': { value: null },\n\t\t\t\t'edgeStrength': { value: 1.0 },\n\t\t\t\t'edgeGlow': { value: 1.0 },\n\t\t\t\t'usePatternTexture': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t'varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}',\n\n\t\t\tfragmentShader:\n\t\t\t\t'varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D maskTexture;\\\n\t\t\t\tuniform sampler2D edgeTexture1;\\\n\t\t\t\tuniform sampler2D edgeTexture2;\\\n\t\t\t\tuniform sampler2D patternTexture;\\\n\t\t\t\tuniform float edgeStrength;\\\n\t\t\t\tuniform float edgeGlow;\\\n\t\t\t\tuniform bool usePatternTexture;\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\\\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\\\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\\\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\\\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\\\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\\\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\\\n\t\t\t\t\tif(usePatternTexture)\\\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\\\n\t\t\t\t\tgl_FragColor = finalColor;\\\n\t\t\t\t}',\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t}\n\n} );\n\nOutlinePass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nOutlinePass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { OutlinePass };\n"]},"metadata":{},"sourceType":"module"}