{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/add/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { Error } from '../../../../assets/notification';\nimport { AddButton } from '../../../../assets/button';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors material/add\n */\n\nvar errors = {\n  updateError: 'Unable to add the material'\n};\n/**\n * Add material\n * @param {Object} props Props\n */\n\nvar Add = function Add(_ref) {\n  _s();\n\n  var material = _ref.material,\n      project = _ref.project,\n      simulation = _ref.simulation,\n      part = _ref.part,\n      disabled = _ref.disabled,\n      close = _ref.close;\n\n  // State\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1]; // Data\n\n\n  var _SimulationAPI$useSim = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations),\n      _SimulationAPI$useSim2 = _slicedToArray(_SimulationAPI$useSim, 2),\n      mutateOneSimulation = _SimulationAPI$useSim2[1].mutateOneSimulation;\n  /**\n   * On add\n   */\n\n\n  var onAdd = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var selection, newSimulation, materials, diff;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n              // Modify selection\n              selection = part.solids.map(function (s) {\n                if (material.selected.includes(s.uuid)) return {\n                  uuid: s.uuid,\n                  label: s.number\n                };\n              }).filter(function (s) {\n                return s;\n              });\n              material.selected = selection; // Set uuid\n\n              material.uuid = uuid(); // New simulation\n\n              newSimulation = _objectSpread({}, simulation); // Update local\n\n              materials = newSimulation.scheme.configuration.materials;\n              materials.values = [].concat(_toConsumableArray(materials.values || []), [material]); // Diff\n\n              diff = _objectSpread(_objectSpread({}, materials), {}, {\n                done: true\n              }); // Update\n\n              _context.next = 11;\n              return SimulationAPI.update({\n                id: simulation.id\n              }, [{\n                key: 'scheme',\n                type: 'json',\n                method: 'diff',\n                path: ['configuration', 'materials'],\n                value: diff\n              }]);\n\n            case 11:\n              // Mutate\n              mutateOneSimulation(newSimulation); // Stop loading\n\n              setLoading(false); // Close\n\n              close();\n              _context.next = 20;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](1);\n              Error(errors.updateError, _context.t0);\n              setLoading(false);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 16]]);\n    }));\n\n    return function onAdd() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(AddButton, {\n    disabled: disabled,\n    loading: loading,\n    onAdd: onAdd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Add, \"HbMkP6YNJbKI3VXWo8Ge5g25qt0=\", false, function () {\n  return [SimulationAPI.useSimulations];\n});\n\n_c = Add;\nexport default Add;\n\nvar _c;\n\n$RefreshReg$(_c, \"Add\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/add/index.js"],"names":["useState","v4","uuid","Error","AddButton","SimulationAPI","errors","updateError","Add","material","project","simulation","part","disabled","close","loading","setLoading","useSimulations","simulations","mutateOneSimulation","onAdd","selection","solids","map","s","selected","includes","label","number","filter","newSimulation","materials","scheme","configuration","values","diff","done","update","id","key","type","method","path","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { v4 as uuid } from 'uuid'\n\nimport { Error } from '../../../../assets/notification'\nimport { AddButton } from '../../../../assets/button'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\n/**\n * Errors material/add\n */\nconst errors = {\n  updateError: 'Unable to add the material'\n}\n\n/**\n * Add material\n * @param {Object} props Props\n */\nconst Add = ({ material, project, simulation, part, disabled, close }) => {\n  // State\n  const [loading, setLoading] = useState(false)\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n\n  /**\n   * On add\n   */\n  const onAdd = async () => {\n    setLoading(true)\n\n    try {\n      // Modify selection\n      const selection = part.solids\n        .map((s) => {\n          if (material.selected.includes(s.uuid))\n            return {\n              uuid: s.uuid,\n              label: s.number\n            }\n        })\n        .filter((s) => s)\n      material.selected = selection\n\n      // Set uuid\n      material.uuid = uuid()\n\n      // New simulation\n      const newSimulation = { ...simulation }\n\n      // Update local\n      const materials = newSimulation.scheme.configuration.materials\n      materials.values = [...(materials.values || []), material]\n\n      // Diff\n      const diff = {\n        ...materials,\n        done: true\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'materials'],\n          value: diff\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(newSimulation)\n\n      // Stop loading\n      setLoading(false)\n\n      // Close\n      close()\n    } catch (err) {\n      Error(errors.updateError, err)\n      setLoading(false)\n    }\n  }\n\n  /**\n   * Render\n   */\n  return <AddButton disabled={disabled} loading={loading} onAdd={onAdd} />\n}\n\nexport default Add\n"]},"metadata":{},"sourceType":"module"}