{"ast":null,"code":"import _Space from \"antd/lib/space\";\nimport _Typography from \"antd/lib/typography\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _Modal from \"antd/lib/modal\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Layout from \"antd/lib/layout\";\nimport _Menu from \"antd/lib/menu\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/** @module renderer/components/project/simulation */\nimport { useState, useEffect } from 'react';\nimport { WarningOutlined } from '@ant-design/icons';\nimport { addedDiff, updatedDiff } from 'deep-object-diff';\nimport merge from 'lodash.merge';\nimport { Error } from '../../assets/notification';\nimport Panel from '../panel';\nimport About from './about';\nimport Geometry from './geometry';\nimport Materials from './materials';\nimport Parameters from './parameters';\nimport BoundaryConditions from './boundaryConditions';\nimport Run from './run';\nimport SimulationAPI from '../../../../src/api/simulation';\nimport models from '../../../../models';\n/**\n * Errors\n */\n\nvar errors = {\n  updateError: 'Unable to update the simulation'\n};\n/**\n * Simulation Selector\n * @param {Object} props Props\n */\n\nvar Selector = function Selector(_ref) {\n  var visible = _ref.visible,\n      onOk = _ref.onOk,\n      onCancel = _ref.onCancel;\n\n  // State\n  var _useState = useState(),\n      current = _useState[0],\n      setCurrent = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n  /**\n   * On select\n   * @param {Object} data Data { key }\n   */\n\n\n  var onSelect = function onSelect(_ref2) {\n    var key = _ref2.key;\n    var model = models.find(function (m) {\n      return m.algorithm === key;\n    });\n    setCurrent(_objectSpread({}, model)); // TODO review that\n  };\n  /**\n   * On create\n   */\n\n\n  var onCreate = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              if (current) onOk(current);\n              setLoading(false);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onCreate() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  /**\n   * MatJax\n   */\n\n\n  useEffect(function () {\n    var _window$MathJax;\n\n    (_window$MathJax = window.MathJax) === null || _window$MathJax === void 0 ? void 0 : _window$MathJax.typeset();\n  }, [current]);\n  /**\n   * Render\n   */\n\n  return /*#__PURE__*/_jsx(_Modal, {\n    visible: visible,\n    title: \"Create simulation\",\n    okText: \"Create\",\n    okButtonProps: {\n      loading: loading\n    },\n    onOk: onCreate,\n    onCancel: onCancel,\n    children: /*#__PURE__*/_jsxs(_Layout, {\n      children: [/*#__PURE__*/_jsx(_Layout.Sider, {\n        theme: \"light\",\n        children: /*#__PURE__*/_jsx(_Menu, {\n          mode: \"inline\",\n          onSelect: onSelect,\n          children: models.map(function (model) {\n            return /*#__PURE__*/_jsx(_Menu.Item, {\n              children: model.name\n            }, model.algorithm);\n          })\n        })\n      }), /*#__PURE__*/_jsx(_Layout.Content, {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: current === null || current === void 0 ? void 0 : current.description\n          }\n        })\n      })]\n    })\n  });\n};\n/**\n * Simulation\n * @param {Object} props Props\n */\n\n\nvar Simulation = function Simulation(_ref4) {\n  var project = _ref4.project,\n      simulation = _ref4.simulation,\n      type = _ref4.type,\n      part = _ref4.part,\n      onClose = _ref4.onClose;\n\n  // State\n  var _useState3 = useState(false),\n      needUpdate = _useState3[0],\n      setNeedUpdate = _useState3[1];\n\n  var _useState4 = useState(false),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      visible = _useState5[0],\n      setVisible = _useState5[1];\n\n  var _useState6 = useState(),\n      title = _useState6[0],\n      setTitle = _useState6[1]; // Data\n\n\n  var _SimulationAPI$useSim = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations),\n      _SimulationAPI$useSim2 = _slicedToArray(_SimulationAPI$useSim, 2),\n      mutateOneSimulation = _SimulationAPI$useSim2[1].mutateOneSimulation; // Check model update\n\n\n  useEffect(function () {\n    var currentModel = models.find(function (m) {\n      var _simulation$scheme;\n\n      return m.algorithm === (simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme = simulation.scheme) === null || _simulation$scheme === void 0 ? void 0 : _simulation$scheme.algorithm);\n    });\n\n    if (currentModel && simulation !== null && simulation !== void 0 && simulation.scheme) {\n      var added = addedDiff(simulation.scheme, currentModel);\n      var updated = updatedDiff(simulation.scheme, currentModel);\n      if (Object.keys(added).length || Object.keys(updated).length) setNeedUpdate(true);else setNeedUpdate(false);\n    }\n  }, [simulation]);\n  /**\n   * Simulation effect\n   */\n\n  useEffect(function () {\n    var _simulation$scheme2, _configuration$geomet;\n\n    setVisible(simulation);\n    var configuration = simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme2 = simulation.scheme) === null || _simulation$scheme2 === void 0 ? void 0 : _simulation$scheme2.configuration; // Check if a part is visible\n\n    if (configuration && !configuration.part && (_configuration$geomet = configuration.geometry) !== null && _configuration$geomet !== void 0 && _configuration$geomet.file) {\n      var newSimulation = _objectSpread({}, simulation); // Update local\n\n\n      newSimulation.scheme.configuration.part = configuration.geometry.file; // Update simulation\n\n      SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'part'],\n        value: configuration.geometry.file\n      }]).then(function () {\n        // Mutate\n        mutateOneSimulation(newSimulation);\n      })[\"catch\"](function (err) {\n        Error(errors.updateError, err);\n      });\n    }\n\n    var subScheme = configuration === null || configuration === void 0 ? void 0 : configuration[type];\n    setTitle(subScheme ? subScheme.title : 'About');\n  }, [simulation, type]);\n  /**\n   * On update\n   */\n\n  var onUpdate = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var currentModel, newSimulation;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              _context2.prev = 1;\n              // Current model\n              currentModel = models.find(function (m) {\n                var _simulation$scheme3;\n\n                return m.algorithm === (simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme3 = simulation.scheme) === null || _simulation$scheme3 === void 0 ? void 0 : _simulation$scheme3.algorithm);\n              }); // New simulation\n\n              newSimulation = _objectSpread({}, simulation); // Merge\n\n              merge(newSimulation.scheme, currentModel); // Update simulation\n\n              _context2.next = 7;\n              return SimulationAPI.update({\n                id: simulation.id\n              }, [{\n                key: 'scheme',\n                value: newSimulation.scheme\n              }]);\n\n            case 7:\n              // Mutate\n              mutateOneSimulation(newSimulation);\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](1);\n              Error(errors.updateError, _context2.t0);\n\n            case 13:\n              setLoading(false);\n              setNeedUpdate(false);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 10]]);\n    }));\n\n    return function onUpdate() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(_Modal, {\n      title: /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(WarningOutlined, {\n          style: {\n            color: 'orange',\n            marginRight: '5px'\n          }\n        }), \"Update\"]\n      }),\n      visible: needUpdate,\n      onOk: onUpdate,\n      okText: \"Yes\",\n      confirmLoading: loading,\n      onCancel: function onCancel() {\n        return setNeedUpdate(false);\n      },\n      cancelText: \"No\",\n      children: /*#__PURE__*/_jsxs(_Space, {\n        direction: \"vertical\",\n        children: [/*#__PURE__*/_jsx(_Typography.Text, {\n          children: \"Your model needs an update!\"\n        }), /*#__PURE__*/_jsx(_Typography.Text, {\n          strong: true,\n          children: \"Update now?\"\n        })]\n      })\n    }), /*#__PURE__*/_jsxs(Panel, {\n      visible: visible,\n      title: title,\n      onClose: onClose,\n      children: [type === 'about' && /*#__PURE__*/_jsx(About, {\n        project: project,\n        simulation: simulation\n      }), type === 'geometry' && /*#__PURE__*/_jsx(Geometry, {\n        project: project,\n        simulation: simulation,\n        part: part\n      }), type === 'parameters' && /*#__PURE__*/_jsx(Parameters, {\n        project: project,\n        simulation: simulation\n      }), type === 'materials' && /*#__PURE__*/_jsx(Materials, {\n        project: project,\n        simulation: simulation,\n        part: part,\n        setVisible: setVisible\n      }), type === 'boundaryConditions' && /*#__PURE__*/_jsx(BoundaryConditions, {\n        project: project,\n        simulation: simulation,\n        part: part,\n        setVisible: setVisible\n      }), type === 'run' && /*#__PURE__*/_jsx(Run, {\n        project: project,\n        simulation: simulation\n      })]\n    })]\n  });\n};\n\nSimulation.Selector = Selector;\nexport default Simulation;","map":null,"metadata":{},"sourceType":"module"}