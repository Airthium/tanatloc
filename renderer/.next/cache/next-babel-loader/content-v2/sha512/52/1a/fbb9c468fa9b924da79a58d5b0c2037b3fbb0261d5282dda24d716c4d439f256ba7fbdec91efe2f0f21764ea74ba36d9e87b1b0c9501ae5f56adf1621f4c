{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/add/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { Error } from '../../../../assets/notification';\nimport { AddButton } from '../../../../assets/button';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors boundaryCondition/add\n */\n\nvar errors = {\n  updateError: 'Unable to add the boundary condition'\n};\n/**\n * Add boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nvar Add = function Add(_ref) {\n  _s();\n\n  var disabled = _ref.disabled,\n      boundaryCondition = _ref.boundaryCondition,\n      project = _ref.project,\n      simulation = _ref.simulation,\n      part = _ref.part,\n      close = _ref.close;\n\n  // State\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1]; // Data\n\n\n  var _SimulationAPI$useSim = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations),\n      _SimulationAPI$useSim2 = _slicedToArray(_SimulationAPI$useSim, 2),\n      mutateOneSimulation = _SimulationAPI$useSim2[1].mutateOneSimulation;\n  /**\n   * on Add\n   */\n\n\n  var onAdd = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var type, selection, newSimulation, boundaryConditions, diff;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n              // Get type key\n              type = boundaryCondition.type.key; // Modify selection\n\n              selection = part.faces.map(function (f) {\n                if (boundaryCondition.selected.includes(f.uuid)) return {\n                  uuid: f.uuid,\n                  label: f.number\n                };\n              }).filter(function (s) {\n                return s;\n              });\n              boundaryCondition.selected = selection; // Set uuid\n\n              boundaryCondition.uuid = uuid(); // New simulation\n\n              newSimulation = _objectSpread({}, simulation); // Update local\n\n              boundaryConditions = newSimulation.scheme.configuration.boundaryConditions;\n              boundaryConditions[type].values = [].concat(_toConsumableArray(boundaryConditions[type].values || []), [boundaryCondition]); // Diff\n\n              diff = _objectSpread(_objectSpread({}, boundaryConditions), {}, {\n                done: true\n              }); // Update\n\n              _context.next = 12;\n              return SimulationAPI.update({\n                id: simulation.id\n              }, [{\n                key: 'scheme',\n                type: 'json',\n                method: 'diff',\n                path: ['configuration', 'boundaryConditions'],\n                value: diff\n              }]);\n\n            case 12:\n              // Mutate\n              mutateOneSimulation(newSimulation); // Stop loading\n\n              setLoading(false); // Close\n\n              close();\n              _context.next = 21;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](1);\n              Error(errors.updateError, _context.t0);\n              setLoading(false);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 17]]);\n    }));\n\n    return function onAdd() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(AddButton, {\n    disabled: disabled,\n    loading: loading,\n    onAdd: onAdd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Add, \"HbMkP6YNJbKI3VXWo8Ge5g25qt0=\", false, function () {\n  return [SimulationAPI.useSimulations];\n});\n\n_c = Add;\nexport default Add;\n\nvar _c;\n\n$RefreshReg$(_c, \"Add\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/add/index.js"],"names":["useState","v4","uuid","Error","AddButton","SimulationAPI","errors","updateError","Add","disabled","boundaryCondition","project","simulation","part","close","loading","setLoading","useSimulations","simulations","mutateOneSimulation","onAdd","type","key","selection","faces","map","f","selected","includes","label","number","filter","s","newSimulation","boundaryConditions","scheme","configuration","values","diff","done","update","id","method","path","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { v4 as uuid } from 'uuid'\n\nimport { Error } from '../../../../assets/notification'\nimport { AddButton } from '../../../../assets/button'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\n/**\n * Errors boundaryCondition/add\n */\nconst errors = {\n  updateError: 'Unable to add the boundary condition'\n}\n\n/**\n * Add boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\nconst Add = ({\n  disabled,\n  boundaryCondition,\n  project,\n  simulation,\n  part,\n  close\n}) => {\n  // State\n  const [loading, setLoading] = useState(false)\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n\n  /**\n   * on Add\n   */\n  const onAdd = async () => {\n    setLoading(true)\n\n    try {\n      // Get type key\n      const type = boundaryCondition.type.key\n\n      // Modify selection\n      const selection = part.faces\n        .map((f) => {\n          if (boundaryCondition.selected.includes(f.uuid))\n            return {\n              uuid: f.uuid,\n              label: f.number\n            }\n        })\n        .filter((s) => s)\n      boundaryCondition.selected = selection\n\n      // Set uuid\n      boundaryCondition.uuid = uuid()\n\n      // New simulation\n      const newSimulation = { ...simulation }\n\n      // Update local\n      const boundaryConditions =\n        newSimulation.scheme.configuration.boundaryConditions\n      boundaryConditions[type].values = [\n        ...(boundaryConditions[type].values || []),\n        boundaryCondition\n      ]\n\n      // Diff\n      const diff = {\n        ...boundaryConditions,\n        done: true\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'boundaryConditions'],\n          value: diff\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(newSimulation)\n\n      // Stop loading\n      setLoading(false)\n\n      // Close\n      close()\n    } catch (err) {\n      Error(errors.updateError, err)\n      setLoading(false)\n    }\n  }\n\n  /**\n   * Render\n   */\n  return <AddButton disabled={disabled} loading={loading} onAdd={onAdd} />\n}\n\nexport default Add\n"]},"metadata":{},"sourceType":"module"}