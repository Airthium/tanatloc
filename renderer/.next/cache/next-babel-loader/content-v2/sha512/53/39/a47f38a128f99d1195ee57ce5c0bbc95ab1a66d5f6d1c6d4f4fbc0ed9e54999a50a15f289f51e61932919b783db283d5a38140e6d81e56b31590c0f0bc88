{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/delete/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { Error } from '../../../../assets/notification';\nimport { DeleteButton } from '../../../../assets/button';\nimport { useDispatch } from 'react-redux';\nimport { unselect } from '../../../../../store/select/action';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors boundaryConditions/delete\n * @memberof module:renderer/components/project/simulation\n */\n\nvar errors = {\n  updateError: 'Unable to delete the boundary condition'\n};\n/**\n * Delete boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nvar Delete = function Delete(_ref) {\n  _s();\n\n  var project = _ref.project,\n      simulation = _ref.simulation,\n      type = _ref.type,\n      index = _ref.index;\n\n  // State\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1]; // Data\n\n\n  var _SimulationAPI$useSim = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations),\n      _SimulationAPI$useSim2 = _slicedToArray(_SimulationAPI$useSim, 2),\n      mutateOneSimulation = _SimulationAPI$useSim2[1].mutateOneSimulation;\n\n  var dispatch = useDispatch();\n  /**\n   * On delete\n   */\n\n  var onDelete = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newSimulation, boundaryConditions, typedBoundaryCondition, boundaryCondition, done, diff;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n              // New simulation\n              newSimulation = _objectSpread({}, simulation); // Update local\n\n              boundaryConditions = newSimulation.scheme.configuration.boundaryConditions;\n              typedBoundaryCondition = boundaryConditions[type]; // (unselect)\n\n              boundaryCondition = typedBoundaryCondition.values[index];\n              boundaryCondition.selected.forEach(function (s) {\n                dispatch(unselect(s.uuid));\n              });\n              typedBoundaryCondition.values = [].concat(_toConsumableArray(typedBoundaryCondition.values.slice(0, index)), _toConsumableArray(typedBoundaryCondition.values.slice(index + 1))); // Diff\n\n              done = false;\n              Object.keys(boundaryConditions).forEach(function (t) {\n                var _boundaryConditions$t;\n\n                if (t === 'index' || t === 'title' || t === 'done') return;\n                if ((_boundaryConditions$t = boundaryConditions[t].values) !== null && _boundaryConditions$t !== void 0 && _boundaryConditions$t.length) done = true;\n              });\n              diff = _objectSpread(_objectSpread({}, boundaryConditions), {}, {\n                done: done\n              }); // Update\n\n              _context.next = 13;\n              return SimulationAPI.update({\n                id: simulation.id\n              }, [{\n                key: 'scheme',\n                type: 'json',\n                method: 'diff',\n                path: ['configuration', 'boundaryConditions'],\n                value: diff\n              }]);\n\n            case 13:\n              mutateOneSimulation(newSimulation);\n              _context.next = 20;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](1);\n              Error(errors.updateError, _context.t0);\n              setLoading(false);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 16]]);\n    }));\n\n    return function onDelete() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(DeleteButton, {\n    loading: loading,\n    onDelete: onDelete\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Delete, \"vO1D7/5R3dZn2qZWuD0eceUM5S8=\", false, function () {\n  return [SimulationAPI.useSimulations, useDispatch];\n});\n\n_c = Delete;\nexport default Delete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Delete\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/delete/index.js"],"names":["useState","Error","DeleteButton","useDispatch","unselect","SimulationAPI","errors","updateError","Delete","project","simulation","type","index","loading","setLoading","useSimulations","simulations","mutateOneSimulation","dispatch","onDelete","newSimulation","boundaryConditions","scheme","configuration","typedBoundaryCondition","boundaryCondition","values","selected","forEach","s","uuid","slice","done","Object","keys","t","length","diff","update","id","key","method","path","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nimport { Error } from '../../../../assets/notification'\nimport { DeleteButton } from '../../../../assets/button'\n\nimport { useDispatch } from 'react-redux'\nimport { unselect } from '../../../../../store/select/action'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\n/**\n * Errors boundaryConditions/delete\n * @memberof module:renderer/components/project/simulation\n */\nconst errors = {\n  updateError: 'Unable to delete the boundary condition'\n}\n\n/**\n * Delete boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\nconst Delete = ({ project, simulation, type, index }) => {\n  // State\n  const [loading, setLoading] = useState(false)\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n  const dispatch = useDispatch()\n\n  /**\n   * On delete\n   */\n  const onDelete = async () => {\n    setLoading(true)\n\n    try {\n      // New simulation\n      const newSimulation = { ...simulation }\n\n      // Update local\n      const boundaryConditions =\n        newSimulation.scheme.configuration.boundaryConditions\n      const typedBoundaryCondition = boundaryConditions[type]\n\n      // (unselect)\n      const boundaryCondition = typedBoundaryCondition.values[index]\n      boundaryCondition.selected.forEach((s) => {\n        dispatch(unselect(s.uuid))\n      })\n\n      typedBoundaryCondition.values = [\n        ...typedBoundaryCondition.values.slice(0, index),\n        ...typedBoundaryCondition.values.slice(index + 1)\n      ]\n\n      // Diff\n      let done = false\n      Object.keys(boundaryConditions).forEach((t) => {\n        if (t === 'index' || t === 'title' || t === 'done') return\n        if (boundaryConditions[t].values?.length) done = true\n      })\n      const diff = {\n        ...boundaryConditions,\n        done: done\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'boundaryConditions'],\n          value: diff\n        }\n      ])\n\n      mutateOneSimulation(newSimulation)\n    } catch (err) {\n      Error(errors.updateError, err)\n      setLoading(false)\n    }\n  }\n\n  /**\n   * Render\n   */\n  return <DeleteButton loading={loading} onDelete={onDelete} />\n}\n\nexport default Delete\n"]},"metadata":{},"sourceType":"module"}