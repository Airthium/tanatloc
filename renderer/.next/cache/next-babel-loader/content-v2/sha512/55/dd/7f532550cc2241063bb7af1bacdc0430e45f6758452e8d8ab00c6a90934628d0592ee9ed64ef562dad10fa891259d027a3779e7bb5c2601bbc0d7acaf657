{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { Error } from '../../../../assets/notification';\nimport { DeleteButton } from '../../../../assets/button';\nimport { useDispatch } from 'react-redux';\nimport { unselect } from '../../../../../store/select/action';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors boundaryConditions/delete\n * @memberof module:renderer/components/project/simulation\n */\n\nvar errors = {\n  updateError: 'Unable to delete the boundary condition'\n};\n/**\n * Delete boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nvar Delete = function Delete(_ref) {\n  var project = _ref.project,\n      simulation = _ref.simulation,\n      type = _ref.type,\n      index = _ref.index;\n\n  // State\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1]; // Data\n\n\n  var _SimulationAPI$useSim = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations),\n      _SimulationAPI$useSim2 = _slicedToArray(_SimulationAPI$useSim, 2),\n      mutateOneSimulation = _SimulationAPI$useSim2[1].mutateOneSimulation;\n\n  var dispatch = useDispatch();\n  /**\n   * On delete\n   */\n\n  var onDelete = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newSimulation, boundaryConditions, typedBoundaryCondition, boundaryCondition, done, diff;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n              // New simulation\n              newSimulation = _objectSpread({}, simulation); // Update local\n\n              boundaryConditions = newSimulation.scheme.configuration.boundaryConditions;\n              typedBoundaryCondition = boundaryConditions[type]; // (unselect)\n\n              boundaryCondition = typedBoundaryCondition.values[index];\n              boundaryCondition.selected.forEach(function (s) {\n                dispatch(unselect(s.uuid));\n              });\n              typedBoundaryCondition.values = [].concat(_toConsumableArray(typedBoundaryCondition.values.slice(0, index)), _toConsumableArray(typedBoundaryCondition.values.slice(index + 1))); // Diff\n\n              done = false;\n              Object.keys(boundaryConditions).forEach(function (t) {\n                var _boundaryConditions$t;\n\n                if (t === 'index' || t === 'title' || t === 'done') return;\n                if ((_boundaryConditions$t = boundaryConditions[t].values) !== null && _boundaryConditions$t !== void 0 && _boundaryConditions$t.length) done = true;\n              });\n              diff = _objectSpread(_objectSpread({}, boundaryConditions), {}, {\n                done: done\n              }); // Update\n\n              _context.next = 13;\n              return SimulationAPI.update({\n                id: simulation.id\n              }, [{\n                key: 'scheme',\n                type: 'json',\n                method: 'diff',\n                path: ['configuration', 'boundaryConditions'],\n                value: diff\n              }]);\n\n            case 13:\n              mutateOneSimulation(newSimulation);\n              _context.next = 20;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](1);\n              Error(errors.updateError, _context.t0);\n              setLoading(false);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 16]]);\n    }));\n\n    return function onDelete() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(DeleteButton, {\n    loading: loading,\n    onDelete: onDelete\n  });\n};\n\nexport default Delete;","map":null,"metadata":{},"sourceType":"module"}