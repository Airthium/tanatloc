{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\n/** @module renderer/components/background */\nimport { useRef, useEffect } from 'react';\nimport { Mesh, MeshBasicMaterial, PerspectiveCamera, Scene, TetrahedronGeometry, Vector3, WebGLRenderer } from 'three/build/three.module';\n/**\n * Background\n */\n\nvar Background = function Background() {\n  // Parameters\n  var numberOfTetrahedra = 100;\n  var rotationSpeed = 0.005; // Ref\n\n  var mount = useRef(null); // Mount\n\n  useEffect(function () {\n    var div = mount.current;\n    var frameId;\n    var width = div.clientWidth;\n    var height = div.clientHeight; // Scene\n\n    var scene = new Scene(); // Camera\n\n    var camera = new PerspectiveCamera(10, width / height, 0.1, 1000);\n    camera.position.z = 10; // Renderer\n\n    var renderer = new WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      powerPreference: 'low-power'\n    });\n    renderer.setClearColor('#ffffff', 0);\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(window.devicePixelRatio || 1); // Mount\n\n    div.appendChild(renderer.domElement); // Tetrahedra\n    // Rotations\n\n    var rotationX = [];\n    var rotationY = [];\n    var rotationZ = []; // Visible height & width\n\n    var offset = camera.position.z;\n    var hFOV = camera.fov * Math.PI / 180;\n    var h = 2 * Math.tan(hFOV / 2) * offset;\n    var w = h * camera.aspect; // Build tetra\n\n    for (var i = 0; i < numberOfTetrahedra; ++i) {\n      var rand = Math.random();\n      var material = new MeshBasicMaterial({\n        color: rand * 0x0096c7 + (1 - rand) * 0xffffff,\n        wireframe: true,\n        transparent: true,\n        opacity: 0.2\n      });\n      var geometry = new TetrahedronGeometry(0.1 * Math.random());\n      geometry.translate(-1.2 * w / 2 + 1.2 * w * Math.random(), -1.2 * h / 2 + 1.2 * h * Math.random(), 0);\n      geometry.lookAt(new Vector3(-1 + 2 * Math.random(), -1 + 2 * Math.random(), -1 + 2 * Math.random()));\n      rotationX.push(-rotationSpeed / 2 + rotationSpeed * Math.random());\n      rotationY.push(-rotationSpeed / 2 + rotationSpeed * Math.random());\n      rotationZ.push(-rotationSpeed / 2 + rotationSpeed * Math.random());\n      var mesh = new Mesh(geometry, material);\n      scene.add(mesh);\n    }\n    /**\n     * Resize\n     */\n\n\n    var resize = function resize() {\n      width = div.clientWidth;\n      height = div.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    /**\n     * Render scene\n     */\n\n\n    var renderScene = function renderScene() {\n      scene.children.forEach(function (child, index) {\n        child.rotation.x += rotationY[index];\n        child.rotation.y += rotationX[index];\n        child.rotation.z += rotationZ[index];\n      });\n      renderer.render(scene, camera);\n    };\n    /**\n     * Animate\n     */\n\n\n    var animate = function animate() {\n      renderScene();\n      frameId = requestAnimationFrame(animate);\n    };\n    /**\n     * Stop\n     */\n\n\n    var stop = function stop() {\n      cancelAnimationFrame(frameId);\n    }; // Start\n\n\n    animate(); // Event listener\n\n    window.addEventListener('resize', resize); // Unmount\n\n    return function () {\n      // Stop\n      stop(); // Remove event listener\n\n      window.removeEventListener('resize', resize); // Unmount renderer\n\n      div.removeChild(renderer.domElement); // Clear scene\n\n      scene.children.forEach(function (child) {\n        child.geometry.dispose();\n        child.material.dispose();\n        scene.remove(child);\n      });\n    };\n  }, []);\n  /**\n   * Render\n   */\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"Background\",\n    ref: mount\n  });\n};\n\nexport default Background;","map":null,"metadata":{},"sourceType":"module"}