{"ast":null,"code":"import _Layout from \"antd/lib/layout\";\nimport _Typography from \"antd/lib/typography\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Menu from \"antd/lib/menu\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/** @module renderer/components/project */\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { ArrowLeftOutlined, CalculatorOutlined, CheckCircleOutlined, CloseCircleOutlined, ExclamationCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Error } from '../assets/notification';\nimport NotAuthorized from '../notauthorized';\nimport View from './view';\nimport Simulation from './simulation';\nimport UserAPI from '../../../src/api/user';\nimport ProjectAPI from '../../../src/api/project';\nimport SimulationAPI from '../../../src/api/simulation';\n/**\n * Menu keys\n */\n\nvar menuKeys = {\n  dashboard: 'dashboard',\n  newSimulation: 'new-simulation',\n  simulation: 'simulation'\n};\n/**\n * Errors\n */\n\nvar errors = {\n  updateError: 'Unable to update the project',\n  addError: 'Unable to add a simulation'\n};\n/**\n * Project\n */\n\nvar Project = function Project() {\n  // Router\n  var router = useRouter();\n  var _router$query = router.query,\n      workspaceId = _router$query.workspaceId,\n      projectId = _router$query.projectId; // State\n\n  var _useState = useState(false),\n      selectorVisible = _useState[0],\n      setSelectorVisible = _useState[1];\n\n  var _useState2 = useState(),\n      currentSimulation = _useState2[0],\n      setCurrentSimulation = _useState2[1];\n\n  var _useState3 = useState(),\n      currentType = _useState3[0],\n      setCurrentType = _useState3[1];\n\n  var _useState4 = useState(),\n      partSummary = _useState4[0],\n      setPartSummary = _useState4[1]; // Data\n\n\n  var _UserAPI$useUser = UserAPI.useUser(),\n      _UserAPI$useUser2 = _slicedToArray(_UserAPI$useUser, 2),\n      user = _UserAPI$useUser2[0],\n      loadingUser = _UserAPI$useUser2[1].loadingUser;\n\n  var _ProjectAPI$useProjec = ProjectAPI.useProject(projectId || ''),\n      _ProjectAPI$useProjec2 = _slicedToArray(_ProjectAPI$useProjec, 2),\n      project = _ProjectAPI$useProjec2[0],\n      mutateProject = _ProjectAPI$useProjec2[1].mutateProject;\n\n  var _SimulationAPI$useSim = SimulationAPI.useSimulations(project.simulations),\n      _SimulationAPI$useSim2 = _slicedToArray(_SimulationAPI$useSim, 2),\n      simulations = _SimulationAPI$useSim2[0],\n      addOneSimulation = _SimulationAPI$useSim2[1].addOneSimulation; // Not logged -> go to login page\n\n\n  useEffect(function () {\n    if (!loadingUser && !user) router.replace('/login');\n  }, [user, loadingUser]); // Modified simulation\n\n  useEffect(function () {\n    var simulation = simulations.find(function (s) {\n      return s.id === (currentSimulation === null || currentSimulation === void 0 ? void 0 : currentSimulation.id);\n    });\n    if (JSON.stringify(simulation) !== JSON.stringify(currentSimulation)) setCurrentSimulation(simulation);\n  }, [simulations]);\n  /**\n   * Handle title\n   * @param {srting} title Title\n   */\n\n  var handleTitle = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(title) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return ProjectAPI.update({\n                id: project.id\n              }, [{\n                key: 'title',\n                value: title\n              }]);\n\n            case 3:\n              // Mutate\n              mutateProject(_objectSpread(_objectSpread({}, project), {}, {\n                title: title\n              }));\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              Error(errors.updateError, _context.t0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 6]]);\n    }));\n\n    return function handleTitle(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /**\n   * On menu click\n   * @param {Object} data Data { key }\n   */\n\n\n  var onMenuClick = function onMenuClick(_ref2) {\n    var key = _ref2.key;\n    if (key === menuKeys.dashboard) handleDashboard();else if (key === menuKeys.newSimulation) addSimulation();else if (key.includes(menuKeys.simulation)) selectSimulation(key);\n  };\n  /**\n   * Handle dashboard\n   */\n\n\n  var handleDashboard = function handleDashboard() {\n    router.push({\n      pathname: '/dashboard',\n      query: {\n        workspaceId: workspaceId\n      }\n    });\n  };\n  /**\n   * Add simulation\n   */\n\n\n  var addSimulation = function addSimulation() {\n    setSelectorVisible(true);\n  };\n  /**\n   * On selector ok\n   * @param {Object} scheme Simulation scheme\n   */\n\n\n  var onSelectorOk = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(scheme) {\n      var simulation;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return SimulationAPI.add({\n                id: project.id\n              }, {\n                name: scheme.algorithm,\n                scheme: scheme\n              });\n\n            case 3:\n              simulation = _context2.sent;\n              // Mutate\n              addOneSimulation(simulation);\n              mutateProject(_objectSpread(_objectSpread({}, project), {}, {\n                simulations: [].concat(_toConsumableArray(project.simulations || []), [simulation])\n              })); // Close selector\n\n              setSelectorVisible(false);\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              Error(errors.addError, _context2.t0);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 9]]);\n    }));\n\n    return function onSelectorOk(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  /**\n   * On selector cancel\n   */\n\n\n  var onSelectorCancel = function onSelectorCancel() {\n    setSelectorVisible(false);\n  };\n  /**\n   * On simulation select\n   * @param {string} key Key\n   */\n\n\n  var selectSimulation = function selectSimulation(key) {\n    setCurrentType();\n    var descriptor = key.split('&');\n    var simulationId = descriptor[1];\n    var type = descriptor[2];\n    var simulation = simulations.find(function (s) {\n      return s.id === simulationId;\n    });\n    setCurrentSimulation(simulation);\n    setCurrentType(type);\n  };\n  /**\n   * On simulation close\n   */\n\n\n  var onSimulationClose = function onSimulationClose() {\n    setCurrentSimulation();\n    setCurrentType();\n  }; // Simulations render build\n\n\n  var simulationsRender = simulations.map(function (s) {\n    var _s$scheme;\n\n    var categories = [];\n    var configuration = (s === null || s === void 0 ? void 0 : (_s$scheme = s.scheme) === null || _s$scheme === void 0 ? void 0 : _s$scheme.configuration) || {};\n    Object.keys(configuration).forEach(function (key) {\n      var _child$subMenus;\n\n      if (key === 'part') return;\n      var child = configuration[key];\n\n      if (!((_child$subMenus = child.subMenus) !== null && _child$subMenus !== void 0 && _child$subMenus.length)) {\n        categories[child.index] = /*#__PURE__*/_jsx(_Menu.Item, {\n          icon: child.error ? /*#__PURE__*/_jsx(CloseCircleOutlined, {\n            style: {\n              color: 'red'\n            }\n          }) : child.done ? /*#__PURE__*/_jsx(CheckCircleOutlined, {\n            style: {\n              color: 'green'\n            }\n          }) : /*#__PURE__*/_jsx(ExclamationCircleOutlined, {\n            style: {\n              color: 'orange'\n            }\n          }),\n          children: child.title\n        }, menuKeys.simulation + '&' + s.id + '&' + key);\n      } else {\n        var subMenus = child.subMenus.map(function (subMenu, index) {\n          return /*#__PURE__*/_jsx(_Menu.Item, {\n            children: subMenu.title\n          }, menuKeys.simulation + '&' + s.id + '&' + key + '&' + index);\n        });\n        categories[child.index] = /*#__PURE__*/_jsx(_Menu.SubMenu, {\n          icon: child.done ? /*#__PURE__*/_jsx(CheckCircleOutlined, {\n            style: {\n              color: 'green'\n            }\n          }) : /*#__PURE__*/_jsx(ExclamationCircleOutlined, {\n            style: {\n              color: 'orange'\n            }\n          }),\n          title: child.title,\n          onTitleClick: onMenuClick,\n          children: subMenus\n        }, menuKeys.simulation + '&' + s.id + '&' + key);\n      }\n    });\n    return /*#__PURE__*/_jsxs(_Menu.SubMenu, {\n      icon: /*#__PURE__*/_jsx(CalculatorOutlined, {}),\n      title: s.name,\n      children: [/*#__PURE__*/_jsx(_Menu.Item, {\n        icon: /*#__PURE__*/_jsx(CheckCircleOutlined, {\n          style: {\n            color: 'green'\n          }\n        }),\n        children: \"About\"\n      }, menuKeys.simulation + '&' + s.id + '&about'), categories]\n    }, menuKeys.simulation + s.id);\n  });\n  /**\n   * Render\n   */\n\n  return project === 'Unauthorized' ? /*#__PURE__*/_jsx(NotAuthorized, {}) : /*#__PURE__*/_jsxs(_Layout, {\n    hasSider: true,\n    children: [/*#__PURE__*/_jsxs(_Layout.Sider, {\n      theme: \"light\",\n      className: \"Project-sider\",\n      children: [/*#__PURE__*/_jsx(_Menu, {\n        onClick: onMenuClick,\n        children: /*#__PURE__*/_jsx(_Menu.Item, {\n          icon: /*#__PURE__*/_jsx(ArrowLeftOutlined, {}),\n          children: \"Dashboard\"\n        }, menuKeys.dashboard)\n      }), /*#__PURE__*/_jsx(_Typography.Title, {\n        className: \"Project-title\",\n        level: 4,\n        editable: {\n          onChange: handleTitle,\n          maxLength: 50\n        },\n        children: project.title\n      }), /*#__PURE__*/_jsxs(_Menu, {\n        mode: \"inline\",\n        onClick: onMenuClick,\n        children: [/*#__PURE__*/_jsx(_Menu.Item, {\n          icon: /*#__PURE__*/_jsx(PlusOutlined, {}),\n          children: \"New simulation\"\n        }, menuKeys.newSimulation), simulationsRender]\n      })]\n    }), /*#__PURE__*/_jsxs(_Layout.Content, {\n      className: \"no-scroll relative\",\n      children: [/*#__PURE__*/_jsx(Simulation.Selector, {\n        visible: selectorVisible,\n        onOk: onSelectorOk,\n        onCancel: onSelectorCancel\n      }), /*#__PURE__*/_jsx(Simulation, {\n        project: {\n          id: project.id,\n          simulations: project.simulations\n        },\n        simulation: currentSimulation,\n        type: currentType,\n        part: partSummary,\n        onClose: onSimulationClose\n      }), /*#__PURE__*/_jsx(View, {\n        simulation: currentSimulation,\n        setPartSummary: setPartSummary\n      })]\n    })]\n  });\n};\n\nexport default Project;","map":null,"metadata":{},"sourceType":"module"}