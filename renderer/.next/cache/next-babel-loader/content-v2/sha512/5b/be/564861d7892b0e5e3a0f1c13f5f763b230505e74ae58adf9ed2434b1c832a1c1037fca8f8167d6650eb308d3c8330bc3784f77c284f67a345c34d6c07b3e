{"ast":null,"code":"import _Drawer from \"antd/lib/drawer\";\nimport _Space from \"antd/lib/space\";\nimport _Button from \"antd/lib/button\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Radio from \"antd/lib/radio\";\nimport _Card from \"antd/lib/card\";\nimport _Input from \"antd/lib/input\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport Formula from '../../../../assets/formula';\nimport Selector from '../../../../assets/selector';\nimport Add from '../add';\nimport Edit from '../edit';\n/**\n * Boundary condition\n * @param {Object} props Props\n */\n\nvar BoundaryCondition = function BoundaryCondition(_ref) {\n  var _current$type, _current$type2, _current$type3, _current$type3$childr;\n\n  var project = _ref.project,\n      simulation = _ref.simulation,\n      visible = _ref.visible,\n      part = _ref.part,\n      boundaryConditions = _ref.boundaryConditions,\n      boundaryCondition = _ref.boundaryCondition,\n      close = _ref.close;\n\n  var _useState = useState({\n    name: 'New boundary condition'\n  }),\n      current = _useState[0],\n      setCurrent = _useState[1];\n\n  var _useState2 = useState(true),\n      disabled = _useState2[0],\n      setDisabled = _useState2[1]; // Data\n\n\n  var types = Object.keys(boundaryConditions).map(function (type) {\n    if (type === 'index' || type === 'title' || type === 'done') return;\n    return {\n      key: type,\n      label: boundaryConditions[type].label,\n      children: boundaryConditions[type].children\n    };\n  }).filter(function (t) {\n    return t;\n  }); // Edit\n\n  useEffect(function () {\n    if (boundaryCondition) setCurrent(boundaryCondition);\n  }, [boundaryCondition]); // Disabled\n\n  useEffect(function () {\n    var _current$selected, _current$values;\n\n    if (!current || !current.name || !((_current$selected = current.selected) !== null && _current$selected !== void 0 && _current$selected.length) || !((_current$values = current.values) !== null && _current$values !== void 0 && _current$values.length)) setDisabled(true);else setDisabled(false);\n  }, [current]);\n  /**\n   * On name\n   * @param {Object} event Event\n   */\n\n  var onName = function onName(event) {\n    var name = event.target.value;\n    setCurrent(_objectSpread(_objectSpread({}, current), {}, {\n      name: name\n    }));\n  };\n  /**\n   * On type\n   * @param {Object} event Event\n   */\n\n\n  var onType = function onType(event) {\n    var key = event.target.value;\n    var type = types.find(function (t) {\n      return t.key === key;\n    });\n    var values = boundaryConditions[key].children ? boundaryConditions[key].children.map(function (child) {\n      return child[\"default\"];\n    }) : [0];\n    setCurrent(_objectSpread(_objectSpread({}, current), {}, {\n      type: type,\n      values: values\n    }));\n  };\n  /**\n   * On change\n   * @param {number} index Index\n   * @param {string} value Value\n   */\n\n\n  var _onChange = function onChange(index, value) {\n    setCurrent(_objectSpread(_objectSpread({}, current), {}, {\n      values: [].concat(_toConsumableArray(current.values.slice(0, index)), [value], _toConsumableArray(current.values.slice(index + 1)))\n    }));\n  };\n  /**\n   * On selected\n   * @param {Array} selected Selected\n   */\n\n\n  var onSelected = function onSelected(selected) {\n    setCurrent(_objectSpread(_objectSpread({}, current), {}, {\n      selected: selected\n    }));\n  };\n  /**\n   * On close\n   */\n\n\n  var onClose = function onClose() {\n    setCurrent({\n      name: 'New boundary condition'\n    });\n    close();\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxs(_Drawer, {\n    title: \"Boundary condition\",\n    placement: \"left\",\n    closable: false,\n    visible: visible,\n    mask: false,\n    maskClosable: false,\n    width: 300,\n    children: [/*#__PURE__*/_jsx(_Card, {\n      title: \"Boundary condition name\",\n      children: /*#__PURE__*/_jsx(_Input, {\n        value: (current === null || current === void 0 ? void 0 : current.name) || '',\n        onChange: onName\n      })\n    }), /*#__PURE__*/_jsx(_Card, {\n      title: \"Boundary condition type\",\n      children: /*#__PURE__*/_jsx(_Radio.Group, {\n        buttonStyle: \"solid\",\n        value: current === null || current === void 0 ? void 0 : (_current$type = current.type) === null || _current$type === void 0 ? void 0 : _current$type.key,\n        onChange: onType,\n        children: types === null || types === void 0 ? void 0 : types.map(function (type) {\n          return /*#__PURE__*/_jsx(_Radio.Button, {\n            value: type.key,\n            children: type.label\n          }, type.key);\n        })\n      })\n    }), (current === null || current === void 0 ? void 0 : current.type) && (current === null || current === void 0 ? void 0 : (_current$type2 = current.type) === null || _current$type2 === void 0 ? void 0 : _current$type2.children) && /*#__PURE__*/_jsx(_Card, {\n      children: current === null || current === void 0 ? void 0 : (_current$type3 = current.type) === null || _current$type3 === void 0 ? void 0 : (_current$type3$childr = _current$type3.children) === null || _current$type3$childr === void 0 ? void 0 : _current$type3$childr.map(function (child, index) {\n        var _current$values2, _current$type4, _current$type4$childr, _current$type4$childr2, _current$values3;\n\n        return /*#__PURE__*/_jsxs(\"div\", {\n          children: [child.label, /*#__PURE__*/_jsx(Formula, {\n            defaultValue: (current === null || current === void 0 ? void 0 : (_current$values2 = current.values) === null || _current$values2 === void 0 ? void 0 : _current$values2[index]) === undefined ? current === null || current === void 0 ? void 0 : (_current$type4 = current.type) === null || _current$type4 === void 0 ? void 0 : (_current$type4$childr = _current$type4.children) === null || _current$type4$childr === void 0 ? void 0 : (_current$type4$childr2 = _current$type4$childr[index]) === null || _current$type4$childr2 === void 0 ? void 0 : _current$type4$childr2[\"default\"] : current === null || current === void 0 ? void 0 : (_current$values3 = current.values) === null || _current$values3 === void 0 ? void 0 : _current$values3[index],\n            onChange: function onChange(value) {\n              return _onChange(index, value);\n            },\n            unit: child.unit\n          })]\n        }, index);\n      })\n    }), /*#__PURE__*/_jsx(Selector, {\n      part: part,\n      updateSelected: onSelected\n    }), /*#__PURE__*/_jsxs(_Space, {\n      children: [/*#__PURE__*/_jsx(_Button, {\n        type: \"danger\",\n        onClick: onClose,\n        children: \"Cancel\"\n      }), boundaryCondition ? /*#__PURE__*/_jsx(Edit, {\n        disabled: disabled,\n        boundaryCondition: current,\n        oldBoundaryCondition: boundaryCondition,\n        project: project,\n        simulation: simulation,\n        part: part,\n        close: onClose\n      }) : /*#__PURE__*/_jsx(Add, {\n        disabled: disabled,\n        boundaryCondition: current,\n        project: project,\n        simulation: simulation,\n        part: part,\n        close: onClose\n      })]\n    })]\n  });\n};\n\nexport default BoundaryCondition;","map":null,"metadata":{},"sourceType":"module"}