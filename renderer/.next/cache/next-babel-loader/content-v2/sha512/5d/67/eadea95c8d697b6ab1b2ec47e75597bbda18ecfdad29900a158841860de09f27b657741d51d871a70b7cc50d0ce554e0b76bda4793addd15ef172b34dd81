{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _Card from \"antd/lib/card\";\nimport _Space from \"antd/lib/space\";\nimport _Button from \"antd/lib/button\";\nimport _Typography from \"antd/lib/typography\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { Error } from '../../assets/notification';\nimport PluginForm from './pluginForm';\nimport Delete from './delete';\nimport PluginAPI from '../../../../src/api/plugin';\n/**\n * Errors hpc/list\n */\n\nconst errors = {\n  updateError: 'Unable to update the plugin'\n};\n/**\n * Plugins list\n * @param {Object} props Props\n */\n\nconst List = ({\n  plugin\n}) => {\n  // State\n  const {\n    0: list,\n    1: setList\n  } = useState([]);\n  const {\n    0: edit,\n    1: setEdit\n  } = useState(false); // Data\n\n  const [plugins, {\n    mutateOnePlugin\n  }] = PluginAPI.usePlugins(); // List\n\n  useEffect(() => {\n    const pluginsList = plugins.map(p => {\n      if (p.key !== plugin.key) return;\n      const configuration = p.configuration;\n      return /*#__PURE__*/_jsxs(_Card, {\n        title: configuration.name.value,\n        style: {\n          marginTop: '10px'\n        },\n        children: [edit ? /*#__PURE__*/_jsx(PluginForm, {\n          plugin: p,\n          onFinish: values => onEdit(p, values),\n          onCancel: () => setEdit(false)\n        }) : Object.keys(configuration).map(key => {\n          if (key === 'name') return;\n          return /*#__PURE__*/_jsxs(_Typography.Paragraph, {\n            children: [/*#__PURE__*/_jsxs(_Typography.Text, {\n              strong: true,\n              children: [configuration[key].label, \":\"]\n            }), ' ', /*#__PURE__*/_jsx(_Typography.Text, {\n              children: configuration[key].type === 'password' ? '******' : configuration[key].value\n            })]\n          }, key);\n        }), /*#__PURE__*/_jsxs(_Space, {\n          children: [/*#__PURE__*/_jsx(_Button, {\n            disabled: edit,\n            onClick: () => setEdit(true),\n            children: \"Edit\"\n          }), /*#__PURE__*/_jsx(Delete, {\n            plugin: p\n          })]\n        })]\n      }, p.uuid);\n    });\n    setList(pluginsList);\n  }, [JSON.stringify(plugins), plugin, edit]);\n  /**\n   * On edit\n   * @param {Object} initialPlugin Plugin\n   * @param {Object} values Values\n   */\n\n  const onEdit = async (initialPlugin, values) => {\n    try {\n      // Set values\n      Object.keys(values).forEach(key => {\n        initialPlugin.configuration[key].value = values[key];\n      }); // API\n\n      await PluginAPI.update(initialPlugin); // Mutate\n\n      mutateOnePlugin(initialPlugin); // Finish\n\n      setEdit(false);\n    } catch (err) {\n      Error(errors.updateError, err);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: list\n  });\n};\n\nexport default List;","map":null,"metadata":{},"sourceType":"module"}