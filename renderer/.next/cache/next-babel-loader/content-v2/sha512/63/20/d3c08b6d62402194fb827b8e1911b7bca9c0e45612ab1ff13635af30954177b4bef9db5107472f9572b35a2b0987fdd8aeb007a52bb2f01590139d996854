{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _Card from \"antd/lib/card\";\nimport _Space from \"antd/lib/space\";\nimport _Button from \"antd/lib/button\";\nimport _Typography from \"antd/lib/typography\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/account/hpc/list.js\";\nimport { useState, useEffect } from 'react';\nimport { Error } from '../../assets/notification';\nimport PluginForm from './pluginForm';\nimport Delete from './delete';\nimport PluginAPI from '../../../../src/api/plugin';\n/**\n * Errors hpc/list\n */\n\nconst errors = {\n  updateError: 'Unable to update the plugin'\n};\n/**\n * Plugins list\n * @param {Object} props Props\n */\n\nconst List = ({\n  plugin\n}) => {\n  // State\n  const {\n    0: list,\n    1: setList\n  } = useState([]);\n  const {\n    0: edit,\n    1: setEdit\n  } = useState(false); // Data\n\n  const [plugins, {\n    mutateOnePlugin\n  }] = PluginAPI.usePlugins(); // List\n\n  useEffect(() => {\n    const pluginsList = plugins.map(p => {\n      if (p.key !== plugin.key) return;\n      const configuration = p.configuration;\n      return /*#__PURE__*/_jsxDEV(_Card, {\n        title: configuration.name.value,\n        style: {\n          marginTop: '10px'\n        },\n        children: [edit ? /*#__PURE__*/_jsxDEV(PluginForm, {\n          plugin: p,\n          onFinish: values => onEdit(p, values),\n          onCancel: () => setEdit(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this) : Object.keys(configuration).map(key => {\n          if (key === 'name') return;\n          return /*#__PURE__*/_jsxDEV(_Typography.Paragraph, {\n            children: [/*#__PURE__*/_jsxDEV(_Typography.Text, {\n              strong: true,\n              children: [configuration[key].label, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 19\n            }, this), ' ', /*#__PURE__*/_jsxDEV(_Typography.Text, {\n              children: configuration[key].type === 'password' ? '******' : configuration[key].value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 19\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(_Space, {\n          children: [/*#__PURE__*/_jsxDEV(_Button, {\n            disabled: edit,\n            onClick: () => setEdit(true),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Delete, {\n            plugin: p\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, p.uuid, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this);\n    });\n    setList(pluginsList);\n  }, [JSON.stringify(plugins), plugin, edit]);\n  /**\n   * On edit\n   * @param {Object} initialPlugin Plugin\n   * @param {Object} values Values\n   */\n\n  const onEdit = async (initialPlugin, values) => {\n    try {\n      // Set values\n      Object.keys(values).forEach(key => {\n        initialPlugin.configuration[key].value = values[key];\n      }); // API\n\n      await PluginAPI.update(initialPlugin); // Mutate\n\n      mutateOnePlugin(initialPlugin); // Finish\n\n      setEdit(false);\n    } catch (err) {\n      Error(errors.updateError, err);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: list\n  }, void 0, false);\n};\n\nexport default List;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/account/hpc/list.js"],"names":["useState","useEffect","Error","PluginForm","Delete","PluginAPI","errors","updateError","List","plugin","list","setList","edit","setEdit","plugins","mutateOnePlugin","usePlugins","pluginsList","map","p","key","configuration","name","value","marginTop","values","onEdit","Object","keys","label","type","uuid","JSON","stringify","initialPlugin","forEach","update","err"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Button, Card, Space, Typography } from 'antd'\n\nimport { Error } from '../../assets/notification'\nimport PluginForm from './pluginForm'\nimport Delete from './delete'\n\nimport PluginAPI from '../../../../src/api/plugin'\n\n/**\n * Errors hpc/list\n */\nconst errors = {\n  updateError: 'Unable to update the plugin'\n}\n\n/**\n * Plugins list\n * @param {Object} props Props\n */\nconst List = ({ plugin }) => {\n  // State\n  const [list, setList] = useState([])\n  const [edit, setEdit] = useState(false)\n\n  // Data\n  const [plugins, { mutateOnePlugin }] = PluginAPI.usePlugins()\n\n  // List\n  useEffect(() => {\n    const pluginsList = plugins.map((p) => {\n      if (p.key !== plugin.key) return\n\n      const configuration = p.configuration\n      return (\n        <Card\n          key={p.uuid}\n          title={configuration.name.value}\n          style={{ marginTop: '10px' }}\n        >\n          {edit ? (\n            <PluginForm\n              plugin={p}\n              onFinish={(values) => onEdit(p, values)}\n              onCancel={() => setEdit(false)}\n            />\n          ) : (\n            Object.keys(configuration).map((key) => {\n              if (key === 'name') return\n              return (\n                <Typography.Paragraph key={key}>\n                  <Typography.Text strong={true}>\n                    {configuration[key].label}:\n                  </Typography.Text>{' '}\n                  <Typography.Text>\n                    {configuration[key].type === 'password'\n                      ? '******'\n                      : configuration[key].value}\n                  </Typography.Text>\n                </Typography.Paragraph>\n              )\n            })\n          )}\n          <Space>\n            <Button disabled={edit} onClick={() => setEdit(true)}>\n              Edit\n            </Button>\n            <Delete plugin={p} />\n          </Space>\n        </Card>\n      )\n    })\n\n    setList(pluginsList)\n  }, [JSON.stringify(plugins), plugin, edit])\n\n  /**\n   * On edit\n   * @param {Object} initialPlugin Plugin\n   * @param {Object} values Values\n   */\n  const onEdit = async (initialPlugin, values) => {\n    try {\n      // Set values\n      Object.keys(values).forEach((key) => {\n        initialPlugin.configuration[key].value = values[key]\n      })\n\n      // API\n      await PluginAPI.update(initialPlugin)\n\n      // Mutate\n      mutateOnePlugin(initialPlugin)\n\n      // Finish\n      setEdit(false)\n    } catch (err) {\n      Error(errors.updateError, err)\n    }\n  }\n\n  /**\n   * Render\n   */\n  return <>{list}</>\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}