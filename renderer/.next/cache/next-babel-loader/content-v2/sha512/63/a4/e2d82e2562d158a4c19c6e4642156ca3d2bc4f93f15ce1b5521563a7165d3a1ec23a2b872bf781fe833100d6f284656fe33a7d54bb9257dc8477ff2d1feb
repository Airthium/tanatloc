{"ast":null,"code":"import _Layout from \"antd/lib/layout\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { PlusCircleOutlined } from '@ant-design/icons';\nimport { AddButton } from '../../../assets/button';\nimport List from './list';\nimport BoundaryCondition from './boundaryCondition';\nimport { useDispatch } from 'react-redux';\nimport { enable, disable, setType, setPart } from '../../../../store/select/action';\n/**\n * Errors simulation/boundaryConditions\n * @memberof module:renderer/components/project/simulation\n */\n\nconst errors = {\n  updateError: 'Unable to update the simulation'\n};\n/**\n * Boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nconst BoundaryConditions = ({\n  project,\n  simulation,\n  part,\n  setVisible\n}) => {\n  var _simulation$scheme, _simulation$scheme$co;\n\n  // State\n  const {\n    0: boundaryCondition,\n    1: setBoundaryCondition\n  } = useState();\n  const {\n    0: boundaryConditionVisible,\n    1: setBoundaryConditionVisible\n  } = useState(false); // Store\n\n  const dispatch = useDispatch(); // Data\n\n  const boundaryConditions = simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme = simulation.scheme) === null || _simulation$scheme === void 0 ? void 0 : (_simulation$scheme$co = _simulation$scheme.configuration) === null || _simulation$scheme$co === void 0 ? void 0 : _simulation$scheme$co.boundaryConditions; // Part\n\n  useEffect(() => {\n    dispatch(setType('faces'));\n    dispatch(setPart(part === null || part === void 0 ? void 0 : part.uuid));\n  }, [part]);\n\n  const onAdd = () => {\n    setBoundaryCondition();\n    setBoundaryConditionVisible(true);\n    setVisible(false);\n    dispatch(enable());\n  };\n\n  const onEdit = (type, index) => {\n    const boundaryConditionToEdit = boundaryConditions[type].values[index];\n    setBoundaryCondition(boundaryConditionToEdit);\n    setBoundaryConditionVisible(true);\n    setVisible(false);\n    dispatch(enable());\n  };\n\n  const onClose = () => {\n    setBoundaryConditionVisible(false);\n    setVisible(true);\n    setBoundaryCondition();\n    dispatch(disable());\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(_Layout, {\n    children: /*#__PURE__*/_jsxs(_Layout.Content, {\n      children: [/*#__PURE__*/_jsx(AddButton, {\n        icon: /*#__PURE__*/_jsx(PlusCircleOutlined, {}),\n        onAdd: onAdd,\n        children: \"Add boundary condition\"\n      }), /*#__PURE__*/_jsx(List, {\n        project: project,\n        simulation: simulation,\n        onEdit: onEdit\n      }), /*#__PURE__*/_jsx(BoundaryCondition, {\n        project: project,\n        simulation: simulation,\n        visible: boundaryConditionVisible,\n        part: part,\n        boundaryConditions: boundaryConditions,\n        boundaryCondition: boundaryCondition,\n        close: onClose\n      })]\n    })\n  });\n};\n\nexport default BoundaryConditions; // import Si","map":null,"metadata":{},"sourceType":"module"}