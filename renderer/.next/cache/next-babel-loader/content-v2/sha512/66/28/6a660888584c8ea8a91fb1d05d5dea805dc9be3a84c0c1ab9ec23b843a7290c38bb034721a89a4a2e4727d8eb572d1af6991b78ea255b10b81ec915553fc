{"ast":null,"code":"import _Layout from \"antd/lib/layout\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { PlusCircleOutlined } from '@ant-design/icons';\nimport { AddButton } from '../../../assets/button';\nimport List from './list';\nimport BoundaryCondition from './boundaryCondition';\nimport { useDispatch } from 'react-redux';\nimport { enable, disable, setType, setPart } from '../../../../store/select/action';\n/**\n * Errors simulation/boundaryConditions\n * @memberof module:renderer/components/project/simulation\n */\n\nvar errors = {\n  updateError: 'Unable to update the simulation'\n};\n/**\n * Boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nvar BoundaryConditions = function BoundaryConditions(_ref) {\n  _s();\n\n  var _simulation$scheme, _simulation$scheme$co;\n\n  var project = _ref.project,\n      simulation = _ref.simulation,\n      part = _ref.part,\n      setVisible = _ref.setVisible;\n\n  // State\n  var _useState = useState(),\n      boundaryCondition = _useState[0],\n      setBoundaryCondition = _useState[1];\n\n  var _useState2 = useState(false),\n      boundaryConditionVisible = _useState2[0],\n      setBoundaryConditionVisible = _useState2[1]; // Store\n\n\n  var dispatch = useDispatch(); // Data\n\n  var boundaryConditions = simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme = simulation.scheme) === null || _simulation$scheme === void 0 ? void 0 : (_simulation$scheme$co = _simulation$scheme.configuration) === null || _simulation$scheme$co === void 0 ? void 0 : _simulation$scheme$co.boundaryConditions; // Part\n\n  useEffect(function () {\n    dispatch(setType('faces'));\n    dispatch(setPart(part === null || part === void 0 ? void 0 : part.uuid));\n  }, [part]);\n\n  var onAdd = function onAdd() {\n    setBoundaryCondition();\n    setBoundaryConditionVisible(true);\n    setVisible(false);\n    dispatch(enable());\n  };\n\n  var onEdit = function onEdit(type, index) {\n    var boundaryConditionToEdit = boundaryConditions[type].values[index];\n    setBoundaryCondition(boundaryConditionToEdit);\n    setBoundaryConditionVisible(true);\n    setVisible(false);\n    dispatch(enable());\n  };\n\n  var onClose = function onClose() {\n    setBoundaryConditionVisible(false);\n    setVisible(true);\n    setBoundaryCondition();\n    dispatch(disable());\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(_Layout, {\n    children: /*#__PURE__*/_jsxDEV(_Layout.Content, {\n      children: [/*#__PURE__*/_jsxDEV(AddButton, {\n        icon: /*#__PURE__*/_jsxDEV(PlusCircleOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 26\n        }, _this),\n        onAdd: onAdd,\n        children: \"Add boundary condition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(List, {\n        project: project,\n        simulation: simulation,\n        onEdit: onEdit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(BoundaryCondition, {\n        project: project,\n        simulation: simulation,\n        visible: boundaryConditionVisible,\n        part: part,\n        boundaryConditions: boundaryConditions,\n        boundaryCondition: boundaryCondition,\n        close: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(BoundaryConditions, \"e50oB6oGXTDProhxZKLwxjAHTeE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = BoundaryConditions;\nexport default BoundaryConditions; // import Si\n\nvar _c;\n\n$RefreshReg$(_c, \"BoundaryConditions\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/index.js"],"names":["useState","useEffect","PlusCircleOutlined","AddButton","List","BoundaryCondition","useDispatch","enable","disable","setType","setPart","errors","updateError","BoundaryConditions","project","simulation","part","setVisible","boundaryCondition","setBoundaryCondition","boundaryConditionVisible","setBoundaryConditionVisible","dispatch","boundaryConditions","scheme","configuration","uuid","onAdd","onEdit","type","index","boundaryConditionToEdit","values","onClose"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Layout } from 'antd'\nimport { PlusCircleOutlined } from '@ant-design/icons'\n\nimport { AddButton } from '../../../assets/button'\nimport List from './list'\nimport BoundaryCondition from './boundaryCondition'\n\nimport { useDispatch } from 'react-redux'\nimport {\n  enable,\n  disable,\n  setType,\n  setPart\n} from '../../../../store/select/action'\n\n/**\n * Errors simulation/boundaryConditions\n * @memberof module:renderer/components/project/simulation\n */\nconst errors = {\n  updateError: 'Unable to update the simulation'\n}\n\n/**\n * Boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\nconst BoundaryConditions = ({ project, simulation, part, setVisible }) => {\n  // State\n  const [boundaryCondition, setBoundaryCondition] = useState()\n  const [boundaryConditionVisible, setBoundaryConditionVisible] = useState(\n    false\n  )\n\n  // Store\n  const dispatch = useDispatch()\n\n  // Data\n  const boundaryConditions =\n    simulation?.scheme?.configuration?.boundaryConditions\n\n  // Part\n  useEffect(() => {\n    dispatch(setType('faces'))\n    dispatch(setPart(part?.uuid))\n  }, [part])\n\n  const onAdd = () => {\n    setBoundaryCondition()\n\n    setBoundaryConditionVisible(true)\n    setVisible(false)\n    dispatch(enable())\n  }\n\n  const onEdit = (type, index) => {\n    const boundaryConditionToEdit = boundaryConditions[type].values[index]\n    setBoundaryCondition(boundaryConditionToEdit)\n\n    setBoundaryConditionVisible(true)\n    setVisible(false)\n    dispatch(enable())\n  }\n\n  const onClose = () => {\n    setBoundaryConditionVisible(false)\n\n    setVisible(true)\n    setBoundaryCondition()\n    dispatch(disable())\n  }\n\n  /**\n   * Render\n   */\n  return (\n    <Layout>\n      <Layout.Content>\n        <AddButton icon={<PlusCircleOutlined />} onAdd={onAdd}>\n          Add boundary condition\n        </AddButton>\n        <List project={project} simulation={simulation} onEdit={onEdit} />\n        <BoundaryCondition\n          project={project}\n          simulation={simulation}\n          visible={boundaryConditionVisible}\n          part={part}\n          boundaryConditions={boundaryConditions}\n          boundaryCondition={boundaryCondition}\n          close={onClose}\n        />\n      </Layout.Content>\n    </Layout>\n  )\n}\n\nexport default BoundaryConditions\n\n// import Si\n"]},"metadata":{},"sourceType":"module"}