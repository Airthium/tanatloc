{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _Spin from \"antd/lib/spin\";\nimport _Card from \"antd/lib/card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/account/hpc/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Plugin from './plugin';\nimport Plugins from '../../../../plugin';\nimport PluginAPI from '../../../../src/api/plugin';\n/**\n * HPC plugins\n */\n\nvar HPC = function HPC() {\n  _s();\n\n  // State\n  var _useState = useState([]),\n      list = _useState[0],\n      setList = _useState[1]; // Data\n\n\n  var _PluginAPI$usePlugins = PluginAPI.usePlugins(),\n      _PluginAPI$usePlugins2 = _slicedToArray(_PluginAPI$usePlugins, 2),\n      loadingPlugins = _PluginAPI$usePlugins2[1].loadingPlugins; // Plugins list\n\n\n  useEffect(function () {\n    if (loadingPlugins) return; // HPC only\n\n    var HPCPlugins = Object.keys(Plugins).map(function (key) {\n      var plugin = Plugins[key];\n      if (plugin.category === 'HPC') return plugin;\n    }).filter(function (p) {\n      return p;\n    }); // List\n\n    var pluginsList = HPCPlugins.map(function (plugin) {\n      return /*#__PURE__*/_jsxDEV(_Card, {\n        title: plugin.name,\n        children: /*#__PURE__*/_jsxDEV(Plugin, {\n          plugin: plugin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, _this)\n      }, plugin.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, _this);\n    });\n    setList(pluginsList);\n  }, [loadingPlugins]);\n  /**\n   * Render\n   */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loadingPlugins ? /*#__PURE__*/_jsxDEV(_Spin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 30\n    }, _this) : list\n  }, void 0, false);\n};\n\n_s(HPC, \"TjyGoyEBYgId8T0MBXNAKM6dgqg=\", false, function () {\n  return [PluginAPI.usePlugins];\n});\n\n_c = HPC;\nexport default HPC;\n\nvar _c;\n\n$RefreshReg$(_c, \"HPC\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/account/hpc/index.js"],"names":["useState","useEffect","Plugin","Plugins","PluginAPI","HPC","list","setList","usePlugins","loadingPlugins","HPCPlugins","Object","keys","map","key","plugin","category","filter","p","pluginsList","name"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAGA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,OAAOC,SAAP,MAAsB,4BAAtB;AAEA;AACA;AACA;;AACA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA;;AAChB;AADgB,kBAEQL,QAAQ,CAAC,EAAD,CAFhB;AAAA,MAETM,IAFS;AAAA,MAEHC,OAFG,iBAIhB;;;AAJgB,8BAKeH,SAAS,CAACI,UAAV,EALf;AAAA;AAAA,MAKLC,cALK,6BAKLA,cALK,EAOhB;;;AACAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIQ,cAAJ,EAAoB,OADN,CAGd;;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYT,OAAZ,EAChBU,GADgB,CACZ,UAACC,GAAD,EAAS;AACZ,UAAMC,MAAM,GAAGZ,OAAO,CAACW,GAAD,CAAtB;AACA,UAAIC,MAAM,CAACC,QAAP,KAAoB,KAAxB,EAA+B,OAAOD,MAAP;AAChC,KAJgB,EAKhBE,MALgB,CAKT,UAACC,CAAD;AAAA,aAAOA,CAAP;AAAA,KALS,CAAnB,CAJc,CAWd;;AACA,QAAMC,WAAW,GAAGT,UAAU,CAACG,GAAX,CAAe,UAACE,MAAD,EAAY;AAC7C,0BACE;AAAuB,QAAA,KAAK,EAAEA,MAAM,CAACK,IAArC;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,MAAM,EAAEL;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF,SAAWA,MAAM,CAACD,GAAlB;AAAA;AAAA;AAAA;AAAA,eADF;AAKD,KANmB,CAApB;AAQAP,IAAAA,OAAO,CAACY,WAAD,CAAP;AACD,GArBQ,EAqBN,CAACV,cAAD,CArBM,CAAT;AAuBA;AACF;AACA;;AACE,sBAAO;AAAA,cAAGA,cAAc,gBAAG;AAAA;AAAA;AAAA;AAAA,aAAH,GAAcH;AAA/B,mBAAP;AACD,CAnCD;;GAAMD,G;UAK2BD,SAAS,CAACI,U;;;KALrCH,G;AAqCN,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Card, Spin } from 'antd'\n\nimport Plugin from './plugin'\n\nimport Plugins from '../../../../plugin'\n\nimport PluginAPI from '../../../../src/api/plugin'\n\n/**\n * HPC plugins\n */\nconst HPC = () => {\n  // State\n  const [list, setList] = useState([])\n\n  // Data\n  const [, { loadingPlugins }] = PluginAPI.usePlugins()\n\n  // Plugins list\n  useEffect(() => {\n    if (loadingPlugins) return\n\n    // HPC only\n    const HPCPlugins = Object.keys(Plugins)\n      .map((key) => {\n        const plugin = Plugins[key]\n        if (plugin.category === 'HPC') return plugin\n      })\n      .filter((p) => p)\n\n    // List\n    const pluginsList = HPCPlugins.map((plugin) => {\n      return (\n        <Card key={plugin.key} title={plugin.name}>\n          <Plugin plugin={plugin} />\n        </Card>\n      )\n    })\n\n    setList(pluginsList)\n  }, [loadingPlugins])\n\n  /**\n   * Render\n   */\n  return <>{loadingPlugins ? <Spin /> : list}</>\n}\n\nexport default HPC\n"]},"metadata":{},"sourceType":"module"}