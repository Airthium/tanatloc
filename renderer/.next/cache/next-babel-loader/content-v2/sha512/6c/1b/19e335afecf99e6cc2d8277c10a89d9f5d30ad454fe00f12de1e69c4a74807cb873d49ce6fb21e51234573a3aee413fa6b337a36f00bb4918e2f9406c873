{"ast":null,"code":"import _Modal from \"antd/lib/modal\";\nimport _Space from \"antd/lib/space\";\nimport _Card from \"antd/lib/card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/run/cloudServer/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport merge from 'lodash.merge';\nimport { Error } from '../../../../assets/notification';\nimport Plugins from '../../../../../plugin';\nimport PluginAPI from '../../../../../../src/api/plugin';\nvar errors = {\n  mergeError: 'Unable to update the plugin'\n};\n\nvar CloudServer = function CloudServer(_ref) {\n  _s();\n\n  var visible = _ref.visible,\n      onClosse = _ref.onClosse;\n\n  // Data\n  var _PluginAPI$usePlugins = PluginAPI.usePlugins(),\n      _PluginAPI$usePlugins2 = _slicedToArray(_PluginAPI$usePlugins, 2),\n      plugins = _PluginAPI$usePlugins2[0],\n      mutateOnePlugin = _PluginAPI$usePlugins2[1].mutateOnePlugin;\n\n  var onMerge = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(plugin, diff) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              // Merge\n              merge(plugin, diff); // API\n\n              _context.next = 4;\n              return PluginAPI.update(plugin);\n\n            case 4:\n              // Mutate one plugin\n              mutateOnePlugin(plugin); // Close\n\n              onClose();\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              Error(errors.mergeError, _context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function onMerge(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Modal, {\n    visible: visible,\n    title: \"Cloud server\",\n    onOk: function onOk() {},\n    onCancel: onClose,\n    children: /*#__PURE__*/_jsxDEV(_Space, {\n      align: \"start\",\n      direction: \"horizontal\",\n      children: plugins === null || plugins === void 0 ? void 0 : plugins.map(function (plugin) {\n        var base = Plugins[plugin.key];\n        return /*#__PURE__*/_jsxDEV(_Card, {\n          title: plugin.name,\n          children: /*#__PURE__*/_jsxDEV(base.renderer, {\n            data: plugin.data,\n            onSelect: function onSelect(diff) {\n              return onMerge(plugin, diff);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, _this)\n        }, plugin.uuid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CloudServer, \"Ar3Yday7NUJAw6b7QGPXIjNSoaQ=\", false, function () {\n  return [PluginAPI.usePlugins];\n});\n\n_c = CloudServer;\nexport default CloudServer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CloudServer\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/run/cloudServer/index.js"],"names":["merge","Error","Plugins","PluginAPI","errors","mergeError","CloudServer","visible","onClosse","usePlugins","plugins","mutateOnePlugin","onMerge","plugin","diff","update","onClose","map","base","key","name","data","uuid"],"mappings":";;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,cAAlB;AAEA,SAASC,KAAT,QAAsB,iCAAtB;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAOC,SAAP,MAAsB,kCAAtB;AAEA,IAAMC,MAAM,GAAG;AACbC,EAAAA,UAAU,EAAE;AADC,CAAf;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAA2B;AAAA;;AAAA,MAAxBC,OAAwB,QAAxBA,OAAwB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAC7C;AAD6C,8BAENL,SAAS,CAACM,UAAV,EAFM;AAAA;AAAA,MAEtCC,OAFsC;AAAA,MAE3BC,eAF2B,6BAE3BA,eAF2B;;AAI7C,MAAMC,OAAO;AAAA,yEAAG,iBAAOC,MAAP,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZ;AACAd,cAAAA,KAAK,CAACa,MAAD,EAASC,IAAT,CAAL,CAHY,CAKZ;;AALY;AAAA,qBAMNX,SAAS,CAACY,MAAV,CAAiBF,MAAjB,CANM;;AAAA;AAQZ;AACAF,cAAAA,eAAe,CAACE,MAAD,CAAf,CATY,CAWZ;;AACAG,cAAAA,OAAO;AAZK;AAAA;;AAAA;AAAA;AAAA;AAcZf,cAAAA,KAAK,CAACG,MAAM,CAACC,UAAR,cAAL;;AAdY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPO,OAAO;AAAA;AAAA;AAAA,KAAb;;AAkBA,sBACE;AACE,IAAA,OAAO,EAAEL,OADX;AAEE,IAAA,KAAK,EAAC,cAFR;AAGE,IAAA,IAAI,EAAE,gBAAM,CAAE,CAHhB;AAIE,IAAA,QAAQ,EAAES,OAJZ;AAAA,2BAME;AAAO,MAAA,KAAK,EAAC,OAAb;AAAqB,MAAA,SAAS,EAAC,YAA/B;AAAA,gBACGN,OADH,aACGA,OADH,uBACGA,OAAO,CAAEO,GAAT,CAAa,UAACJ,MAAD,EAAY;AACxB,YAAMK,IAAI,GAAGhB,OAAO,CAACW,MAAM,CAACM,GAAR,CAApB;AAEA,4BACE;AAAwB,UAAA,KAAK,EAAEN,MAAM,CAACO,IAAtC;AAAA,iCACE,QAAC,IAAD,CAAM,QAAN;AACE,YAAA,IAAI,EAAEP,MAAM,CAACQ,IADf;AAEE,YAAA,QAAQ,EAAE,kBAACP,IAAD;AAAA,qBAAUF,OAAO,CAACC,MAAD,EAASC,IAAT,CAAjB;AAAA;AAFZ;AAAA;AAAA;AAAA;AAAA;AADF,WAAWD,MAAM,CAACS,IAAlB;AAAA;AAAA;AAAA;AAAA,iBADF;AAQD,OAXA;AADH;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,WADF;AAuBD,CA7CD;;GAAMhB,W;UAEmCH,SAAS,CAACM,U;;;KAF7CH,W;AA+CN,eAAeA,WAAf","sourcesContent":["import { Card, Modal, Space } from 'antd'\nimport merge from 'lodash.merge'\n\nimport { Error } from '../../../../assets/notification'\n\nimport Plugins from '../../../../../plugin'\n\nimport PluginAPI from '../../../../../../src/api/plugin'\n\nconst errors = {\n  mergeError: 'Unable to update the plugin'\n}\n\nconst CloudServer = ({ visible, onClosse }) => {\n  // Data\n  const [plugins, { mutateOnePlugin }] = PluginAPI.usePlugins()\n\n  const onMerge = async (plugin, diff) => {\n    try {\n      // Merge\n      merge(plugin, diff)\n\n      // API\n      await PluginAPI.update(plugin)\n\n      // Mutate one plugin\n      mutateOnePlugin(plugin)\n\n      // Close\n      onClose()\n    } catch (err) {\n      Error(errors.mergeError, err)\n    }\n  }\n\n  return (\n    <Modal\n      visible={visible}\n      title=\"Cloud server\"\n      onOk={() => {}}\n      onCancel={onClose}\n    >\n      <Space align=\"start\" direction=\"horizontal\">\n        {plugins?.map((plugin) => {\n          const base = Plugins[plugin.key]\n\n          return (\n            <Card key={plugin.uuid} title={plugin.name}>\n              <base.renderer\n                data={plugin.data}\n                onSelect={(diff) => onMerge(plugin, diff)}\n              />\n            </Card>\n          )\n        })}\n      </Space>\n    </Modal>\n  )\n}\n\nexport default CloudServer\n"]},"metadata":{},"sourceType":"module"}