{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport urlJoin from 'url-join';\nimport fetch from 'node-fetch';\n\nconst call = async configuration => {\n  const platform = configuration.platform;\n  const api = '/api/v2/';\n  const token = configuration.token;\n  const route = configuration.route;\n  const url = urlJoin('https://', platform, api, route);\n  const response = await new Promise((resolve, reject) => {\n    fetch(url, {\n      headers: {\n        Authorization: 'Token ' + token\n      }\n    }).then(res => resolve(res)).catch(err => reject(err));\n  });\n  const contentType = response.headers.get('Content-Type');\n  console.log(contentType);\n\n  if (contentType === 'application/json') {\n    const json = await response.json();\n\n    if (json.next) {\n      const nextResponse = await call(_objectSpread(_objectSpread({}, configuration), {}, {\n        route: json.next\n      }));\n      const nextJson = await nextResponse.json();\n      json.results = [...json.results, ...nextJson.results];\n    }\n\n    return json;\n  }\n\n  return response;\n};\n\nexport default call;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/plugin/rescale/src/lib/call.js"],"names":["urlJoin","fetch","call","configuration","platform","api","token","route","url","response","Promise","resolve","reject","headers","Authorization","then","res","catch","err","contentType","get","console","log","json","next","nextResponse","nextJson","results"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,KAAP,MAAkB,YAAlB;;AAEA,MAAMC,IAAI,GAAG,MAAOC,aAAP,IAAyB;AACpC,QAAMC,QAAQ,GAAGD,aAAa,CAACC,QAA/B;AACA,QAAMC,GAAG,GAAG,UAAZ;AACA,QAAMC,KAAK,GAAGH,aAAa,CAACG,KAA5B;AACA,QAAMC,KAAK,GAAGJ,aAAa,CAACI,KAA5B;AAEA,QAAMC,GAAG,GAAGR,OAAO,CAAC,UAAD,EAAaI,QAAb,EAAuBC,GAAvB,EAA4BE,KAA5B,CAAnB;AAEA,QAAME,QAAQ,GAAG,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtDX,IAAAA,KAAK,CAACO,GAAD,EAAM;AACTK,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,WAAWR;AADnB;AADA,KAAN,CAAL,CAKGS,IALH,CAKSC,GAAD,IAASL,OAAO,CAACK,GAAD,CALxB,EAMGC,KANH,CAMUC,GAAD,IAASN,MAAM,CAACM,GAAD,CANxB;AAOD,GARsB,CAAvB;AAUA,QAAMC,WAAW,GAAGV,QAAQ,CAACI,OAAT,CAAiBO,GAAjB,CAAqB,cAArB,CAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;;AAEA,MAAIA,WAAW,KAAK,kBAApB,EAAwC;AACtC,UAAMI,IAAI,GAAG,MAAMd,QAAQ,CAACc,IAAT,EAAnB;;AAEA,QAAIA,IAAI,CAACC,IAAT,EAAe;AACb,YAAMC,YAAY,GAAG,MAAMvB,IAAI,iCAC1BC,aAD0B;AAE7BI,QAAAA,KAAK,EAAEgB,IAAI,CAACC;AAFiB,SAA/B;AAKA,YAAME,QAAQ,GAAG,MAAMD,YAAY,CAACF,IAAb,EAAvB;AAEAA,MAAAA,IAAI,CAACI,OAAL,GAAe,CAAC,GAAGJ,IAAI,CAACI,OAAT,EAAkB,GAAGD,QAAQ,CAACC,OAA9B,CAAf;AACD;;AAED,WAAOJ,IAAP;AACD;;AAED,SAAOd,QAAP;AACD,CAvCD;;AAyCA,eAAeP,IAAf","sourcesContent":["import urlJoin from 'url-join'\nimport fetch from 'node-fetch'\n\nconst call = async (configuration) => {\n  const platform = configuration.platform\n  const api = '/api/v2/'\n  const token = configuration.token\n  const route = configuration.route\n\n  const url = urlJoin('https://', platform, api, route)\n\n  const response = await new Promise((resolve, reject) => {\n    fetch(url, {\n      headers: {\n        Authorization: 'Token ' + token\n      }\n    })\n      .then((res) => resolve(res))\n      .catch((err) => reject(err))\n  })\n\n  const contentType = response.headers.get('Content-Type')\n  console.log(contentType)\n\n  if (contentType === 'application/json') {\n    const json = await response.json()\n\n    if (json.next) {\n      const nextResponse = await call({\n        ...configuration,\n        route: json.next\n      })\n\n      const nextJson = await nextResponse.json()\n\n      json.results = [...json.results, ...nextJson.results]\n    }\n\n    return json\n  }\n\n  return response\n}\n\nexport default call\n"]},"metadata":{},"sourceType":"module"}