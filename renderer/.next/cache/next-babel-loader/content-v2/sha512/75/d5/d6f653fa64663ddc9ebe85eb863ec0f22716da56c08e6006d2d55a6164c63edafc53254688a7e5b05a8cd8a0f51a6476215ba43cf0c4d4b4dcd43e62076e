{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { Error } from '../../../../assets/notification';\nimport { AddButton } from '../../../../assets/button';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors material/add\n */\n\nconst errors = {\n  updateError: 'Unable to add the material'\n};\n/**\n * Add material\n * @param {Object} props Props\n */\n\nconst Add = ({\n  material,\n  project,\n  simulation,\n  part,\n  disabled,\n  close\n}) => {\n  // State\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // Data\n\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations);\n  /**\n   * On add\n   */\n\n  const onAdd = async () => {\n    setLoading(true);\n\n    try {\n      // Modify selection\n      const selection = part.solids.map(s => {\n        if (material.selected.includes(s.uuid)) return {\n          uuid: s.uuid,\n          label: s.number\n        };\n      }).filter(s => s);\n      material.selected = selection; // Set uuid\n\n      material.uuid = uuid(); // New simulation\n\n      const newSimulation = _objectSpread({}, simulation); // Update local\n\n\n      const materials = newSimulation.scheme.configuration.materials;\n      materials.values = [...(materials.values || []), material]; // Diff\n\n      const diff = _objectSpread(_objectSpread({}, materials), {}, {\n        done: true\n      }); // Update\n\n\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'materials'],\n        value: diff\n      }]); // Mutate\n\n      mutateOneSimulation(newSimulation); // Stop loading\n\n      setLoading(false); // Close\n\n      close();\n    } catch (err) {\n      Error(errors.updateError, err);\n      setLoading(false);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(AddButton, {\n    disabled: disabled,\n    loading: loading,\n    onAdd: onAdd\n  });\n};\n\nexport default Add;","map":null,"metadata":{},"sourceType":"module"}