{"ast":null,"code":"import { OrthographicCamera, PlaneBufferGeometry, Mesh } from '../../../build/three.module.js';\n\nfunction Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n  this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n  this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n  this.renderToScreen = false;\n}\n\nObject.assign(Pass.prototype, {\n  setSize: function ()\n  /* width, height */\n  {},\n  render: function ()\n  /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n}); // Helper for passes that need to fill the viewport with a single quad.\n// Important: It's actually a hack to put FullScreenQuad into the Pass namespace. This is only\n// done to make examples/js code work. Normally, FullScreenQuad should be exported\n// from this module like Pass.\n\nPass.FullScreenQuad = function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n\n  var FullScreenQuad = function (material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function () {\n      return this._mesh.material;\n    },\n    set: function (value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    dispose: function () {\n      this._mesh.geometry.dispose();\n    },\n    render: function (renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\n\nexport { Pass };","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/node_modules/three/examples/jsm/postprocessing/Pass.js"],"names":["OrthographicCamera","PlaneBufferGeometry","Mesh","Pass","enabled","needsSwap","clear","renderToScreen","Object","assign","prototype","setSize","render","console","error","FullScreenQuad","camera","geometry","material","_mesh","defineProperty","get","set","value","dispose","renderer"],"mappings":"AAAA,SACCA,kBADD,EAECC,mBAFD,EAGCC,IAHD,QAIO,gCAJP;;AAMA,SAASC,IAAT,GAAgB;AAEf;AACA,OAAKC,OAAL,GAAe,IAAf,CAHe,CAKf;;AACA,OAAKC,SAAL,GAAiB,IAAjB,CANe,CAQf;;AACA,OAAKC,KAAL,GAAa,KAAb,CATe,CAWf;;AACA,OAAKC,cAAL,GAAsB,KAAtB;AAEA;;AAEDC,MAAM,CAACC,MAAP,CAAeN,IAAI,CAACO,SAApB,EAA+B;AAE9BC,EAAAA,OAAO,EAAE;AAAW;AAAsB,GAAE,CAFd;AAI9BC,EAAAA,MAAM,EAAE;AAAW;AAAiE;AAEnFC,IAAAA,OAAO,CAACC,KAAR,CAAe,4DAAf;AAEA;AAR6B,CAA/B,E,CAYA;AAEA;AACA;AACA;;AAEAX,IAAI,CAACY,cAAL,GAAwB,YAAY;AAEnC,MAAIC,MAAM,GAAG,IAAIhB,kBAAJ,CAAwB,CAAE,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAE,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAAb;AACA,MAAIiB,QAAQ,GAAG,IAAIhB,mBAAJ,CAAyB,CAAzB,EAA4B,CAA5B,CAAf;;AAEA,MAAIc,cAAc,GAAG,UAAWG,QAAX,EAAsB;AAE1C,SAAKC,KAAL,GAAa,IAAIjB,IAAJ,CAAUe,QAAV,EAAoBC,QAApB,CAAb;AAEA,GAJD;;AAMAV,EAAAA,MAAM,CAACY,cAAP,CAAuBL,cAAc,CAACL,SAAtC,EAAiD,UAAjD,EAA6D;AAE5DW,IAAAA,GAAG,EAAE,YAAY;AAEhB,aAAO,KAAKF,KAAL,CAAWD,QAAlB;AAEA,KAN2D;AAQ5DI,IAAAA,GAAG,EAAE,UAAWC,KAAX,EAAmB;AAEvB,WAAKJ,KAAL,CAAWD,QAAX,GAAsBK,KAAtB;AAEA;AAZ2D,GAA7D;AAgBAf,EAAAA,MAAM,CAACC,MAAP,CAAeM,cAAc,CAACL,SAA9B,EAAyC;AAExCc,IAAAA,OAAO,EAAE,YAAY;AAEpB,WAAKL,KAAL,CAAWF,QAAX,CAAoBO,OAApB;AAEA,KANuC;AAQxCZ,IAAAA,MAAM,EAAE,UAAWa,QAAX,EAAsB;AAE7BA,MAAAA,QAAQ,CAACb,MAAT,CAAiB,KAAKO,KAAtB,EAA6BH,MAA7B;AAEA;AAZuC,GAAzC;AAgBA,SAAOD,cAAP;AAEA,CA7CqB,EAAtB;;AA+CA,SAASZ,IAAT","sourcesContent":["import {\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tMesh\n} from '../../../build/three.module.js';\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\n// Important: It's actually a hack to put FullScreenQuad into the Pass namespace. This is only\n// done to make examples/js code work. Normally, FullScreenQuad should be exported\n// from this module like Pass.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n"]},"metadata":{},"sourceType":"module"}