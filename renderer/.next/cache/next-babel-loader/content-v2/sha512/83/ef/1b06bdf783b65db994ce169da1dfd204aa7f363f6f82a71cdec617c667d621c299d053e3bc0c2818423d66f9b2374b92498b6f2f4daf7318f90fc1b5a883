{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _Layout from \"antd/lib/layout\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Menu from \"antd/lib/menu\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\n/** @module renderer/components/dashboard */\nimport { useRouter } from 'next/router';\nimport { useState, useEffect } from 'react';\nimport { AppstoreFilled, ShareAltOutlined, SettingFilled, QuestionCircleFilled, LogoutOutlined } from '@ant-design/icons';\nimport { Error } from '../assets/notification';\nimport Loading from '../../components/loading';\nimport Welcome from './welcome';\nimport Workspace from '../../components/workspace';\nimport Add from '../../components/workspace/add';\nimport Account from '../../components/account';\nimport Help from '../../components/help';\nimport UserAPI from '../../../src/api/user';\nimport WorkspaceAPI from '../../../src/api/workspace';\nimport logout from '../../../src/api/logout';\n/**\n * Errors\n */\n\nvar errors = {\n  logoutError: 'Unable to logout'\n};\n/**\n * Dashboard menu items\n */\n\nvar menuItems = {\n  workspaces: {\n    label: 'My Workspaces',\n    key: 'my_workspaces'\n  },\n  shared: {\n    label: 'Shared With Me',\n    key: 'shared'\n  },\n  account: {\n    label: 'Account Settings',\n    key: 'account'\n  },\n  help: {\n    label: 'I Need Help',\n    key: 'help'\n  },\n  logout: {\n    label: 'Logout',\n    key: 'logout'\n  }\n};\n/**\n * Dashboard\n */\n\nvar Dashboard = function Dashboard() {\n  // State\n  var _useState = useState(),\n      currentView = _useState[0],\n      setCurrentView = _useState[1];\n\n  var _useState2 = useState(),\n      currentWorkspace = _useState2[0],\n      setCurrentWorkspace = _useState2[1]; // Data\n\n\n  var _UserAPI$useUser = UserAPI.useUser(),\n      _UserAPI$useUser2 = _slicedToArray(_UserAPI$useUser, 2),\n      user = _UserAPI$useUser2[0],\n      _UserAPI$useUser2$ = _UserAPI$useUser2[1],\n      mutateUser = _UserAPI$useUser2$.mutateUser,\n      loadingUser = _UserAPI$useUser2$.loadingUser;\n\n  var _WorkspaceAPI$useWork = WorkspaceAPI.useWorkspaces(),\n      _WorkspaceAPI$useWork2 = _slicedToArray(_WorkspaceAPI$useWork, 1),\n      workspaces = _WorkspaceAPI$useWork2[0]; // Router\n\n\n  var router = useRouter();\n  var _router$query = router.query,\n      page = _router$query.page,\n      workspaceId = _router$query.workspaceId; // Not logged -> go to login page\n\n  useEffect(function () {\n    if (!loadingUser && !user) router.replace('/login');\n  }, [user, loadingUser]); // Update workspace\n\n  useEffect(function () {\n    if (currentWorkspace) {\n      var workspace = workspaces === null || workspaces === void 0 ? void 0 : workspaces.find(function (w) {\n        return w.id === currentWorkspace.id;\n      });\n      if (JSON.stringify(workspace) !== JSON.stringify(currentWorkspace)) setCurrentWorkspace(workspace);\n    }\n  }, [workspaces, currentWorkspace]); // Page effect\n\n  useEffect(function () {\n    if (workspaceId) {\n      var _workspace$owners, _workspace$users;\n\n      var workspace = workspaces === null || workspaces === void 0 ? void 0 : workspaces.find(function (w) {\n        return w.id === workspaceId;\n      });\n      if (workspace !== null && workspace !== void 0 && (_workspace$owners = workspace.owners) !== null && _workspace$owners !== void 0 && _workspace$owners.find(function (o) {\n        return o.id === user.id;\n      })) setCurrentView(menuItems.workspaces.key);else if (workspace !== null && workspace !== void 0 && (_workspace$users = workspace.users) !== null && _workspace$users !== void 0 && _workspace$users.find(function (u) {\n        return u.id === user.id;\n      })) setCurrentView(menuItems.shared.key);\n      setCurrentWorkspace(workspace);\n    } else if (page) {\n      setCurrentView(page);\n    }\n  }, [page, workspaceId]);\n  /**\n   * Menu selection\n   * @param {Object} data {item, key}\n   */\n\n  var onSelect = function onSelect(_ref) {\n    var item = _ref.item,\n        key = _ref.key;\n    var subMenuKey = item.props.subMenuKey.replace('-menu-', ''); // In a submenu\n\n    if (subMenuKey === menuItems.workspaces.key || subMenuKey === menuItems.shared.key) {\n      setCurrentView(subMenuKey);\n      router.replace({\n        pathname: '/dashboard',\n        query: {\n          page: subMenuKey\n        }\n      });\n      var workspace = workspaces[key];\n      setCurrentWorkspace(workspace);\n    } else {\n      if (key === menuItems.logout.key) handleLogout();else {\n        setCurrentView(key);\n        router.replace({\n          pathname: '/dashboard',\n          query: {\n            page: key\n          }\n        });\n      }\n    }\n  };\n  /**\n   * Logout\n   */\n\n\n  var handleLogout = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return logout();\n\n            case 3:\n              mutateUser({\n                user: null\n              });\n              router.push('/');\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              Error(errors.logoutError, _context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function handleLogout() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // My / Shared workspaces\n\n\n  var myWorkspaces = [];\n  var sharedWorkspaces = [];\n\n  if (user) {\n    workspaces === null || workspaces === void 0 ? void 0 : workspaces.forEach(function (workspace, index) {\n      if (workspace.owners && workspace.owners.find(function (o) {\n        return o.id === user.id;\n      })) myWorkspaces.push( /*#__PURE__*/_jsx(_Menu.Item, {\n        children: workspace.name\n      }, index));else if (workspace.users && workspace.users.find(function (u) {\n        return u.id === user.id;\n      })) sharedWorkspaces.push( /*#__PURE__*/_jsx(_Menu.Item, {\n        children: workspace.name\n      }, index));\n    });\n  }\n  /**\n   * On workspaces\n   */\n\n\n  var onWorkspaces = function onWorkspaces() {\n    if (!(myWorkspaces !== null && myWorkspaces !== void 0 && myWorkspaces.length)) {\n      setCurrentView();\n    }\n  };\n\n  var displayed;\n\n  switch (currentView) {\n    case menuItems.workspaces.key:\n    case menuItems.shared.key:\n      displayed = /*#__PURE__*/_jsx(Workspace, {\n        workspace: currentWorkspace\n      });\n      break;\n\n    case menuItems.account.key:\n      displayed = /*#__PURE__*/_jsx(Account, {});\n      break;\n\n    case menuItems.help.key:\n      displayed = /*#__PURE__*/_jsx(Help, {});\n      break;\n\n    default:\n      displayed = /*#__PURE__*/_jsx(Welcome, {});\n  }\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: loadingUser || !user ? /*#__PURE__*/_jsx(Loading, {}) : /*#__PURE__*/_jsxs(_Layout, {\n      children: [/*#__PURE__*/_jsxs(_Layout.Sider, {\n        theme: \"light\",\n        width: \"250\",\n        className: \"Dashboard-sider\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsx(\"img\", {\n            src: \"/images/logo_enora.svg\"\n          })\n        }), /*#__PURE__*/_jsxs(_Menu, {\n          className: \"Dashboard-menu\",\n          theme: \"light\",\n          onClick: onSelect,\n          defaultOpenKeys: [menuItems.workspaces.key, menuItems.shared.key],\n          mode: \"inline\",\n          children: [/*#__PURE__*/_jsxs(_Menu.SubMenu, {\n            icon: /*#__PURE__*/_jsx(AppstoreFilled, {}),\n            title: menuItems.workspaces.label,\n            onTitleClick: onWorkspaces,\n            children: [myWorkspaces, /*#__PURE__*/_jsx(\"li\", {\n              id: \"Add-workspace-button\",\n              children: /*#__PURE__*/_jsx(Add, {}, \"add\")\n            })]\n          }, menuItems.workspaces.key), /*#__PURE__*/_jsx(_Menu.SubMenu, {\n            icon: /*#__PURE__*/_jsx(ShareAltOutlined, {}),\n            title: menuItems.shared.label,\n            children: sharedWorkspaces\n          }, menuItems.shared.key), /*#__PURE__*/_jsx(_Menu.Item, {\n            icon: /*#__PURE__*/_jsx(SettingFilled, {}),\n            children: menuItems.account.label\n          }, menuItems.account.key), /*#__PURE__*/_jsx(_Menu.Item, {\n            icon: /*#__PURE__*/_jsx(QuestionCircleFilled, {}),\n            children: menuItems.help.label\n          }, menuItems.help.key), /*#__PURE__*/_jsx(_Menu.Divider, {}), /*#__PURE__*/_jsx(_Menu.Item, {\n            danger: true,\n            icon: /*#__PURE__*/_jsx(LogoutOutlined, {}),\n            children: menuItems.logout.label\n          }, menuItems.logout.key)]\n        })]\n      }), /*#__PURE__*/_jsx(_Layout.Content, {\n        className: \"no-scroll\",\n        children: displayed\n      })]\n    })\n  });\n};\n\nexport default Dashboard;","map":null,"metadata":{},"sourceType":"module"}