{"ast":null,"code":"import { Clock, LinearFilter, Mesh, OrthographicCamera, PlaneBufferGeometry, RGBAFormat, Vector2, WebGLRenderTarget } from '../../../build/three.module.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from '../postprocessing/ShaderPass.js';\nimport { MaskPass } from '../postprocessing/MaskPass.js';\nimport { ClearMaskPass } from '../postprocessing/MaskPass.js';\n\nvar EffectComposer = function EffectComposer(renderer, renderTarget) {\n  this.renderer = renderer;\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat\n    };\n    var size = renderer.getSize(new Vector2());\n    this._pixelRatio = renderer.getPixelRatio();\n    this._width = size.width;\n    this._height = size.height;\n    renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n    renderTarget.texture.name = 'EffectComposer.rt1';\n  } else {\n    this._pixelRatio = 1;\n    this._width = renderTarget.width;\n    this._height = renderTarget.height;\n  }\n\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = 'EffectComposer.rt2';\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n  this.renderToScreen = true;\n  this.passes = []; // dependencies\n\n  if (CopyShader === undefined) {\n    console.error('THREE.EffectComposer relies on CopyShader');\n  }\n\n  if (ShaderPass === undefined) {\n    console.error('THREE.EffectComposer relies on ShaderPass');\n  }\n\n  this.copyPass = new ShaderPass(CopyShader);\n  this.clock = new Clock();\n};\n\n_c = EffectComposer;\nObject.assign(EffectComposer.prototype, {\n  swapBuffers: function swapBuffers() {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n  addPass: function addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  },\n  insertPass: function insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  },\n  removePass: function removePass(pass) {\n    var index = this.passes.indexOf(pass);\n\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  },\n  isLastEnabledPass: function isLastEnabledPass(passIndex) {\n    for (var i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  render: function render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    var currentRenderTarget = this.renderer.getRenderTarget();\n    var maskActive = false;\n    var pass,\n        i,\n        il = this.passes.length;\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          var context = this.renderer.getContext();\n          var stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  },\n  reset: function reset(renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n  setSize: function setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    var effectiveWidth = this._width * this._pixelRatio;\n    var effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  },\n  setPixelRatio: function setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n});\n\nvar Pass = function Pass() {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n  this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n  this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n  this.renderToScreen = false;\n};\n\n_c2 = Pass;\nObject.assign(Pass.prototype, {\n  setSize: function setSize()\n  /* width, height */\n  {},\n  render: function render()\n  /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n}); // Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = function () {\n  var camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var geometry = new PlaneBufferGeometry(2, 2);\n\n  var FullScreenQuad = function FullScreenQuad(material) {\n    this._mesh = new Mesh(geometry, material);\n  };\n\n  Object.defineProperty(FullScreenQuad.prototype, 'material', {\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  });\n  Object.assign(FullScreenQuad.prototype, {\n    dispose: function dispose() {\n      this._mesh.geometry.dispose();\n    },\n    render: function render(renderer) {\n      renderer.render(this._mesh, camera);\n    }\n  });\n  return FullScreenQuad;\n}();\n\nexport { EffectComposer, Pass };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EffectComposer\");\n$RefreshReg$(_c2, \"Pass\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/node_modules/three/examples/jsm/postprocessing/EffectComposer.js"],"names":["Clock","LinearFilter","Mesh","OrthographicCamera","PlaneBufferGeometry","RGBAFormat","Vector2","WebGLRenderTarget","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","renderer","renderTarget","undefined","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","console","error","copyPass","clock","Object","assign","prototype","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","Pass","clear","FullScreenQuad","camera","geometry","material","_mesh","defineProperty","get","set","value"],"mappings":"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","sourcesContent":["import {\n\tClock,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from '../../../build/three.module.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from '../postprocessing/ShaderPass.js';\nimport { MaskPass } from '../postprocessing/MaskPass.js';\nimport { ClearMaskPass } from '../postprocessing/MaskPass.js';\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tremovePass: function ( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n"]},"metadata":{},"sourceType":"module"}