{"ast":null,"code":"import _Tooltip from \"antd/lib/tooltip\";\nimport _Avatar from \"antd/lib/avatar\";\nimport _Typography from \"antd/lib/typography\";\nimport _Empty from \"antd/lib/empty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Generate color (HEX format) from string\n * @memberof module:renderer/components/project\n * @param {string} str String\n */\nconst stringToHex = str => {\n  let hash = 0;\n\n  for (let i = 0; i < str.length; ++i) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let colour = '#';\n\n  for (let i = 0; i < 3; i++) {\n    const value = hash >> i * 8 & 0xff;\n    colour += ('00' + value.toString(16)).substr(-2);\n  }\n\n  return colour;\n};\n/**\n * Project data\n * @memberof module:renderer/components/project\n * @param {Object} project Project\n * @param {Function} setTitle Set title\n */\n\n\nconst Data = (project, filter, setTitle) => {\n  var _project$title, _project$title$toLowe;\n\n  // Check\n  if (!project) return null; // Filter\n\n  if (filter && !((_project$title = project.title) !== null && _project$title !== void 0 && (_project$title$toLowe = _project$title.toLowerCase()) !== null && _project$title$toLowe !== void 0 && _project$title$toLowe.includes(filter.toLowerCase()))) return null; // Snapshot\n\n  const snapshot = project.avatar ? /*#__PURE__*/_jsx(\"img\", {\n    src: project && project.avatar,\n    style: {\n      cursor: 'pointer'\n    },\n    width: \"100\",\n    height: \"100\"\n  }) : /*#__PURE__*/_jsx(_Empty, {\n    image: _Empty.PRESENTED_IMAGE_SIMPLE,\n    style: {\n      cursor: 'pointer'\n    },\n    description: 'No preview',\n    imageStyle: {\n      width: 150\n    },\n    description: /*#__PURE__*/_jsx(\"span\", {\n      children: \"No projects yet\"\n    })\n  }); // Title\n\n  const title = /*#__PURE__*/_jsx(_Typography.Paragraph, {\n    editable: {\n      maxLength: 50,\n      onChange: setTitle\n    },\n    children: project.title\n  }); // Owners avatars\n\n\n  const owners = project && project.owners && project.owners.map(owner => {\n    const avatar = owner.avatar && Buffer.from(owner.avatar).toString();\n    let name = '';\n    let abbrev = '';\n\n    if (owner.firstname || owner.lastname) {\n      name = owner.firstname + ' ' + owner.lastname;\n      abbrev = (owner.firstname && owner.firstname[0]) + (owner.lastname && owner.lastname[0]);\n    } else {\n      name = owner.email;\n      abbrev = owner.email[0];\n    }\n\n    return /*#__PURE__*/_jsx(_Tooltip, {\n      title: name,\n      children: /*#__PURE__*/_jsx(_Avatar, {\n        src: avatar,\n        style: {\n          backgroundColor: stringToHex(name)\n        },\n        children: abbrev.toUpperCase()\n      })\n    }, owner.id);\n  }); // Users avatars\n\n  const users = project && project.users && project.users.map(user => {\n    const avatar = user.avatar && Buffer.from(user.avatar).toString();\n    let name = '';\n    let abbrev = '';\n\n    if (user.firstname || user.lastname) {\n      name = user.firstname + ' ' + user.lastname;\n      abbrev = (user.firstname && user.firstname[0]) + (user.lastname && user.lastname[0]);\n    } else {\n      name = user.email;\n      abbrev = user.email[0];\n    }\n\n    return /*#__PURE__*/_jsx(_Tooltip, {\n      title: name,\n      children: /*#__PURE__*/_jsx(_Avatar, {\n        src: avatar,\n        style: {\n          backgroundColor: stringToHex(name)\n        },\n        children: abbrev.toUpperCase()\n      })\n    }, user.id);\n  });\n  /**\n   * Not a render\n   */\n\n  return _objectSpread(_objectSpread({}, project), {}, {\n    key: project.id,\n    snapshot: snapshot,\n    title: title,\n    owners: /*#__PURE__*/_jsx(_Avatar.Group, {\n      children: owners\n    }),\n    users: /*#__PURE__*/_jsx(_Avatar.Group, {\n      children: users\n    })\n  });\n};\n\nexport default Data; // TODO\n// import {\n//   ShareAltOutlined,\n//   DeleteOutlined\n//   // SyncOutlined,\n//   // CloudSyncOutlined\n// } from '@ant-design/icons'\n// const tags = (\n//   <Space>\n//     <Tag icon={<SyncOutlined spin />} color=\"processing\">\n//       Running\n//     </Tag>\n//     <Tag icon={<CloudSyncOutlined />} color=\"success\">\n//       Backed-up in the cloud\n//     </Tag>\n//   </Space>\n// )\n// const sharedWith = (\n//   <Avatar.Group\n//     maxCount={3}\n//     maxStyle={{ color: '#f56a00', backgroundColor: '#fde3cf' }}\n//   >\n//     <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n//     <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>\n//     <Tooltip title=\"Ant User\" placement=\"top\">\n//       <Avatar style={{ backgroundColor: '#87d068' }}>F</Avatar>\n//     </Tooltip>\n//     <Avatar style={{ backgroundColor: '#1890ff' }}>S</Avatar>\n//   </Avatar.Group>\n// )","map":null,"metadata":{},"sourceType":"module"}