{"ast":null,"code":"import _Layout from \"antd/lib/layout\";\nimport _Collapse from \"antd/lib/collapse\";\nimport _Card from \"antd/lib/card\";\nimport _Space from \"antd/lib/space\";\nimport _Select from \"antd/lib/select\";\nimport _Typography from \"antd/lib/typography\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/parameters/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { Error } from '../../../assets/notification';\nimport Formula from '../../../assets/formula';\nimport SimulationAPI from '../../../../../src/api/simulation';\n/**\n * Errors simulation/parameters\n * @memberof module:renderer/components/project/simulation\n */\n\nconst errors = {\n  updateError: 'Unable to update the simulation'\n};\n/**\n * Parameters\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nconst Parameters = ({\n  project,\n  simulation\n}) => {\n  // State\n  const {\n    0: values,\n    1: setValues\n  } = useState({}); // Data\n\n  const subScheme = simulation === null || simulation === void 0 ? void 0 : simulation.scheme.configuration.parameters;\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations); // Effect\n\n  useEffect(() => {\n    const newSimulation = _objectSpread({}, simulation); // Update local\n\n\n    Object.keys(values).forEach(key => {\n      const deepValues = values[key];\n      deepValues.forEach((value, index) => {\n        if (value) newSimulation.scheme.configuration.parameters[key].children[index].value = value;\n      });\n    }); // Diff\n\n    const diff = _objectSpread(_objectSpread({}, newSimulation.scheme.configuration.parameters), {}, {\n      done: true\n    }); // Update\n\n\n    SimulationAPI.update({\n      id: simulation.id\n    }, [{\n      key: 'scheme',\n      type: 'json',\n      method: 'diff',\n      path: ['configuration', 'parameters'],\n      value: diff\n    }]).then(() => {\n      // Mutate\n      mutateOneSimulation(newSimulation);\n    }).catch(err => {\n      Error(errors.updateError, err);\n    });\n  }, [values]);\n  /**\n   * On parameter change\n   * @param {string} key Parameter key\n   * @param {number} index Children index\n   * @param {string} value Value\n   */\n\n  const onChange = (key, index, value) => {\n    const deepValues = values[key] || [];\n    deepValues[index] = value;\n\n    const newValues = _objectSpread(_objectSpread({}, values), {}, {\n      [key]: deepValues\n    });\n\n    setValues(newValues);\n  }; // Build parameters\n\n\n  const parameters = [];\n  const advanced = [];\n  Object.keys(subScheme).forEach(key => {\n    if (key === 'index' || key === 'title' || key == 'done') return;\n    const parameter = subScheme[key];\n    const components = parameter === null || parameter === void 0 ? void 0 : parameter.children.map((child, index) => {\n      if (child.htmlEntity === 'formula') {\n        return /*#__PURE__*/_jsxDEV(_Typography.Text, {\n          children: [child.label, \":\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(Formula, {\n            defaultValue: child.value === undefined ? child.default : child.value,\n            onChange: value => onChange(key, index, value),\n            unit: child.unit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, key + '&' + index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this);\n      } else if (child.htmlEntity === 'select') {\n        return /*#__PURE__*/_jsxDEV(_Typography.Text, {\n          children: [child.label, \":\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(_Select, {\n            options: child.options,\n            defaultValue: child.value || child.default,\n            onChange: value => onChange(key, index, value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, key + '&' + index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this);\n      }\n    });\n\n    if (parameter !== null && parameter !== void 0 && parameter.advanced) {\n      advanced.push( /*#__PURE__*/_jsxDEV(_Card, {\n        title: parameter === null || parameter === void 0 ? void 0 : parameter.label,\n        children: /*#__PURE__*/_jsxDEV(_Space, {\n          direction: \"vertical\",\n          children: components\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this));\n    } else {\n      parameters.push( /*#__PURE__*/_jsxDEV(_Card, {\n        title: parameter === null || parameter === void 0 ? void 0 : parameter.label,\n        children: /*#__PURE__*/_jsxDEV(_Space, {\n          direction: \"vertical\",\n          children: components\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this));\n    }\n  });\n  /**\n   * Render\n   */\n\n  return /*#__PURE__*/_jsxDEV(_Layout, {\n    children: /*#__PURE__*/_jsxDEV(_Layout.Content, {\n      children: [parameters, /*#__PURE__*/_jsxDEV(_Collapse, {\n        children: /*#__PURE__*/_jsxDEV(_Collapse.Panel, {\n          header: \"Advanced\",\n          children: advanced\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Parameters;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/parameters/index.js"],"names":["useState","useEffect","Error","Formula","SimulationAPI","errors","updateError","Parameters","project","simulation","values","setValues","subScheme","scheme","configuration","parameters","mutateOneSimulation","useSimulations","simulations","newSimulation","Object","keys","forEach","key","deepValues","value","index","children","diff","done","update","id","type","method","path","then","catch","err","onChange","newValues","advanced","parameter","components","map","child","htmlEntity","label","undefined","default","unit","options","push"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Card, Collapse, Layout, Select, Space, Typography } from 'antd'\n\nimport { Error } from '../../../assets/notification'\nimport Formula from '../../../assets/formula'\n\nimport SimulationAPI from '../../../../../src/api/simulation'\n\n/**\n * Errors simulation/parameters\n * @memberof module:renderer/components/project/simulation\n */\nconst errors = {\n  updateError: 'Unable to update the simulation'\n}\n\n/**\n * Parameters\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\nconst Parameters = ({ project, simulation }) => {\n  // State\n  const [values, setValues] = useState({})\n\n  // Data\n  const subScheme = simulation?.scheme.configuration.parameters\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n\n  // Effect\n  useEffect(() => {\n    const newSimulation = { ...simulation }\n\n    // Update local\n    Object.keys(values).forEach((key) => {\n      const deepValues = values[key]\n      deepValues.forEach((value, index) => {\n        if (value)\n          newSimulation.scheme.configuration.parameters[key].children[\n            index\n          ].value = value\n      })\n    })\n\n    // Diff\n    const diff = {\n      ...newSimulation.scheme.configuration.parameters,\n      done: true\n    }\n\n    // Update\n    SimulationAPI.update({ id: simulation.id }, [\n      {\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'parameters'],\n        value: diff\n      }\n    ])\n      .then(() => {\n        // Mutate\n        mutateOneSimulation(newSimulation)\n      })\n      .catch((err) => {\n        Error(errors.updateError, err)\n      })\n  }, [values])\n\n  /**\n   * On parameter change\n   * @param {string} key Parameter key\n   * @param {number} index Children index\n   * @param {string} value Value\n   */\n  const onChange = (key, index, value) => {\n    const deepValues = values[key] || []\n    deepValues[index] = value\n    const newValues = {\n      ...values,\n      [key]: deepValues\n    }\n\n    setValues(newValues)\n  }\n\n  // Build parameters\n  const parameters = []\n  const advanced = []\n  Object.keys(subScheme).forEach((key) => {\n    if (key === 'index' || key === 'title' || key == 'done') return\n\n    const parameter = subScheme[key]\n\n    const components = parameter?.children.map((child, index) => {\n      if (child.htmlEntity === 'formula') {\n        return (\n          <Typography.Text key={key + '&' + index}>\n            {child.label}:<br />\n            <Formula\n              defaultValue={\n                child.value === undefined ? child.default : child.value\n              }\n              onChange={(value) => onChange(key, index, value)}\n              unit={child.unit}\n            />\n          </Typography.Text>\n        )\n      } else if (child.htmlEntity === 'select') {\n        return (\n          <Typography.Text key={key + '&' + index}>\n            {child.label}:<br />\n            <Select\n              options={child.options}\n              defaultValue={child.value || child.default}\n              onChange={(value) => onChange(key, index, value)}\n            />\n          </Typography.Text>\n        )\n      }\n    })\n\n    if (parameter?.advanced) {\n      advanced.push(\n        <Card key={key} title={parameter?.label}>\n          <Space direction=\"vertical\">{components}</Space>\n        </Card>\n      )\n    } else {\n      parameters.push(\n        <Card key={key} title={parameter?.label}>\n          <Space direction=\"vertical\">{components}</Space>\n        </Card>\n      )\n    }\n  })\n\n  /**\n   * Render\n   */\n  return (\n    <Layout>\n      <Layout.Content>\n        {parameters}\n        <Collapse>\n          <Collapse.Panel header=\"Advanced\">{advanced}</Collapse.Panel>\n        </Collapse>\n      </Layout.Content>\n    </Layout>\n  )\n}\n\nexport default Parameters\n"]},"metadata":{},"sourceType":"module"}