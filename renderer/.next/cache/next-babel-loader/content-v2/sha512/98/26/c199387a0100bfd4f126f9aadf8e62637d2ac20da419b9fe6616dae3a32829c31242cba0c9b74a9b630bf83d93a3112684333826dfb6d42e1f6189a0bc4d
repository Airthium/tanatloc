{"ast":null,"code":"import _Card from \"antd/lib/card\";\nimport _Row from \"antd/lib/row\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Space from \"antd/lib/space\";\nimport _Button from \"antd/lib/button\";\nimport _Form from \"antd/lib/form\";\nimport _Input from \"antd/lib/input\";\nimport _Col from \"antd/lib/col\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _notification from \"antd/lib/notification\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { Error } from '../../assets/notification';\nimport UserAPI from '../../../../src/api/user';\n/**\n * Errors account/password\n * @memeberof module:renderer/components/account\n */\n\nconst errors = {\n  updateError: 'Unable to update the password',\n  mismatch: 'Password and confirmation mismatch',\n  invalid: 'Current password not valid'\n};\n/**\n * Password\n * @memeberof module:renderer/components/account\n */\n\nconst Password = () => {\n  // State\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // Data\n\n  const [user] = UserAPI.useUser(); // Layout\n\n  const layout = {\n    labelCol: {\n      span: 5\n    },\n    wrapperCol: {\n      span: 8\n    }\n  };\n  const buttonLayout = {\n    wrapperCol: {\n      offset: 5,\n      span: 8\n    }\n  };\n  /**\n   * On finish\n   * @param {Object} data Data\n   */\n\n  const onFinish = async data => {\n    setLoading(true);\n\n    try {\n      // Check current password\n      const current = await UserAPI.check({\n        username: user.email,\n        password: data.password\n      });\n\n      if (current.valid) {\n        // Change password\n        if (data.newPassword === data.passwordConfirm) {\n          await UserAPI.update([{\n            type: 'crypt',\n            key: 'password',\n            value: data.newPassword\n          }]);\n        } else {\n          _notification.error({\n            message: errors.mismatch\n          });\n        }\n      } else {\n        notificaton.error({\n          message: errors.invalid\n        });\n      }\n    } catch (err) {\n      Error(errors.updateError, err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(_Card, {\n    title: \"Your Password\",\n    children: /*#__PURE__*/_jsxs(_Row, {\n      children: [/*#__PURE__*/_jsx(_Col, {\n        span: 4\n      }), /*#__PURE__*/_jsx(_Col, {\n        span: 20,\n        children: /*#__PURE__*/_jsxs(_Form, _objectSpread(_objectSpread({}, layout), {}, {\n          initialValues: {\n            password: '******',\n            newPassword: '******',\n            passwordConfirm: '******'\n          },\n          onFinish: onFinish,\n          name: \"passwordForm\",\n          children: [/*#__PURE__*/_jsx(_Form.Item, {\n            label: \"Current password\",\n            name: \"password\",\n            children: /*#__PURE__*/_jsx(_Input.Password, {})\n          }), /*#__PURE__*/_jsx(_Form.Item, {\n            label: \"New password\",\n            name: \"newPassword\",\n            children: /*#__PURE__*/_jsx(_Input.Password, {})\n          }), /*#__PURE__*/_jsx(_Form.Item, {\n            label: \"Password confirmation\",\n            name: \"passwordConfirm\",\n            children: /*#__PURE__*/_jsx(_Input.Password, {})\n          }), /*#__PURE__*/_jsx(_Form.Item, _objectSpread(_objectSpread({}, buttonLayout), {}, {\n            style: {\n              marginBottom: 'unset'\n            },\n            children: /*#__PURE__*/_jsx(_Space, {\n              children: /*#__PURE__*/_jsx(_Button, {\n                type: \"primary\",\n                htmlType: \"submit\",\n                loading: loading,\n                children: \"Modify password\"\n              })\n            })\n          }))]\n        }))\n      })]\n    })\n  });\n};\n\nexport default Password;","map":null,"metadata":{},"sourceType":"module"}