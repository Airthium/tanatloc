{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/add/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { Error } from '../../../../assets/notification';\nimport { AddButton } from '../../../../assets/button';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors material/add\n */\n\nconst errors = {\n  updateError: 'Unable to add the material'\n};\n/**\n * Add material\n * @param {Object} props Props\n */\n\nconst Add = ({\n  material,\n  project,\n  simulation,\n  part,\n  disabled,\n  close\n}) => {\n  // State\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // Data\n\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations);\n  /**\n   * On add\n   */\n\n  const onAdd = async () => {\n    setLoading(true);\n\n    try {\n      // Modify selection\n      const selection = part.solids.map(s => {\n        if (material.selected.includes(s.uuid)) return {\n          uuid: s.uuid,\n          label: s.number\n        };\n      }).filter(s => s);\n      material.selected = selection; // Set uuid\n\n      material.uuid = uuid(); // New simulation\n\n      const newSimulation = _objectSpread({}, simulation); // Update local\n\n\n      const materials = newSimulation.scheme.configuration.materials;\n      materials.values = [...(materials.values || []), material]; // Diff\n\n      const diff = _objectSpread(_objectSpread({}, materials), {}, {\n        done: true\n      }); // Update\n\n\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'materials'],\n        value: diff\n      }]); // Mutate\n\n      mutateOneSimulation(newSimulation); // Stop loading\n\n      setLoading(false); // Close\n\n      close();\n    } catch (err) {\n      Error(errors.updateError, err);\n      setLoading(false);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(AddButton, {\n    disabled: disabled,\n    loading: loading,\n    onAdd: onAdd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Add;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/materials/add/index.js"],"names":["useState","v4","uuid","Error","AddButton","SimulationAPI","errors","updateError","Add","material","project","simulation","part","disabled","close","loading","setLoading","mutateOneSimulation","useSimulations","simulations","onAdd","selection","solids","map","s","selected","includes","label","number","filter","newSimulation","materials","scheme","configuration","values","diff","done","update","id","key","type","method","path","value","err"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,SAASC,KAAT,QAAsB,iCAAtB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAEA,OAAOC,aAAP,MAA0B,sCAA1B;AAEA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,WAAW,EAAE;AADA,CAAf;AAIA;AACA;AACA;AACA;;AACA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,OAAZ;AAAqBC,EAAAA,UAArB;AAAiCC,EAAAA,IAAjC;AAAuCC,EAAAA,QAAvC;AAAiDC,EAAAA;AAAjD,CAAD,KAA8D;AACxE;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBhB,QAAQ,CAAC,KAAD,CAAtC,CAFwE,CAIxE;;AACA,QAAM,GAAG;AAAEiB,IAAAA;AAAF,GAAH,IAA8BZ,aAAa,CAACa,cAAd,CAClCR,OADkC,aAClCA,OADkC,uBAClCA,OAAO,CAAES,WADyB,CAApC;AAIA;AACF;AACA;;AACE,QAAMC,KAAK,GAAG,YAAY;AACxBJ,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACF;AACA,YAAMK,SAAS,GAAGT,IAAI,CAACU,MAAL,CACfC,GADe,CACVC,CAAD,IAAO;AACV,YAAIf,QAAQ,CAACgB,QAAT,CAAkBC,QAAlB,CAA2BF,CAAC,CAACtB,IAA7B,CAAJ,EACE,OAAO;AACLA,UAAAA,IAAI,EAAEsB,CAAC,CAACtB,IADH;AAELyB,UAAAA,KAAK,EAAEH,CAAC,CAACI;AAFJ,SAAP;AAIH,OAPe,EAQfC,MARe,CAQPL,CAAD,IAAOA,CARC,CAAlB;AASAf,MAAAA,QAAQ,CAACgB,QAAT,GAAoBJ,SAApB,CAXE,CAaF;;AACAZ,MAAAA,QAAQ,CAACP,IAAT,GAAgBA,IAAI,EAApB,CAdE,CAgBF;;AACA,YAAM4B,aAAa,qBAAQnB,UAAR,CAAnB,CAjBE,CAmBF;;;AACA,YAAMoB,SAAS,GAAGD,aAAa,CAACE,MAAd,CAAqBC,aAArB,CAAmCF,SAArD;AACAA,MAAAA,SAAS,CAACG,MAAV,GAAmB,CAAC,IAAIH,SAAS,CAACG,MAAV,IAAoB,EAAxB,CAAD,EAA8BzB,QAA9B,CAAnB,CArBE,CAuBF;;AACA,YAAM0B,IAAI,mCACLJ,SADK;AAERK,QAAAA,IAAI,EAAE;AAFE,QAAV,CAxBE,CA6BF;;;AACA,YAAM/B,aAAa,CAACgC,MAAd,CAAqB;AAAEC,QAAAA,EAAE,EAAE3B,UAAU,CAAC2B;AAAjB,OAArB,EAA4C,CAChD;AACEC,QAAAA,GAAG,EAAE,QADP;AAEEC,QAAAA,IAAI,EAAE,MAFR;AAGEC,QAAAA,MAAM,EAAE,MAHV;AAIEC,QAAAA,IAAI,EAAE,CAAC,eAAD,EAAkB,WAAlB,CAJR;AAKEC,QAAAA,KAAK,EAAER;AALT,OADgD,CAA5C,CAAN,CA9BE,CAwCF;;AACAlB,MAAAA,mBAAmB,CAACa,aAAD,CAAnB,CAzCE,CA2CF;;AACAd,MAAAA,UAAU,CAAC,KAAD,CAAV,CA5CE,CA8CF;;AACAF,MAAAA,KAAK;AACN,KAhDD,CAgDE,OAAO8B,GAAP,EAAY;AACZzC,MAAAA,KAAK,CAACG,MAAM,CAACC,WAAR,EAAqBqC,GAArB,CAAL;AACA5B,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAvDD;AAyDA;AACF;AACA;;;AACE,sBAAO,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAEH,QAArB;AAA+B,IAAA,OAAO,EAAEE,OAAxC;AAAiD,IAAA,KAAK,EAAEK;AAAxD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAzED;;AA2EA,eAAeZ,GAAf","sourcesContent":["import { useState } from 'react'\nimport { v4 as uuid } from 'uuid'\n\nimport { Error } from '../../../../assets/notification'\nimport { AddButton } from '../../../../assets/button'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\n/**\n * Errors material/add\n */\nconst errors = {\n  updateError: 'Unable to add the material'\n}\n\n/**\n * Add material\n * @param {Object} props Props\n */\nconst Add = ({ material, project, simulation, part, disabled, close }) => {\n  // State\n  const [loading, setLoading] = useState(false)\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n\n  /**\n   * On add\n   */\n  const onAdd = async () => {\n    setLoading(true)\n\n    try {\n      // Modify selection\n      const selection = part.solids\n        .map((s) => {\n          if (material.selected.includes(s.uuid))\n            return {\n              uuid: s.uuid,\n              label: s.number\n            }\n        })\n        .filter((s) => s)\n      material.selected = selection\n\n      // Set uuid\n      material.uuid = uuid()\n\n      // New simulation\n      const newSimulation = { ...simulation }\n\n      // Update local\n      const materials = newSimulation.scheme.configuration.materials\n      materials.values = [...(materials.values || []), material]\n\n      // Diff\n      const diff = {\n        ...materials,\n        done: true\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'materials'],\n          value: diff\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(newSimulation)\n\n      // Stop loading\n      setLoading(false)\n\n      // Close\n      close()\n    } catch (err) {\n      Error(errors.updateError, err)\n      setLoading(false)\n    }\n  }\n\n  /**\n   * Render\n   */\n  return <AddButton disabled={disabled} loading={loading} onAdd={onAdd} />\n}\n\nexport default Add\n"]},"metadata":{},"sourceType":"module"}