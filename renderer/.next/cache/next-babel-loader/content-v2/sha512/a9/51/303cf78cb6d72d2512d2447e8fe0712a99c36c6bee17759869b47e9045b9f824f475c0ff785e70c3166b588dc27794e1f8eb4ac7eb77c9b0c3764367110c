{"ast":null,"code":"import call from './call';\nconst key = 'rescale';\n\nconst init = async configuration => {\n  // Get coretypes\n  const coreTypes = await call({\n    platform: configuration.platform.value,\n    token: configuration.token.value,\n    route: 'coretypes/?page_size=50'\n  }); // Check token\n\n  if (coreTypes.detail === 'Invalid token.') throw new Error(coreTypes.detail);\n  console.log(coreTypes.results);\n  return {\n    inUseConfiguration: {\n      coreTypes: {\n        options: coreTypes.results.map(r => ({\n          value: r.code,\n          label: r.name + ' (' + r.cores.pop() + ' cores)'\n        }))\n      }\n    }\n  };\n};\n\nexport default {\n  key,\n  init\n};","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/plugin/rescale/src/lib/index.js"],"names":["call","key","init","configuration","coreTypes","platform","value","token","route","detail","Error","console","log","results","inUseConfiguration","options","map","r","code","label","name","cores","pop"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AAEA,MAAMC,GAAG,GAAG,SAAZ;;AAEA,MAAMC,IAAI,GAAG,MAAOC,aAAP,IAAyB;AACpC;AACA,QAAMC,SAAS,GAAG,MAAMJ,IAAI,CAAC;AAC3BK,IAAAA,QAAQ,EAAEF,aAAa,CAACE,QAAd,CAAuBC,KADN;AAE3BC,IAAAA,KAAK,EAAEJ,aAAa,CAACI,KAAd,CAAoBD,KAFA;AAG3BE,IAAAA,KAAK,EAAE;AAHoB,GAAD,CAA5B,CAFoC,CAQpC;;AACA,MAAIJ,SAAS,CAACK,MAAV,KAAqB,gBAAzB,EAA2C,MAAM,IAAIC,KAAJ,CAAUN,SAAS,CAACK,MAApB,CAAN;AAE3CE,EAAAA,OAAO,CAACC,GAAR,CAAYR,SAAS,CAACS,OAAtB;AAEA,SAAO;AACLC,IAAAA,kBAAkB,EAAE;AAClBV,MAAAA,SAAS,EAAE;AACTW,QAAAA,OAAO,EAAEX,SAAS,CAACS,OAAV,CAAkBG,GAAlB,CAAuBC,CAAD,KAAQ;AACrCX,UAAAA,KAAK,EAAEW,CAAC,CAACC,IAD4B;AAErCC,UAAAA,KAAK,EAAEF,CAAC,CAACG,IAAF,GAAS,IAAT,GAAgBH,CAAC,CAACI,KAAF,CAAQC,GAAR,EAAhB,GAAgC;AAFF,SAAR,CAAtB;AADA;AADO;AADf,GAAP;AAUD,CAvBD;;AAyBA,eAAe;AAAErB,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAf","sourcesContent":["import call from './call'\n\nconst key = 'rescale'\n\nconst init = async (configuration) => {\n  // Get coretypes\n  const coreTypes = await call({\n    platform: configuration.platform.value,\n    token: configuration.token.value,\n    route: 'coretypes/?page_size=50'\n  })\n\n  // Check token\n  if (coreTypes.detail === 'Invalid token.') throw new Error(coreTypes.detail)\n\n  console.log(coreTypes.results)\n\n  return {\n    inUseConfiguration: {\n      coreTypes: {\n        options: coreTypes.results.map((r) => ({\n          value: r.code,\n          label: r.name + ' (' + r.cores.pop() + ' cores)'\n        }))\n      }\n    }\n  }\n}\n\nexport default { key, init }\n"]},"metadata":{},"sourceType":"module"}