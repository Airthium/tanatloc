{"ast":null,"code":"import _Layout from \"antd/lib/layout\";\nimport _PageHeader from \"antd/lib/page-header\";\nimport _Tooltip from \"antd/lib/tooltip\";\nimport _Avatar from \"antd/lib/avatar\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _Row from \"antd/lib/row\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Col from \"antd/lib/col\";\nimport _Input from \"antd/lib/input\";\nimport _Divider from \"antd/lib/divider\";\nimport _Typography from \"antd/lib/typography\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @module renderer/components/workspace */\nimport { useState } from 'react';\nimport { Error } from '../assets/notification'; // import { ShareAltOutlined } from '@ant-design/icons'\n\nimport Empty from './empty';\nimport Delete from './delete';\nimport ProjectAdd from '../project/add';\nimport ProjectList from '../project/list';\nimport WorkspaceAPI from '../../../src/api/workspace';\nconst errors = {\n  updateError: 'Unable to update the workspace'\n};\n/**\n * Workspace\n * @param {Object} props Props\n */\n\nconst Workspace = ({\n  workspace\n}) => {\n  // State\n  const {\n    0: filter,\n    1: setFilter\n  } = useState(); // Data\n\n  const [, {\n    mutateOneWorkspace\n  }] = WorkspaceAPI.useWorkspaces();\n  /**\n   * Set name\n   * @param {string} name Name\n   */\n\n  const setName = async name => {\n    try {\n      // Update\n      await WorkspaceAPI.update({\n        id: workspace.id\n      }, [{\n        key: 'name',\n        value: name\n      }]); // Mutate workspace\n\n      mutateOneWorkspace(_objectSpread(_objectSpread({}, workspace), {}, {\n        name\n      }));\n    } catch (err) {\n      Error(errors.updateError, err);\n    }\n  };\n  /**\n   * On search\n   * @param {Object} e Event\n   */\n\n\n  const onSearch = e => {\n    setFilter(e.target.value);\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(_Layout, {\n    className: \"Workspace\",\n    children: workspace ? /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(_PageHeader, {\n        backIcon: false,\n        title: /*#__PURE__*/_jsx(_Typography.Title, {\n          level: 2,\n          className: \"pageheader-name\",\n          editable: {\n            onChange: setName\n          },\n          children: workspace.name\n        }),\n        extra: [\n        /*#__PURE__*/\n        // <Button key=\"share\" icon={<ShareAltOutlined />}>\n        //   Share it\n        // </Button>,\n        _jsx(Delete, {\n          workspace: workspace\n        }, \"delete\")],\n        footer: /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(_Divider, {\n            className: \"Tanatloc-divider\"\n          }), /*#__PURE__*/_jsxs(_Row, {\n            gutter: [16, 16],\n            justify: \"center\",\n            children: [/*#__PURE__*/_jsx(_Col, {\n              span: 12,\n              children: /*#__PURE__*/_jsx(_Input, {\n                addonBefore: \"Search\",\n                placeholder: \"Enter a project name (case sensitive)\",\n                value: filter,\n                onChange: onSearch\n              })\n            }), /*#__PURE__*/_jsx(_Col, {\n              children: /*#__PURE__*/_jsx(ProjectAdd, {\n                workspace: workspace\n              })\n            })]\n          })]\n        }),\n        children: workspace.users && /*#__PURE__*/_jsxs(\"div\", {\n          className: \"Workspace-share\",\n          children: [/*#__PURE__*/_jsx(\"span\", {\n            style: {\n              marginRight: '10px'\n            },\n            children: \"This workspace is shared with:\"\n          }), /*#__PURE__*/_jsx(_Avatar.Group, {\n            children: workspace.users.map(user => {\n              return /*#__PURE__*/_jsx(_Tooltip, {\n                title: user,\n                placement: \"bottom\",\n                children: /*#__PURE__*/_jsx(_Avatar, {\n                  style: {\n                    backgroundColor: '#023E8A'\n                  },\n                  children: user\n                })\n              }, user);\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(_Layout.Content, {\n        children: /*#__PURE__*/_jsx(ProjectList, {\n          workspace: workspace,\n          filter: filter\n        })\n      })]\n    }) : /*#__PURE__*/_jsx(Empty, {})\n  });\n};\n\nexport default Workspace;","map":null,"metadata":{},"sourceType":"module"}