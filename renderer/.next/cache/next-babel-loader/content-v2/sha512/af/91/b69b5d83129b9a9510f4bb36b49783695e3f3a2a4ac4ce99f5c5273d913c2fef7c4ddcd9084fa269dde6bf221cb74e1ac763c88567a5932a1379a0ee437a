{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport urlJoin from 'url-join';\nimport fetch from 'node-fetch';\n\nconst call = async configuration => {\n  const platform = configuration.platform;\n  const api = '/api/v2/';\n  const token = configuration.token;\n  const route = configuration.route;\n  const url = urlJoin('https://', platform, api, route);\n  const response = await new Promise((resolve, reject) => {\n    fetch(url, {\n      headers: {\n        Authorization: 'Token ' + token\n      }\n    }).then(res => resolve(res)).catch(err => reject(err));\n  });\n  const contentType = response.headers.get('Content-Type');\n  console.log(contentType);\n\n  if (contentType === 'application/json') {\n    const json = await response.json();\n\n    if (json.next) {\n      const nextResponse = await call(_objectSpread(_objectSpread({}, configuration), {}, {\n        route: json.next\n      }));\n      const nextJson = await nextResponse.json();\n      json.results = [...json.results, ...nextJson.results];\n    }\n\n    return json;\n  }\n\n  return response;\n};\n\nexport default call;","map":null,"metadata":{},"sourceType":"module"}