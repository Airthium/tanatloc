{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/edit/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { Error } from '../../../../assets/notification';\nimport { EditButton } from '../../../../assets/button';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors boundaryCondition/edit\n */\n\nvar errors = {\n  updateError: 'Unable to edit the boundary condition'\n};\n/**\n * Edit boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nvar Edit = function Edit(_ref) {\n  _s();\n\n  var disabled = _ref.disabled,\n      boundaryCondition = _ref.boundaryCondition,\n      oldBoundaryCondition = _ref.oldBoundaryCondition,\n      project = _ref.project,\n      simulation = _ref.simulation,\n      part = _ref.part,\n      close = _ref.close;\n\n  // State\n  var _useState = useState(),\n      loading = _useState[0],\n      setLoading = _useState[1]; // Data\n\n\n  var _SimulationAPI$useSim = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations),\n      _SimulationAPI$useSim2 = _slicedToArray(_SimulationAPI$useSim, 2),\n      mutateOneSimulation = _SimulationAPI$useSim2[1].mutateOneSimulation;\n  /**\n   * On edit\n   */\n\n\n  var onEdit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newSimulation, boundaryConditions, type, oldType, index, selection, _index, diff;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n              // New simulation\n              newSimulation = _objectSpread({}, simulation);\n              boundaryConditions = newSimulation.scheme.configuration.boundaryConditions; // Get type key\n\n              type = boundaryCondition.type.key; // Get old type\n\n              oldType = oldBoundaryCondition.type.key;\n\n              if (oldType !== type) {\n                index = boundaryConditions[oldType].values.findIndex(function (b) {\n                  return b.uuid === oldBoundaryCondition.uuid;\n                });\n                boundaryConditions[oldType].values = [].concat(_toConsumableArray(boundaryConditions[oldType].values.slice(0, index)), _toConsumableArray(boundaryConditions[oldType].values.slice(index + 1)));\n              } // Modify selection\n\n\n              selection = part.faces.map(function (f) {\n                if (boundaryCondition.selected.includes(f.uuid)) return {\n                  uuid: f.uuid,\n                  label: f.number\n                };\n              }).filter(function (s) {\n                return s;\n              });\n              boundaryCondition.selected = selection; // Update local\n\n              if (oldType !== type) {\n                boundaryConditions[type].values = [].concat(_toConsumableArray(boundaryConditions[type].values), [boundaryCondition]);\n              } else {\n                _index = boundaryConditions[type].values.findIndex(function (b) {\n                  return b.uuid === boundaryCondition.uuid;\n                });\n                boundaryConditions[type].values = [].concat(_toConsumableArray(boundaryConditions[type].values.slice(0, _index)), [boundaryCondition], _toConsumableArray(boundaryConditions[type].values.slice(_index + 1)));\n              } // Diff\n\n\n              diff = _objectSpread({}, boundaryConditions); // Update\n\n              _context.next = 13;\n              return SimulationAPI.update({\n                id: simulation.id\n              }, [{\n                key: 'scheme',\n                type: 'json',\n                method: 'diff',\n                path: ['configuration', 'boundaryConditions'],\n                value: diff\n              }]);\n\n            case 13:\n              // Mutate\n              mutateOneSimulation(newSimulation); // Close\n\n              close();\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](1);\n              Error(errors.updateError, _context.t0);\n\n            case 20:\n              _context.prev = 20;\n              setLoading(false);\n              return _context.finish(20);\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 17, 20, 23]]);\n    }));\n\n    return function onEdit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(EditButton, {\n    disabled: disabled,\n    loading: loading,\n    onEdit: onEdit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Edit, \"lB8uRqy6FxzCrckHoPcNtYg0gzY=\", false, function () {\n  return [SimulationAPI.useSimulations];\n});\n\n_c = Edit;\nexport default Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/edit/index.js"],"names":["useState","Error","EditButton","SimulationAPI","errors","updateError","Edit","disabled","boundaryCondition","oldBoundaryCondition","project","simulation","part","close","loading","setLoading","useSimulations","simulations","mutateOneSimulation","onEdit","newSimulation","boundaryConditions","scheme","configuration","type","key","oldType","index","values","findIndex","b","uuid","slice","selection","faces","map","f","selected","includes","label","number","filter","s","diff","update","id","method","path","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nimport { Error } from '../../../../assets/notification'\nimport { EditButton } from '../../../../assets/button'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\n/**\n * Errors boundaryCondition/edit\n */\nconst errors = {\n  updateError: 'Unable to edit the boundary condition'\n}\n\n/**\n * Edit boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\nconst Edit = ({\n  disabled,\n  boundaryCondition,\n  oldBoundaryCondition,\n  project,\n  simulation,\n  part,\n  close\n}) => {\n  // State\n  const [loading, setLoading] = useState()\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n\n  /**\n   * On edit\n   */\n  const onEdit = async () => {\n    setLoading(true)\n\n    try {\n      // New simulation\n      const newSimulation = { ...simulation }\n      const boundaryConditions =\n        newSimulation.scheme.configuration.boundaryConditions\n\n      // Get type key\n      const type = boundaryCondition.type.key\n\n      // Get old type\n      const oldType = oldBoundaryCondition.type.key\n\n      if (oldType !== type) {\n        const index = boundaryConditions[oldType].values.findIndex(\n          (b) => b.uuid === oldBoundaryCondition.uuid\n        )\n        boundaryConditions[oldType].values = [\n          ...boundaryConditions[oldType].values.slice(0, index),\n          ...boundaryConditions[oldType].values.slice(index + 1)\n        ]\n      }\n\n      // Modify selection\n      const selection = part.faces\n        .map((f) => {\n          if (boundaryCondition.selected.includes(f.uuid))\n            return {\n              uuid: f.uuid,\n              label: f.number\n            }\n        })\n        .filter((s) => s)\n      boundaryCondition.selected = selection\n\n      // Update local\n      if (oldType !== type) {\n        boundaryConditions[type].values = [\n          ...boundaryConditions[type].values,\n          boundaryCondition\n        ]\n      } else {\n        const index = boundaryConditions[type].values.findIndex(\n          (b) => b.uuid === boundaryCondition.uuid\n        )\n        boundaryConditions[type].values = [\n          ...boundaryConditions[type].values.slice(0, index),\n          boundaryCondition,\n          ...boundaryConditions[type].values.slice(index + 1)\n        ]\n      }\n\n      // Diff\n      const diff = {\n        ...boundaryConditions\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'boundaryConditions'],\n          value: diff\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(newSimulation)\n\n      // Close\n      close()\n    } catch (err) {\n      Error(errors.updateError, err)\n    } finally {\n      setLoading(false)\n    }\n  }\n  /**\n   * Render\n   */\n  return <EditButton disabled={disabled} loading={loading} onEdit={onEdit} />\n}\n\nexport default Edit\n"]},"metadata":{},"sourceType":"module"}