{"ast":null,"code":"import _Space from \"antd/lib/space\";\nimport _Typography from \"antd/lib/typography\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _Modal from \"antd/lib/modal\";\nimport _Layout from \"antd/lib/layout\";\nimport _Menu from \"antd/lib/menu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @module renderer/components/project/simulation */\nimport { useState, useEffect } from 'react';\nimport { WarningOutlined } from '@ant-design/icons';\nimport { addedDiff, updatedDiff } from 'deep-object-diff';\nimport merge from 'lodash.merge';\nimport { Error } from '../../assets/notification';\nimport Panel from '../panel';\nimport About from './about';\nimport Geometry from './geometry';\nimport Materials from './materials';\nimport Parameters from './parameters';\nimport BoundaryConditions from './boundaryConditions';\nimport Run from './run';\nimport SimulationAPI from '../../../../src/api/simulation';\nimport models from '../../../../models';\n/**\n * Errors\n */\n\nconst errors = {\n  updateError: 'Unable to update the simulation'\n};\n/**\n * Simulation Selector\n * @param {Object} props Props\n */\n\nconst Selector = ({\n  visible,\n  onOk,\n  onCancel\n}) => {\n  // State\n  const {\n    0: current,\n    1: setCurrent\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  /**\n   * On select\n   * @param {Object} data Data { key }\n   */\n\n  const onSelect = ({\n    key\n  }) => {\n    const model = models.find(m => m.algorithm === key);\n    setCurrent(_objectSpread({}, model)); // TODO review that\n  };\n  /**\n   * On create\n   */\n\n\n  const onCreate = async () => {\n    setLoading(true);\n    if (current) onOk(current);\n    setLoading(false);\n  };\n  /**\n   * MatJax\n   */\n\n\n  useEffect(() => {\n    var _window$MathJax;\n\n    (_window$MathJax = window.MathJax) === null || _window$MathJax === void 0 ? void 0 : _window$MathJax.typeset();\n  }, [current]);\n  /**\n   * Render\n   */\n\n  return /*#__PURE__*/_jsxDEV(_Modal, {\n    visible: visible,\n    title: \"Create simulation\",\n    okText: \"Create\",\n    okButtonProps: {\n      loading: loading\n    },\n    onOk: onCreate,\n    onCancel: onCancel,\n    children: /*#__PURE__*/_jsxDEV(_Layout, {\n      children: [/*#__PURE__*/_jsxDEV(_Layout.Sider, {\n        theme: \"light\",\n        children: /*#__PURE__*/_jsxDEV(_Menu, {\n          mode: \"inline\",\n          onSelect: onSelect,\n          children: models.map(model => {\n            return /*#__PURE__*/_jsxDEV(_Menu.Item, {\n              children: model.name\n            }, model.algorithm, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Layout.Content, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: current === null || current === void 0 ? void 0 : current.description\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n/**\n * Simulation\n * @param {Object} props Props\n */\n\n\nconst Simulation = ({\n  project,\n  simulation,\n  type,\n  part,\n  onClose\n}) => {\n  // State\n  const {\n    0: needUpdate,\n    1: setNeedUpdate\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: title,\n    1: setTitle\n  } = useState(); // Data\n\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations); // Check model update\n\n  useEffect(() => {\n    const currentModel = models.find(m => {\n      var _simulation$scheme;\n\n      return m.algorithm === (simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme = simulation.scheme) === null || _simulation$scheme === void 0 ? void 0 : _simulation$scheme.algorithm);\n    });\n\n    if (currentModel && simulation !== null && simulation !== void 0 && simulation.scheme) {\n      const added = addedDiff(simulation.scheme, currentModel);\n      const updated = updatedDiff(simulation.scheme, currentModel);\n      if (Object.keys(added).length || Object.keys(updated).length) setNeedUpdate(true);else setNeedUpdate(false);\n    }\n  }, [simulation]);\n  /**\n   * Simulation effect\n   */\n\n  useEffect(() => {\n    var _simulation$scheme2, _configuration$geomet;\n\n    setVisible(simulation);\n    const configuration = simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme2 = simulation.scheme) === null || _simulation$scheme2 === void 0 ? void 0 : _simulation$scheme2.configuration; // Check if a part is visible\n\n    if (configuration && !configuration.part && (_configuration$geomet = configuration.geometry) !== null && _configuration$geomet !== void 0 && _configuration$geomet.file) {\n      const newSimulation = _objectSpread({}, simulation); // Update local\n\n\n      newSimulation.scheme.configuration.part = configuration.geometry.file; // Update simulation\n\n      SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'part'],\n        value: configuration.geometry.file\n      }]).then(() => {\n        // Mutate\n        mutateOneSimulation(newSimulation);\n      }).catch(err => {\n        Error(errors.updateError, err);\n      });\n    }\n\n    const subScheme = configuration === null || configuration === void 0 ? void 0 : configuration[type];\n    setTitle(subScheme ? subScheme.title : 'About');\n  }, [simulation, type]);\n  /**\n   * On update\n   */\n\n  const onUpdate = async () => {\n    setLoading(true);\n\n    try {\n      // Current model\n      const currentModel = models.find(m => {\n        var _simulation$scheme3;\n\n        return m.algorithm === (simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme3 = simulation.scheme) === null || _simulation$scheme3 === void 0 ? void 0 : _simulation$scheme3.algorithm);\n      }); // New simulation\n\n      const newSimulation = _objectSpread({}, simulation); // Merge\n\n\n      merge(newSimulation.scheme, currentModel); // Update simulation\n\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        value: newSimulation.scheme\n      }]); // Mutate\n\n      mutateOneSimulation(newSimulation);\n    } catch (err) {\n      Error(errors.updateError, err);\n    }\n\n    setLoading(false);\n    setNeedUpdate(false);\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(_Modal, {\n      title: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(WarningOutlined, {\n          style: {\n            color: 'orange',\n            marginRight: '5px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), \"Update\"]\n      }, void 0, true),\n      visible: needUpdate,\n      onOk: onUpdate,\n      okText: \"Yes\",\n      confirmLoading: loading,\n      onCancel: () => setNeedUpdate(false),\n      cancelText: \"No\",\n      children: /*#__PURE__*/_jsxDEV(_Space, {\n        direction: \"vertical\",\n        children: [/*#__PURE__*/_jsxDEV(_Typography.Text, {\n          children: \"Your model needs an update!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(_Typography.Text, {\n          strong: true,\n          children: \"Update now?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Panel, {\n      visible: visible,\n      title: title,\n      onClose: onClose,\n      children: [type === 'about' && /*#__PURE__*/_jsxDEV(About, {\n        project: project,\n        simulation: simulation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this), type === 'geometry' && /*#__PURE__*/_jsxDEV(Geometry, {\n        project: project,\n        simulation: simulation,\n        part: part\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), type === 'parameters' && /*#__PURE__*/_jsxDEV(Parameters, {\n        project: project,\n        simulation: simulation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), type === 'materials' && /*#__PURE__*/_jsxDEV(Materials, {\n        project: project,\n        simulation: simulation,\n        part: part,\n        setVisible: setVisible\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), type === 'boundaryConditions' && /*#__PURE__*/_jsxDEV(BoundaryConditions, {\n        project: project,\n        simulation: simulation,\n        part: part,\n        setVisible: setVisible\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this), type === 'run' && /*#__PURE__*/_jsxDEV(Run, {\n        project: project,\n        simulation: simulation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nSimulation.Selector = Selector;\nexport default Simulation;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/index.js"],"names":["useState","useEffect","WarningOutlined","addedDiff","updatedDiff","merge","Error","Panel","About","Geometry","Materials","Parameters","BoundaryConditions","Run","SimulationAPI","models","errors","updateError","Selector","visible","onOk","onCancel","current","setCurrent","loading","setLoading","onSelect","key","model","find","m","algorithm","onCreate","window","MathJax","typeset","map","name","__html","description","Simulation","project","simulation","type","part","onClose","needUpdate","setNeedUpdate","setVisible","title","setTitle","mutateOneSimulation","useSimulations","simulations","currentModel","scheme","added","updated","Object","keys","length","configuration","geometry","file","newSimulation","update","id","method","path","value","then","catch","err","subScheme","onUpdate","color","marginRight"],"mappings":"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","sourcesContent":["/** @module renderer/components/project/simulation */\n\nimport { useState, useEffect } from 'react'\nimport { Layout, Menu, Modal, Space, Typography } from 'antd'\nimport { WarningOutlined } from '@ant-design/icons'\nimport { addedDiff, updatedDiff } from 'deep-object-diff'\nimport merge from 'lodash.merge'\n\nimport { Error } from '../../assets/notification'\n\nimport Panel from '../panel'\n\nimport About from './about'\nimport Geometry from './geometry'\nimport Materials from './materials'\nimport Parameters from './parameters'\nimport BoundaryConditions from './boundaryConditions'\nimport Run from './run'\n\nimport SimulationAPI from '../../../../src/api/simulation'\n\nimport models from '../../../../models'\n\n/**\n * Errors\n */\nconst errors = {\n  updateError: 'Unable to update the simulation'\n}\n\n/**\n * Simulation Selector\n * @param {Object} props Props\n */\nconst Selector = ({ visible, onOk, onCancel }) => {\n  // State\n  const [current, setCurrent] = useState()\n  const [loading, setLoading] = useState(false)\n\n  /**\n   * On select\n   * @param {Object} data Data { key }\n   */\n  const onSelect = ({ key }) => {\n    const model = models.find((m) => m.algorithm === key)\n    setCurrent({ ...model })\n    // TODO review that\n  }\n\n  /**\n   * On create\n   */\n  const onCreate = async () => {\n    setLoading(true)\n    if (current) onOk(current)\n    setLoading(false)\n  }\n\n  /**\n   * MatJax\n   */\n  useEffect(() => {\n    window.MathJax?.typeset()\n  }, [current])\n\n  /**\n   * Render\n   */\n  return (\n    <Modal\n      visible={visible}\n      title=\"Create simulation\"\n      okText=\"Create\"\n      okButtonProps={{ loading: loading }}\n      onOk={onCreate}\n      onCancel={onCancel}\n    >\n      <Layout>\n        <Layout.Sider theme=\"light\">\n          <Menu mode=\"inline\" onSelect={onSelect}>\n            {models.map((model) => {\n              return <Menu.Item key={model.algorithm}>{model.name}</Menu.Item>\n            })}\n          </Menu>\n        </Layout.Sider>\n        <Layout.Content>\n          <div dangerouslySetInnerHTML={{ __html: current?.description }} />\n        </Layout.Content>\n      </Layout>\n    </Modal>\n  )\n}\n\n/**\n * Simulation\n * @param {Object} props Props\n */\nconst Simulation = ({ project, simulation, type, part, onClose }) => {\n  // State\n  const [needUpdate, setNeedUpdate] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [visible, setVisible] = useState(false)\n  const [title, setTitle] = useState()\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n\n  // Check model update\n  useEffect(() => {\n    const currentModel = models.find(\n      (m) => m.algorithm === simulation?.scheme?.algorithm\n    )\n\n    if (currentModel && simulation?.scheme) {\n      const added = addedDiff(simulation.scheme, currentModel)\n      const updated = updatedDiff(simulation.scheme, currentModel)\n\n      if (Object.keys(added).length || Object.keys(updated).length)\n        setNeedUpdate(true)\n      else setNeedUpdate(false)\n    }\n  }, [simulation])\n\n  /**\n   * Simulation effect\n   */\n  useEffect(() => {\n    setVisible(simulation)\n    const configuration = simulation?.scheme?.configuration\n\n    // Check if a part is visible\n    if (configuration && !configuration.part && configuration.geometry?.file) {\n      const newSimulation = { ...simulation }\n\n      // Update local\n      newSimulation.scheme.configuration.part = configuration.geometry.file\n\n      // Update simulation\n      SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'part'],\n          value: configuration.geometry.file\n        }\n      ])\n        .then(() => {\n          // Mutate\n          mutateOneSimulation(newSimulation)\n        })\n        .catch((err) => {\n          Error(errors.updateError, err)\n        })\n    }\n\n    const subScheme = configuration?.[type]\n    setTitle(subScheme ? subScheme.title : 'About')\n  }, [simulation, type])\n\n  /**\n   * On update\n   */\n  const onUpdate = async () => {\n    setLoading(true)\n\n    try {\n      // Current model\n      const currentModel = models.find(\n        (m) => m.algorithm === simulation?.scheme?.algorithm\n      )\n\n      // New simulation\n      const newSimulation = { ...simulation }\n\n      // Merge\n      merge(newSimulation.scheme, currentModel)\n\n      // Update simulation\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          value: newSimulation.scheme\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(newSimulation)\n    } catch (err) {\n      Error(errors.updateError, err)\n    }\n\n    setLoading(false)\n    setNeedUpdate(false)\n  }\n\n  /**\n   * Render\n   */\n  return (\n    <>\n      <Modal\n        title={\n          <>\n            <WarningOutlined style={{ color: 'orange', marginRight: '5px' }} />\n            Update\n          </>\n        }\n        visible={needUpdate}\n        onOk={onUpdate}\n        okText=\"Yes\"\n        confirmLoading={loading}\n        onCancel={() => setNeedUpdate(false)}\n        cancelText=\"No\"\n      >\n        <Space direction=\"vertical\">\n          <Typography.Text>Your model needs an update!</Typography.Text>\n          <Typography.Text strong>Update now?</Typography.Text>\n        </Space>\n      </Modal>\n      <Panel visible={visible} title={title} onClose={onClose}>\n        {type === 'about' && (\n          <About project={project} simulation={simulation} />\n        )}\n        {type === 'geometry' && (\n          <Geometry project={project} simulation={simulation} part={part} />\n        )}\n        {type === 'parameters' && (\n          <Parameters project={project} simulation={simulation} />\n        )}\n        {type === 'materials' && (\n          <Materials\n            project={project}\n            simulation={simulation}\n            part={part}\n            setVisible={setVisible}\n          />\n        )}\n        {type === 'boundaryConditions' && (\n          <BoundaryConditions\n            project={project}\n            simulation={simulation}\n            part={part}\n            setVisible={setVisible}\n          />\n        )}\n        {type === 'run' && <Run project={project} simulation={simulation} />}\n      </Panel>\n    </>\n  )\n}\n\nSimulation.Selector = Selector\n\nexport default Simulation\n"]},"metadata":{},"sourceType":"module"}