{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/add/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { Error } from '../../../../assets/notification';\nimport { AddButton } from '../../../../assets/button';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors boundaryCondition/add\n */\n\nconst errors = {\n  updateError: 'Unable to add the boundary condition'\n};\n/**\n * Add boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nconst Add = ({\n  disabled,\n  boundaryCondition,\n  project,\n  simulation,\n  part,\n  close\n}) => {\n  // State\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // Data\n\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations);\n  /**\n   * on Add\n   */\n\n  const onAdd = async () => {\n    setLoading(true);\n\n    try {\n      // Get type key\n      const type = boundaryCondition.type.key; // Modify selection\n\n      const selection = part.faces.map(f => {\n        if (boundaryCondition.selected.includes(f.uuid)) return {\n          uuid: f.uuid,\n          label: f.number\n        };\n      }).filter(s => s);\n      boundaryCondition.selected = selection; // Set uuid\n\n      boundaryCondition.uuid = uuid(); // New simulation\n\n      const newSimulation = _objectSpread({}, simulation); // Update local\n\n\n      const boundaryConditions = newSimulation.scheme.configuration.boundaryConditions;\n      boundaryConditions[type].values = [...(boundaryConditions[type].values || []), boundaryCondition]; // Diff\n\n      const diff = _objectSpread(_objectSpread({}, boundaryConditions), {}, {\n        done: true\n      }); // Update\n\n\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'boundaryConditions'],\n        value: diff\n      }]); // Mutate\n\n      mutateOneSimulation(newSimulation); // Stop loading\n\n      setLoading(false); // Close\n\n      close();\n    } catch (err) {\n      Error(errors.updateError, err);\n      setLoading(false);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(AddButton, {\n    disabled: disabled,\n    loading: loading,\n    onAdd: onAdd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Add;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/add/index.js"],"names":["useState","v4","uuid","Error","AddButton","SimulationAPI","errors","updateError","Add","disabled","boundaryCondition","project","simulation","part","close","loading","setLoading","mutateOneSimulation","useSimulations","simulations","onAdd","type","key","selection","faces","map","f","selected","includes","label","number","filter","s","newSimulation","boundaryConditions","scheme","configuration","values","diff","done","update","id","method","path","value","err"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,SAASC,KAAT,QAAsB,iCAAtB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAEA,OAAOC,aAAP,MAA0B,sCAA1B;AAEA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,WAAW,EAAE;AADA,CAAf;AAIA;AACA;AACA;AACA;AACA;;AACA,MAAMC,GAAG,GAAG,CAAC;AACXC,EAAAA,QADW;AAEXC,EAAAA,iBAFW;AAGXC,EAAAA,OAHW;AAIXC,EAAAA,UAJW;AAKXC,EAAAA,IALW;AAMXC,EAAAA;AANW,CAAD,KAON;AACJ;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBhB,QAAQ,CAAC,KAAD,CAAtC,CAFI,CAIJ;;AACA,QAAM,GAAG;AAAEiB,IAAAA;AAAF,GAAH,IAA8BZ,aAAa,CAACa,cAAd,CAClCP,OADkC,aAClCA,OADkC,uBAClCA,OAAO,CAAEQ,WADyB,CAApC;AAIA;AACF;AACA;;AACE,QAAMC,KAAK,GAAG,YAAY;AACxBJ,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACF;AACA,YAAMK,IAAI,GAAGX,iBAAiB,CAACW,IAAlB,CAAuBC,GAApC,CAFE,CAIF;;AACA,YAAMC,SAAS,GAAGV,IAAI,CAACW,KAAL,CACfC,GADe,CACVC,CAAD,IAAO;AACV,YAAIhB,iBAAiB,CAACiB,QAAlB,CAA2BC,QAA3B,CAAoCF,CAAC,CAACxB,IAAtC,CAAJ,EACE,OAAO;AACLA,UAAAA,IAAI,EAAEwB,CAAC,CAACxB,IADH;AAEL2B,UAAAA,KAAK,EAAEH,CAAC,CAACI;AAFJ,SAAP;AAIH,OAPe,EAQfC,MARe,CAQPC,CAAD,IAAOA,CARC,CAAlB;AASAtB,MAAAA,iBAAiB,CAACiB,QAAlB,GAA6BJ,SAA7B,CAdE,CAgBF;;AACAb,MAAAA,iBAAiB,CAACR,IAAlB,GAAyBA,IAAI,EAA7B,CAjBE,CAmBF;;AACA,YAAM+B,aAAa,qBAAQrB,UAAR,CAAnB,CApBE,CAsBF;;;AACA,YAAMsB,kBAAkB,GACtBD,aAAa,CAACE,MAAd,CAAqBC,aAArB,CAAmCF,kBADrC;AAEAA,MAAAA,kBAAkB,CAACb,IAAD,CAAlB,CAAyBgB,MAAzB,GAAkC,CAChC,IAAIH,kBAAkB,CAACb,IAAD,CAAlB,CAAyBgB,MAAzB,IAAmC,EAAvC,CADgC,EAEhC3B,iBAFgC,CAAlC,CAzBE,CA8BF;;AACA,YAAM4B,IAAI,mCACLJ,kBADK;AAERK,QAAAA,IAAI,EAAE;AAFE,QAAV,CA/BE,CAoCF;;;AACA,YAAMlC,aAAa,CAACmC,MAAd,CAAqB;AAAEC,QAAAA,EAAE,EAAE7B,UAAU,CAAC6B;AAAjB,OAArB,EAA4C,CAChD;AACEnB,QAAAA,GAAG,EAAE,QADP;AAEED,QAAAA,IAAI,EAAE,MAFR;AAGEqB,QAAAA,MAAM,EAAE,MAHV;AAIEC,QAAAA,IAAI,EAAE,CAAC,eAAD,EAAkB,oBAAlB,CAJR;AAKEC,QAAAA,KAAK,EAAEN;AALT,OADgD,CAA5C,CAAN,CArCE,CA+CF;;AACArB,MAAAA,mBAAmB,CAACgB,aAAD,CAAnB,CAhDE,CAkDF;;AACAjB,MAAAA,UAAU,CAAC,KAAD,CAAV,CAnDE,CAqDF;;AACAF,MAAAA,KAAK;AACN,KAvDD,CAuDE,OAAO+B,GAAP,EAAY;AACZ1C,MAAAA,KAAK,CAACG,MAAM,CAACC,WAAR,EAAqBsC,GAArB,CAAL;AACA7B,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GA9DD;AAgEA;AACF;AACA;;;AACE,sBAAO,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAEP,QAArB;AAA+B,IAAA,OAAO,EAAEM,OAAxC;AAAiD,IAAA,KAAK,EAAEK;AAAxD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAvFD;;AAyFA,eAAeZ,GAAf","sourcesContent":["import { useState } from 'react'\nimport { v4 as uuid } from 'uuid'\n\nimport { Error } from '../../../../assets/notification'\nimport { AddButton } from '../../../../assets/button'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\n/**\n * Errors boundaryCondition/add\n */\nconst errors = {\n  updateError: 'Unable to add the boundary condition'\n}\n\n/**\n * Add boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\nconst Add = ({\n  disabled,\n  boundaryCondition,\n  project,\n  simulation,\n  part,\n  close\n}) => {\n  // State\n  const [loading, setLoading] = useState(false)\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n\n  /**\n   * on Add\n   */\n  const onAdd = async () => {\n    setLoading(true)\n\n    try {\n      // Get type key\n      const type = boundaryCondition.type.key\n\n      // Modify selection\n      const selection = part.faces\n        .map((f) => {\n          if (boundaryCondition.selected.includes(f.uuid))\n            return {\n              uuid: f.uuid,\n              label: f.number\n            }\n        })\n        .filter((s) => s)\n      boundaryCondition.selected = selection\n\n      // Set uuid\n      boundaryCondition.uuid = uuid()\n\n      // New simulation\n      const newSimulation = { ...simulation }\n\n      // Update local\n      const boundaryConditions =\n        newSimulation.scheme.configuration.boundaryConditions\n      boundaryConditions[type].values = [\n        ...(boundaryConditions[type].values || []),\n        boundaryCondition\n      ]\n\n      // Diff\n      const diff = {\n        ...boundaryConditions,\n        done: true\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'boundaryConditions'],\n          value: diff\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(newSimulation)\n\n      // Stop loading\n      setLoading(false)\n\n      // Close\n      close()\n    } catch (err) {\n      Error(errors.updateError, err)\n      setLoading(false)\n    }\n  }\n\n  /**\n   * Render\n   */\n  return <AddButton disabled={disabled} loading={loading} onAdd={onAdd} />\n}\n\nexport default Add\n"]},"metadata":{},"sourceType":"module"}