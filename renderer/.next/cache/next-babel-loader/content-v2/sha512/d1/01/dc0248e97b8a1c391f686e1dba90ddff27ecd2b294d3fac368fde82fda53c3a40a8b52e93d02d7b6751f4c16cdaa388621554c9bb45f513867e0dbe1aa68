{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Form from \"antd/lib/form\";\nimport _Input from \"antd/lib/input\";\nimport _Button from \"antd/lib/button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { PlusCircleOutlined } from '@ant-design/icons';\nimport { Error } from '../../assets/notification';\nimport Dialog from '../../assets/dialog';\nimport ProjectAPI from '../../../../src/api/project';\nimport WorkspaceAPI from '../../../../src/api/workspace';\n/**\n * Errors project/add\n * @memberof module:renderer/components/project\n */\n\nconst errors = {\n  addError: 'Unable to add a project'\n};\n/**\n * Add project\n * @memberof module:renderer/components/project\n * @param {Object} props Props\n */\n\nconst Add = props => {\n  // Props\n  const workspace = props.workspace || {}; // State\n\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // Data\n\n  const [, {\n    addOneProject\n  }] = ProjectAPI.useProjects(workspace.projects);\n  const [, {\n    mutateOneWorkspace\n  }] = WorkspaceAPI.useWorkspaces();\n  /**\n   * Toggle dialog\n   */\n\n  const toggleDialog = () => {\n    setVisible(!visible);\n  };\n  /**\n   * On confirm\n   * @param {Object} values Values\n   */\n\n\n  const onOk = async values => {\n    setLoading(true);\n\n    try {\n      // Add\n      const project = await ProjectAPI.add({\n        id: workspace.id\n      }, values); // Mutate projects\n\n      addOneProject(project); // Mutate workspaces\n\n      mutateOneWorkspace(_objectSpread(_objectSpread({}, workspace), {}, {\n        projects: [...workspace.projects, project.id]\n      }));\n      toggleDialog();\n    } catch (err) {\n      Error(errors.addError, err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  /**\n   * On cancel\n   */\n\n\n  const onCancel = () => {\n    toggleDialog();\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(_Button, {\n      onClick: toggleDialog,\n      type: \"primary\",\n      icon: /*#__PURE__*/_jsx(PlusCircleOutlined, {}),\n      children: \"Create a new project\"\n    }), /*#__PURE__*/_jsxs(Dialog, {\n      title: \"Create a new project\",\n      closable: false,\n      visible: visible,\n      onCancel: onCancel,\n      onOk: onOk,\n      loading: loading,\n      children: [/*#__PURE__*/_jsx(_Form.Item, {\n        label: \"Name\",\n        name: \"title\",\n        rules: [{\n          required: true,\n          message: \"Please enter a project's name\"\n        }],\n        children: /*#__PURE__*/_jsx(_Input, {\n          placeholder: \"Project's name\"\n        })\n      }), /*#__PURE__*/_jsx(_Form.Item, {\n        label: \"Description\",\n        name: \"description\",\n        children: /*#__PURE__*/_jsx(_Input.TextArea, {\n          placeholder: \"Project's description\"\n        })\n      })]\n    })]\n  });\n};\n\nexport default Add;","map":null,"metadata":{},"sourceType":"module"}