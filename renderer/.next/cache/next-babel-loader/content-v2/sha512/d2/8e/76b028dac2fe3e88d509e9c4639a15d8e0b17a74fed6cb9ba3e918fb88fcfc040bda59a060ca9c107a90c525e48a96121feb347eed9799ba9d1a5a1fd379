{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _Card from \"antd/lib/card\";\nimport _Space from \"antd/lib/space\";\nimport _Button from \"antd/lib/button\";\nimport _Typography from \"antd/lib/typography\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { Error } from '../../assets/notification';\nimport PluginForm from './pluginForm';\nimport Delete from './delete';\nimport PluginAPI from '../../../../src/api/plugin';\n/**\n * Errors hpc/list\n */\n\nvar errors = {\n  updateError: 'Unable to update the plugin'\n};\n/**\n * Plugins list\n * @param {Object} props Props\n */\n\nvar List = function List(_ref) {\n  var plugin = _ref.plugin;\n\n  // State\n  var _useState = useState([]),\n      list = _useState[0],\n      setList = _useState[1];\n\n  var _useState2 = useState(false),\n      edit = _useState2[0],\n      setEdit = _useState2[1]; // Data\n\n\n  var _PluginAPI$usePlugins = PluginAPI.usePlugins(),\n      _PluginAPI$usePlugins2 = _slicedToArray(_PluginAPI$usePlugins, 2),\n      plugins = _PluginAPI$usePlugins2[0],\n      mutateOnePlugin = _PluginAPI$usePlugins2[1].mutateOnePlugin; // List\n\n\n  useEffect(function () {\n    var pluginsList = plugins.map(function (p) {\n      if (p.key !== plugin.key) return;\n      var configuration = p.configuration;\n      return /*#__PURE__*/_jsxs(_Card, {\n        title: configuration.name.value,\n        style: {\n          marginTop: '10px'\n        },\n        children: [edit ? /*#__PURE__*/_jsx(PluginForm, {\n          plugin: p,\n          onFinish: function onFinish(values) {\n            return onEdit(p, values);\n          },\n          onCancel: function onCancel() {\n            return setEdit(false);\n          }\n        }) : Object.keys(configuration).map(function (key) {\n          if (key === 'name') return;\n          return /*#__PURE__*/_jsxs(_Typography.Paragraph, {\n            children: [/*#__PURE__*/_jsxs(_Typography.Text, {\n              strong: true,\n              children: [configuration[key].label, \":\"]\n            }), ' ', /*#__PURE__*/_jsx(_Typography.Text, {\n              children: configuration[key].type === 'password' ? '******' : configuration[key].value\n            })]\n          }, key);\n        }), /*#__PURE__*/_jsxs(_Space, {\n          children: [/*#__PURE__*/_jsx(_Button, {\n            disabled: edit,\n            onClick: function onClick() {\n              return setEdit(true);\n            },\n            children: \"Edit\"\n          }), /*#__PURE__*/_jsx(Delete, {\n            plugin: p\n          })]\n        })]\n      }, p.uuid);\n    });\n    setList(pluginsList);\n  }, [JSON.stringify(plugins), plugin, edit]);\n  /**\n   * On edit\n   * @param {Object} initialPlugin Plugin\n   * @param {Object} values Values\n   */\n\n  var onEdit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(initialPlugin, values) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              // Set values\n              Object.keys(values).forEach(function (key) {\n                initialPlugin.configuration[key].value = values[key];\n              }); // API\n\n              _context.next = 4;\n              return PluginAPI.update(initialPlugin);\n\n            case 4:\n              // Mutate\n              mutateOnePlugin(initialPlugin); // Finish\n\n              setEdit(false);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              Error(errors.updateError, _context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function onEdit(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: list\n  });\n};\n\nexport default List;","map":null,"metadata":{},"sourceType":"module"}