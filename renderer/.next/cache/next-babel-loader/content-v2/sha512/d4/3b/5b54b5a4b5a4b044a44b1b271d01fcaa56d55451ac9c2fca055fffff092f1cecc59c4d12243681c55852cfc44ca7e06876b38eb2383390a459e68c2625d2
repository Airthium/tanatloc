{"ast":null,"code":"import _Space from \"antd/lib/space\";\nimport _Button from \"antd/lib/button\";\nimport _Modal from \"antd/lib/modal\";\nimport _Table from \"antd/lib/table\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _Typography from \"antd/lib/typography\";\nimport _Avatar from \"antd/lib/avatar\";\nimport _Divider from \"antd/lib/divider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/plugin/rescale/renderer/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { SelectOutlined } from '@ant-design/icons';\n\nvar Rescale = function Rescale(_ref) {\n  _s();\n\n  var data = _ref.data;\n\n  // State\n  var _useState = useState(false),\n      visible = _useState[0],\n      setVisible = _useState[1];\n\n  var _useState2 = useState(),\n      selected = _useState2[0],\n      setSelected = _useState2[1]; // Data\n\n\n  var columns = [{\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    render: function render(text, record) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [selected === record && /*#__PURE__*/_jsxDEV(_Divider, {\n          type: \"vertical\",\n          style: {\n            color: 'red'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(_Avatar, {\n            style: {\n              marginRight: '-15px',\n              background: 'linear-gradient(to right,' + record.color + ', rgba(255, 255, 255, 0))',\n              opacity: 0.5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(_Typography.Text, {\n            strong: true,\n            children: text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, _this), record.processorInfo]\n        }, void 0, true)]\n      }, void 0, true);\n    }\n  }, {\n    title: 'Cores',\n    dataIndex: 'cores',\n    key: 'cores',\n    render: function render(cores) {\n      return cores.join(', ');\n    }\n  }, {\n    title: 'Pro Price',\n    dataIndex: 'price',\n    key: 'price'\n  }, {\n    title: 'Price',\n    dataIndex: 'lowPriorityPrice',\n    key: 'lowPriorityPrice'\n  }];\n\n  var _onRow = function onRow(record) {\n    if (selected === record) setSelected();else setSelected(record);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(_Modal, {\n      title: \"Rescale plugin\",\n      visible: visible,\n      onCancel: function onCancel() {\n        return setVisible(false);\n      },\n      children: [/*#__PURE__*/_jsxDEV(_Typography.Text, {\n        strong: true,\n        children: \"Select a coretype:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(_Table, {\n        dataSource: data.coreTypes,\n        columns: columns,\n        onRow: function onRow(record) {\n          return {\n            onClick: function onClick() {\n              return _onRow(record);\n            }\n          };\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(_Space, {\n      children: [/*#__PURE__*/_jsxDEV(_Typography.Text, {\n        children: [\"More information on\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://www.rescale.com/infrastructure/\",\n          target: \"_blank\",\n          children: \"Rescale website\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, _this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(_Button, {\n        onClick: function onClick() {\n          return setVisible(true);\n        },\n        icon: /*#__PURE__*/_jsxDEV(SelectOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 56\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Rescale, \"b6EViuyQoxxAUwQGHbQp0zhyK1M=\");\n\n_c = Rescale;\nexport default Rescale;\n{\n  /* <Space>\n                <Space direction=\"vertical\">\n                  {plugin.configuration.name.value}\n                  <Form>\n                    {Object.keys(plugin.inUseConfiguration).map((key) => {\n                      const item = plugin.inUseConfiguration[key]\n                      console.log(item)\n                      if (item.type === 'label')\n                        return (\n                          <div\n                            dangerouslySetInnerHTML={{ __html: item.label }}\n                          />\n                        )\n                      else if (item.type === 'number')\n                        return (\n                          <Form.Item htmlFor={key} label={item.label}>\n                            <InputNumber id={key} defaultValue={item.default} />\n                          </Form.Item>\n                        )\n                      else if (item.type === 'select')\n                        return (\n                          <Form.Item label={item.label}>\n                            <Select id={key} options={item.options} />\n                          </Form.Item>\n                        )\n                      else if (item.type === 'radio')\n                        return (\n                          <Form.Item label={item.label} htmlFor={key}>\n                            <Radio.Group id={key}>\n                              {item.options.map((o) => (\n                                <Radio value={o.value}>{o.label}</Radio>\n                              ))}\n                            </Radio.Group>\n                          </Form.Item>\n                        )\n                    })}\n                  </Form>\n                </Space>\n                <Button type=\"primary\" icon={<SelectOutlined />} />\n              </Space> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Rescale\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/plugin/rescale/renderer/index.js"],"names":["useState","SelectOutlined","Rescale","data","visible","setVisible","selected","setSelected","columns","title","dataIndex","key","render","text","record","color","marginRight","background","opacity","processorInfo","cores","join","onRow","coreTypes","onClick"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { Avatar, Button, Divider, Modal, Space, Table, Typography } from 'antd'\nimport { SelectOutlined } from '@ant-design/icons'\n\nconst Rescale = ({ data }) => {\n  // State\n  const [visible, setVisible] = useState(false)\n  const [selected, setSelected] = useState()\n\n  // Data\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      render: (text, record) => (\n        <>\n          {selected === record && (\n            <Divider type=\"vertical\" style={{ color: 'red' }} />\n          )}\n          <>\n            <Avatar\n              style={{\n                marginRight: '-15px',\n                background:\n                  'linear-gradient(to right,' +\n                  record.color +\n                  ', rgba(255, 255, 255, 0))',\n                opacity: 0.5\n              }}\n            />\n            <Typography.Text strong={true}>{text}</Typography.Text>\n            <br />\n            {record.processorInfo}\n          </>\n        </>\n      )\n    },\n    {\n      title: 'Cores',\n      dataIndex: 'cores',\n      key: 'cores',\n      render: (cores) => cores.join(', ')\n    },\n    {\n      title: 'Pro Price',\n      dataIndex: 'price',\n      key: 'price'\n    },\n    {\n      title: 'Price',\n      dataIndex: 'lowPriorityPrice',\n      key: 'lowPriorityPrice'\n    }\n  ]\n\n  const onRow = (record) => {\n    if (selected === record) setSelected()\n    else setSelected(record)\n  }\n\n  return (\n    <>\n      <Modal\n        title=\"Rescale plugin\"\n        visible={visible}\n        onCancel={() => setVisible(false)}\n      >\n        <Typography.Text strong={true}>Select a coretype:</Typography.Text>\n        <Table\n          dataSource={data.coreTypes}\n          columns={columns}\n          onRow={(record) => {\n            return { onClick: () => onRow(record) }\n          }}\n        />\n      </Modal>\n      <Space>\n        <Typography.Text>\n          More information on{' '}\n          <a href=\"https://www.rescale.com/infrastructure/\" target=\"_blank\">\n            Rescale website\n          </a>\n          .\n        </Typography.Text>\n        <Button onClick={() => setVisible(true)} icon={<SelectOutlined />} />\n      </Space>\n    </>\n  )\n}\n\nexport default Rescale\n\n{\n  /* <Space>\n                <Space direction=\"vertical\">\n                  {plugin.configuration.name.value}\n                  <Form>\n                    {Object.keys(plugin.inUseConfiguration).map((key) => {\n                      const item = plugin.inUseConfiguration[key]\n                      console.log(item)\n                      if (item.type === 'label')\n                        return (\n                          <div\n                            dangerouslySetInnerHTML={{ __html: item.label }}\n                          />\n                        )\n                      else if (item.type === 'number')\n                        return (\n                          <Form.Item htmlFor={key} label={item.label}>\n                            <InputNumber id={key} defaultValue={item.default} />\n                          </Form.Item>\n                        )\n                      else if (item.type === 'select')\n                        return (\n                          <Form.Item label={item.label}>\n                            <Select id={key} options={item.options} />\n                          </Form.Item>\n                        )\n                      else if (item.type === 'radio')\n                        return (\n                          <Form.Item label={item.label} htmlFor={key}>\n                            <Radio.Group id={key}>\n                              {item.options.map((o) => (\n                                <Radio value={o.value}>{o.label}</Radio>\n                              ))}\n                            </Radio.Group>\n                          </Form.Item>\n                        )\n                    })}\n                  </Form>\n                </Space>\n                <Button type=\"primary\" icon={<SelectOutlined />} />\n              </Space> */\n}\n"]},"metadata":{},"sourceType":"module"}