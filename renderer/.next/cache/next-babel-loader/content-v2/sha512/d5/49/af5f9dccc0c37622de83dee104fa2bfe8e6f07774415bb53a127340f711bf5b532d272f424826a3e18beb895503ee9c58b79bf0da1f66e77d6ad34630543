{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { Error } from '../../../../assets/notification';\nimport { EditButton } from '../../../../assets/button';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors boundaryCondition/edit\n */\n\nconst errors = {\n  updateError: 'Unable to edit the material'\n};\n/**\n * Edit material\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nconst Edit = ({\n  disabled,\n  material,\n  project,\n  simulation,\n  part,\n  close\n}) => {\n  // State\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(); // Data\n\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations);\n  /**\n   * On edit\n   */\n\n  const onEdit = async () => {\n    setLoading(true);\n\n    try {\n      // New simulation\n      const newSimulation = _objectSpread({}, simulation);\n\n      const materials = newSimulation.scheme.configuration.materials; // Modify selection\n\n      const selection = part.solids.map(f => {\n        if (material.selected.includes(f.uuid)) return {\n          uuid: f.uuid,\n          label: f.number\n        };\n      }).filter(s => s);\n      material.selected = selection; // Update local\n\n      const index = materials.values.findIndex(m => m.uuid === material.uuid);\n      materials.values = [...materials.values.slice(0, index), material, ...materials.values.slice(index + 1)]; // Diff\n\n      const diff = _objectSpread({}, materials); // Update\n\n\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'materials'],\n        value: diff\n      }]); // Mutate\n\n      mutateOneSimulation(newSimulation); // Close\n\n      close();\n    } catch (err) {\n      Error(errors.updateError, err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(EditButton, {\n    disabled: disabled,\n    loading: loading,\n    onEdit: onEdit\n  });\n};\n\nexport default Edit;","map":null,"metadata":{},"sourceType":"module"}