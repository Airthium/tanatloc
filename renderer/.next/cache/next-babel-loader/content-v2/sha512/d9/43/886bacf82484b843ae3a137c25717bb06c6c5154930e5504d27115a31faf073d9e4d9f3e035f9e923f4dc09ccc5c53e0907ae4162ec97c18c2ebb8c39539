{"ast":null,"code":"import _Drawer from \"antd/lib/drawer\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport _Radio from \"antd/lib/radio\";\nimport _Divider from \"antd/lib/divider\";\nimport _Switch from \"antd/lib/switch\";\nimport _Tooltip from \"antd/lib/tooltip\";\nimport _Button from \"antd/lib/button\";\nimport _Layout from \"antd/lib/layout\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Spin from \"antd/lib/spin\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/** @module renderer/components/project/view */\nimport { useRef, useState, useEffect } from 'react';\nimport { BorderlessTableOutlined, CompressOutlined, ControlOutlined, DragOutlined, EyeInvisibleOutlined, LoadingOutlined, ZoomInOutlined, ZoomOutOutlined, SelectOutlined, RadiusUprightOutlined, ScissorOutlined, StopOutlined, SyncOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { AmbientLight, Box3, PerspectiveCamera, PointLight, Scene, Sphere, Vector2, Vector3, WebGLRenderer } from 'three/build/three.module';\nimport { Error } from '../../assets/notification';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { TrackballControls } from '../../../../src/lib/three/controls/TrackballControls';\nimport { AxisHelper } from '../../../../src/lib/three/helpers/AxisHelper';\nimport { NavigationHelper } from '../../../../src/lib/three/helpers/NavigationHelper';\nimport { GridHelper } from '../../../../src/lib/three/helpers/GridHelper';\nimport { SelectionHelper } from '../../../../src/lib/three/helpers/SelectionHelper';\nimport { SectionViewHelper } from '../../../../src/lib/three/helpers/SectionViewHelper';\nimport { ColorbarHelper } from '../../../../src/lib/three/helpers/ColorbarHelper';\nimport { PartLoader } from '../../../../src/lib/three/loaders/PartLoader';\nimport PartAPI from '../../../../src/api/part';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { highlight, select, unselect } from '../../../store/select/action';\n/**\n * Errors\n */\n\nvar errors = {\n  partError: 'Unable to load part'\n};\n/**\n * ThreeView\n */\n\nvar ThreeView = function ThreeView(_ref) {\n  var loading = _ref.loading,\n      part = _ref.part;\n  // Ref\n  var mount = useRef(null);\n  var scene = useRef();\n  var camera = useRef();\n  var renderer = useRef();\n  var outlinePass = useRef();\n  var effectComposer = useRef();\n  var controls = useRef();\n  var gridHelper = useRef();\n  var selectionHelper = useRef();\n  var sectionViewHelper = useRef();\n  var colorbarHelper = useRef(); // State\n\n  var _useState = useState(false),\n      controlVisible = _useState[0],\n      setControlVisible = _useState[1];\n\n  var _useState2 = useState(false),\n      transparent = _useState2[0],\n      setTransparent = _useState2[1];\n\n  var _useState3 = useState(false),\n      sectionView = _useState3[0],\n      setSectionView = _useState3[1];\n\n  var _useState4 = useState('translate'),\n      transform = _useState4[0],\n      setTransform = _useState4[1]; // Store\n\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      selectEnabled: state.select.enabled,\n      selectType: state.select.type,\n      selectPart: state.select.part,\n      selectHighlighted: state.select.highlighted,\n      selectSelected: state.select.selected\n    };\n  }),\n      selectEnabled = _useSelector.selectEnabled,\n      selectType = _useSelector.selectType,\n      selectPart = _useSelector.selectPart,\n      selectHighlighted = _useSelector.selectHighlighted,\n      selectSelected = _useSelector.selectSelected;\n\n  var dispatch = useDispatch(); // Zoom factor\n\n  var zoomFactor = 0.01; // Mount\n\n  useEffect(function () {\n    var currentMount = mount.current;\n    var width = currentMount.clientWidth;\n    var height = currentMount.clientHeight;\n    var frameId; // Scene\n\n    scene.current = new Scene(); // Camera\n\n    camera.current = new PerspectiveCamera(50, width / height, 0.1, 1000);\n    camera.current.position.z = 10; // Light\n\n    var ambientLight = new AmbientLight('#999999');\n    var pointLight1 = new PointLight('#ffffff');\n    pointLight1.decay = 5;\n    pointLight1.position.set(5, 5, 5);\n    var pointLight2 = new PointLight('#ffffff');\n    pointLight2.decay = 5;\n    pointLight2.position.set(-5, -5, -5);\n    scene.current.add(ambientLight);\n    scene.current.add(pointLight1);\n    scene.current.add(pointLight2); // Renderer\n\n    renderer.current = new WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.current.setClearColor('#ffffff');\n    renderer.current.setSize(width, height);\n    renderer.current.setPixelRatio(window.devicePixelRatio || 1);\n    renderer.current.autoClear = false;\n    currentMount.appendChild(renderer.current.domElement); // Render pass\n\n    var renderPass = new RenderPass(scene.current, camera.current); // Outline pass\n\n    outlinePass.current = new OutlinePass(new Vector2(width, height), scene.current, camera.current);\n    outlinePass.current.visibleEdgeColor.set('#0096C7');\n    outlinePass.current.hiddenEdgeColor.set('#0096C7'); // Effect composer\n\n    effectComposer.current = new EffectComposer(renderer.current);\n    effectComposer.current.addPass(renderPass);\n    effectComposer.current.addPass(outlinePass.current); // Controls\n\n    controls.current = new TrackballControls(camera.current, currentMount);\n    controls.current.rotateSpeed = 3;\n    controls.current.panSpeed = 0.1; // Axis\n\n    var axisHelper = AxisHelper(renderer.current, camera.current, {\n      offsetWidth: width - 150,\n      offsetHeight: 0,\n      width: 150,\n      height: 150\n    }); // NavigationHelper\n\n    var navigationHelper = NavigationHelper(renderer.current, scene.current, camera.current, controls.current, {\n      offsetWidth: 0,\n      offsetHeight: 0,\n      width: 150,\n      height: 150\n    }); // GridHelper\n\n    gridHelper.current = GridHelper(scene.current); // SelectionHelper\n\n    selectionHelper.current = SelectionHelper(renderer.current, scene.current, camera.current, controls.current); // SectionViewHelper\n\n    sectionViewHelper.current = SectionViewHelper(renderer.current, scene.current, camera.current, controls.current); // ColorbarHelper\n\n    colorbarHelper.current = ColorbarHelper(renderer.current, scene.current);\n    colorbarHelper.current.setVisible(false);\n    /**\n     * Render scene\n     */\n\n    var renderScene = function renderScene() {\n      controls.current.update();\n      renderer.current.setViewport(0, 0, width, height);\n      renderer.current.render(scene.current, camera.current);\n      effectComposer.current.render();\n      axisHelper.render();\n      navigationHelper.render();\n      colorbarHelper.current.render();\n    };\n    /**\n     * Handle resize\n     */\n\n\n    var handleResize = function handleResize() {\n      width = currentMount.clientWidth;\n      height = currentMount.clientHeight;\n      renderer.current.setSize(width, height);\n      camera.current.aspect = width / height;\n      camera.current.updateProjectionMatrix();\n      axisHelper.resize({\n        newOffsetWidth: width - 150,\n        newOffsetHeight: 0,\n        newWidth: 150,\n        newHeight: 150\n      });\n      navigationHelper.resize({\n        newOffsetWidth: 0,\n        newOffsetHeight: 0,\n        newWidth: 150,\n        newHeight: 150\n      });\n      renderScene();\n    };\n    /**\n     * Animate\n     */\n\n\n    var animate = function animate() {\n      renderScene();\n      /*frameId = */\n\n      requestAnimationFrame(animate);\n    };\n    /**\n     * Start animate\n     */\n\n\n    var start = function start() {\n      // if (!frameId) {\n      frameId = requestAnimationFrame(animate); // }\n    };\n    /**\n     * Stop animate\n     */\n\n\n    var stop = function stop() {\n      cancelAnimationFrame(frameId);\n      frameId = null;\n    }; // Event listeners\n\n\n    window.addEventListener('resize', handleResize); // First rendering\n\n    start(); // Unmount\n\n    return function () {\n      stop();\n      window.removeEventListener('resize', handleResize);\n      currentMount.removeChild(renderer.current.domElement); // Clean scene\n\n      scene.current.children.forEach(function (child) {\n        scene.current.remove(child);\n      }); // Dispose\n\n      axisHelper.dispose();\n      navigationHelper.dispose();\n      gridHelper.current.dispose();\n      sectionViewHelper.current.dispose();\n      selectionHelper.current.dispose();\n    };\n  }, []);\n  useEffect(function () {\n    // Clean scene\n    scene.current.children.forEach(function (child) {\n      if (child.type === 'Part') {\n        child.dispose();\n        scene.current.remove(child);\n      }\n    });\n    if (part) loadPart();\n  }, [part]); // Enable / disable selection\n\n  useEffect(function () {\n    scene.current.children.forEach(function (child) {\n      if (child.type === 'Part' && child.uuid === selectPart) {\n        if (selectEnabled) child.startSelection(renderer.current, camera.current, outlinePass.current, selectType);else {\n          child.stopSelection();\n        }\n      }\n    });\n  }, [selectEnabled, selectPart, selectType]);\n  useEffect(function () {\n    scene.current.children.forEach(function (child) {\n      if (child.type === 'Part' && child.uuid === selectPart) {\n        // Highlight\n        child.highlight(selectHighlighted); // Selection\n\n        var selected = child.getSelected(); // Unselect\n\n        var minus = selected.filter(function (s) {\n          return !selectSelected.includes(s);\n        });\n        minus.forEach(function (m) {\n          child.unselect(m);\n        }); // Select\n\n        var plus = selectSelected.filter(function (s) {\n          return !selected.includes(s);\n        });\n        plus.forEach(function (p) {\n          child.select(p);\n        });\n      }\n    });\n  }, [selectHighlighted, selectSelected]);\n  /**\n   * Compute scene bounding box\n   */\n\n  var computeSceneBoundingSphere = function computeSceneBoundingSphere() {\n    var box = new Box3();\n    scene.current.children.forEach(function (child) {\n      if (child.visible && child.type === 'Part') {\n        var childBox = child.boundingBox;\n        var min = new Vector3(Math.min(box.min.x, childBox.min.x), Math.min(box.min.y, childBox.min.y), Math.min(box.min.z, childBox.min.z));\n        var max = new Vector3(Math.max(box.max.x, childBox.max.x), Math.max(box.max.y, childBox.max.y), Math.max(box.max.z, childBox.max.z));\n        box.set(min, max);\n      }\n    });\n    var sphere = new Sphere();\n    box.getBoundingSphere(sphere);\n    scene.current.boundingBox = box;\n    scene.current.boundingSphere = sphere;\n  };\n  /**\n   * Zoom\n   * @param {Object} direction Direction\n   */\n\n\n  var zoom = function zoom(direction) {\n    var targetDistance = controls.current.object.position.distanceTo(controls.current.target);\n    var zoomDistance = targetDistance * direction * zoomFactor;\n    var translation = controls.current.target.clone().sub(camera.current.position).normalize().multiplyScalar(zoomDistance);\n    camera.current.position.add(translation);\n  };\n\n  var zoomInProgress = null;\n  /**\n   * Zoom in\n   */\n\n  var zoomIn = function zoomIn() {\n    zoom(1);\n    zoomInProgress = requestAnimationFrame(zoomIn);\n  };\n  /**\n   * Zoom out\n   */\n\n\n  var zoomOut = function zoomOut() {\n    zoom(-1);\n    zoomInProgress = requestAnimationFrame(zoomOut);\n  };\n  /**\n   * Zoom stop\n   */\n\n\n  var zoomStop = function zoomStop() {\n    cancelAnimationFrame(zoomInProgress);\n    zoomInProgress = null;\n  };\n  /**\n   * Zoom to fit\n   */\n\n\n  var zoomToFit = function zoomToFit() {\n    var sphere = scene.current.boundingSphere;\n    if (!sphere || sphere.radius === 0) return; // Center\n\n    var center = sphere.center; // Direction\n\n    var maxSize = 2 * sphere.radius;\n    var fitHeight = maxSize / (2 * Math.atan(Math.PI * camera.current.fov / 360));\n    var fitWidth = fitHeight / camera.current.aspect;\n    var distance = 1.1 * Math.max(fitHeight, fitWidth);\n    var direction = controls.current.target.clone().sub(camera.current.position).normalize().multiplyScalar(distance); // Controls\n\n    controls.current.target.copy(center); // Camera\n\n    camera.current.position.copy(center).sub(direction);\n    camera.current.near = distance / 100;\n    camera.current.far = distance * 100;\n    camera.current.updateProjectionMatrix(); // Lights\n\n    scene.current.children.forEach(function (child) {\n      if (child.type === 'PointLight') {\n        var position = child.position;\n        var max = Math.max(Math.max(Math.abs(position.x), Math.abs(position.y)), Math.abs(position.z));\n        child.position.multiplyScalar(1.5 * distance / max);\n      }\n    });\n  };\n  /**\n   * Load part\n   */\n\n\n  var loadPart = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _mesh$children$, _mesh$children$$child;\n\n      var mouseMoveEvent, mouseDownEvent, loader, mesh;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Events\n              mouseMoveEvent = function mouseMoveEvent(child, uuid) {\n                child.highlight(uuid);\n                setTimeout(function () {\n                  return dispatch(highlight(uuid));\n                }, 1);\n              };\n\n              mouseDownEvent = function mouseDownEvent(child, uuid) {\n                var selected = child.getSelected();\n\n                if (selected.includes(uuid)) {\n                  child.unselect(uuid);\n                  setTimeout(function () {\n                    return dispatch(unselect(uuid));\n                  }, 1);\n                } else {\n                  child.select(uuid);\n                  setTimeout(function () {\n                    return dispatch(select(uuid));\n                  }, 1);\n                }\n              }; // Load\n\n\n              loader = PartLoader(mouseMoveEvent, mouseDownEvent);\n              mesh = loader.load(part, transparent, sectionViewHelper.current.getClippingPlane(), outlinePass.current); // Scene\n\n              scene.current.add(mesh);\n              computeSceneBoundingSphere(); // Grid\n\n              gridHelper.current.update(); // Zoom\n\n              zoomToFit(); // Colorbar\n\n              if (mesh !== null && mesh !== void 0 && (_mesh$children$ = mesh.children[1]) !== null && _mesh$children$ !== void 0 && (_mesh$children$$child = _mesh$children$.children[0]) !== null && _mesh$children$$child !== void 0 && _mesh$children$$child.lut) {\n                colorbarHelper.current.setLUT(mesh.children[1].children[0].lut);\n                colorbarHelper.current.setVisible(true);\n              } else {\n                colorbarHelper.current.setVisible(false);\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadPart() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Toggle grid\n   * @param {boolean} checked Checked\n   */\n\n\n  var toggleGrid = function toggleGrid(checked) {\n    gridHelper.current.setVisible(checked);\n  };\n\n  var toggleTransparent = function toggleTransparent(checked) {\n    setTransparent(checked);\n    scene.current.children.forEach(function (child) {\n      if (child.type === 'Part') {\n        child.setTransparent(checked);\n      }\n    });\n  };\n  /**\n   * Toggle section view\n   */\n\n\n  var toggleSectionView = function toggleSectionView() {\n    var active = !sectionView;\n    setSectionView(active);\n    active ? sectionViewHelper.current.start() : sectionViewHelper.current.stop();\n  };\n  /**\n   * Handle transform mode\n   * @param {Object} event Event\n   */\n\n\n  var handleTransform = function handleTransform(event) {\n    var mode = event.target.value;\n    setTransform(mode);\n    sectionViewHelper.current.setMode(mode);\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxs(_Layout, {\n    className: \"View no-scroll\",\n    children: [/*#__PURE__*/_jsxs(_Layout.Content, {\n      className: \"View-content no-scroll\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        style: {\n          display: loading ? 'flex' : 'none'\n        },\n        className: \"View-loading\",\n        children: /*#__PURE__*/_jsx(_Spin, {\n          indicator: /*#__PURE__*/_jsx(LoadingOutlined, {\n            style: {\n              fontSize: 60\n            },\n            spin: true\n          })\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        ref: mount,\n        className: \"View-canvas\"\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"View-controls\",\n      children: [/*#__PURE__*/_jsx(_Tooltip, {\n        title: \"Controls\",\n        children: /*#__PURE__*/_jsx(_Button, {\n          icon: /*#__PURE__*/_jsx(ControlOutlined, {}),\n          onClick: function onClick() {\n            return setControlVisible(!controlVisible);\n          }\n        })\n      }), /*#__PURE__*/_jsxs(_Drawer, {\n        className: \"View-controls-drawer\",\n        title: \"Controls\",\n        visible: controlVisible,\n        onClose: function onClose() {\n          return setControlVisible(!controlVisible);\n        },\n        mask: false,\n        maskClosable: false,\n        placement: \"right\",\n        getContainer: false,\n        headerStyle: {\n          borderLeft: '1px solid #f0f0f0'\n        },\n        bodyStyle: {\n          display: 'flex',\n          flexDirection: 'column',\n          padding: '10px',\n          borderLeft: '1px solid #f0f0f0'\n        },\n        width: \"100%\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"drawer-group\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"drawer-subgroup\",\n            children: /*#__PURE__*/_jsx(_Tooltip, {\n              title: \"Display grid\",\n              children: /*#__PURE__*/_jsx(_Switch, {\n                defaultChecked: true,\n                checkedChildren: /*#__PURE__*/_jsx(BorderlessTableOutlined, {}),\n                unCheckedChildren: /*#__PURE__*/_jsx(BorderlessTableOutlined, {}),\n                onChange: toggleGrid\n              })\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"drawer-subgroup\",\n            children: /*#__PURE__*/_jsx(_Tooltip, {\n              title: \"Set transparency\",\n              children: /*#__PURE__*/_jsx(_Switch, {\n                className: \"transparent\",\n                checked: transparent,\n                checkedChildren: /*#__PURE__*/_jsx(RadiusUprightOutlined, {}),\n                unCheckedChildren: /*#__PURE__*/_jsx(RadiusUprightOutlined, {}),\n                onChange: toggleTransparent\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(_Divider, {}), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"drawer-group\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"drawer-subgroup\",\n            children: [/*#__PURE__*/_jsx(_Tooltip, {\n              title: \"Zoom out\",\n              placement: \"left\",\n              children: /*#__PURE__*/_jsx(_Button, {\n                icon: /*#__PURE__*/_jsx(ZoomOutOutlined, {}),\n                onMouseDown: zoomOut,\n                onMouseUp: zoomStop,\n                onMouseOut: zoomStop\n              })\n            }), /*#__PURE__*/_jsx(_Tooltip, {\n              title: \"Zoom to fit\",\n              placement: \"left\",\n              children: /*#__PURE__*/_jsx(_Button, {\n                icon: /*#__PURE__*/_jsx(CompressOutlined, {}),\n                onClick: zoomToFit\n              })\n            }), /*#__PURE__*/_jsx(_Tooltip, {\n              title: \"Zoom in\",\n              placement: \"left\",\n              children: /*#__PURE__*/_jsx(_Button, {\n                icon: /*#__PURE__*/_jsx(ZoomInOutlined, {}),\n                onMouseDown: zoomIn,\n                onMouseUp: zoomStop,\n                onMouseOut: zoomStop\n              })\n            })]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"drawer-subgroup\",\n            children: /*#__PURE__*/_jsx(_Tooltip, {\n              title: \"Zoom to selection\",\n              placement: \"left\",\n              children: /*#__PURE__*/_jsx(_Button, {\n                icon: /*#__PURE__*/_jsx(SelectOutlined, {}),\n                onClick: function onClick() {\n                  return selectionHelper.current.isEnabled() ? selectionHelper.current.end() : selectionHelper.current.start();\n                }\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(_Divider, {}), /*#__PURE__*/_jsx(\"div\", {\n          className: \"drawer-group\",\n          children: sectionView ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: \"drawer-subgroup\",\n              children: [/*#__PURE__*/_jsx(_Tooltip, {\n                title: \"Stop\",\n                placement: \"left\",\n                children: /*#__PURE__*/_jsx(_Button, {\n                  icon: /*#__PURE__*/_jsx(StopOutlined, {}),\n                  onClick: toggleSectionView\n                })\n              }), /*#__PURE__*/_jsxs(_Radio.Group, {\n                onChange: handleTransform,\n                value: transform,\n                style: {\n                  display: 'flex',\n                  flexDirection: 'column',\n                  marginTop: '10px'\n                },\n                children: [/*#__PURE__*/_jsx(_Tooltip, {\n                  title: \"Translate\",\n                  placement: \"left\",\n                  children: /*#__PURE__*/_jsx(_Radio, {\n                    value: \"translate\",\n                    children: /*#__PURE__*/_jsx(DragOutlined, {})\n                  })\n                }), /*#__PURE__*/_jsx(_Tooltip, {\n                  title: \"Rotate\",\n                  placement: \"left\",\n                  children: /*#__PURE__*/_jsx(_Radio, {\n                    value: \"rotate\",\n                    children: /*#__PURE__*/_jsx(SyncOutlined, {})\n                  })\n                })]\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"drawer-subgroup\",\n              children: [/*#__PURE__*/_jsx(_Tooltip, {\n                title: \"Hide plane\",\n                placement: \"left\",\n                children: /*#__PURE__*/_jsx(_Button, {\n                  icon: /*#__PURE__*/_jsx(EyeInvisibleOutlined, {}),\n                  onClick: function onClick() {\n                    return sectionViewHelper.current.toggleVisible();\n                  }\n                })\n              }), /*#__PURE__*/_jsx(_Tooltip, {\n                title: \"Snap to X\",\n                placement: \"left\",\n                children: /*#__PURE__*/_jsx(_Button, {\n                  className: \"ant-btn-icon-only\",\n                  onClick: function onClick() {\n                    return sectionViewHelper.current.toAxis(new Vector3(1, 0, 0));\n                  },\n                  children: \"X\"\n                })\n              }), /*#__PURE__*/_jsx(_Tooltip, {\n                title: \"Snap to Y\",\n                placement: \"left\",\n                children: /*#__PURE__*/_jsx(_Button, {\n                  className: \"ant-btn-icon-only\",\n                  onClick: function onClick() {\n                    return sectionViewHelper.current.toAxis(new Vector3(0, 1, 0));\n                  },\n                  children: \"Y\"\n                })\n              }), /*#__PURE__*/_jsx(_Tooltip, {\n                title: \"Snap to Z\",\n                placement: \"left\",\n                children: /*#__PURE__*/_jsx(_Button, {\n                  className: \"ant-btn-icon-only\",\n                  onClick: function onClick() {\n                    return sectionViewHelper.current.toAxis(new Vector3(0, 0, 1));\n                  },\n                  children: \"Z\"\n                })\n              }), /*#__PURE__*/_jsx(_Tooltip, {\n                title: \"Flip\",\n                placement: \"left\",\n                children: /*#__PURE__*/_jsx(_Button, {\n                  onClick: function onClick() {\n                    return sectionViewHelper.current.flip();\n                  },\n                  icon: /*#__PURE__*/_jsx(RetweetOutlined, {})\n                })\n              })]\n            })]\n          }) : /*#__PURE__*/_jsx(_Tooltip, {\n            title: \"Section view\",\n            children: /*#__PURE__*/_jsx(_Button, {\n              icon: /*#__PURE__*/_jsx(ScissorOutlined, {}),\n              onClick: toggleSectionView\n            })\n          })\n        }), /*#__PURE__*/_jsx(_Divider, {})]\n      })]\n    })]\n  });\n};\n/**\n * View\n * @param {Object} Props props\n */\n\n\nvar View = function View(_ref3) {\n  var simulation = _ref3.simulation,\n      setPartSummary = _ref3.setPartSummary;\n\n  // State\n  var _useState5 = useState(),\n      part = _useState5[0],\n      setPart = _useState5[1];\n\n  var _useState6 = useState(false),\n      loading = _useState6[0],\n      setLoading = _useState6[1]; // Part\n\n\n  useEffect(function () {\n    var _simulation$scheme;\n\n    var configuration = simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme = simulation.scheme) === null || _simulation$scheme === void 0 ? void 0 : _simulation$scheme.configuration;\n    if (configuration !== null && configuration !== void 0 && configuration.part) loadPart(configuration.part);\n  }, [simulation]);\n  /**\n   * Load part\n   * @param {Object} file File\n   */\n\n  var loadPart = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file) {\n      var _partContent$solids, _partContent$faces, _partContent$edges, _partContent$solids2, _partContent$faces2, _partContent$edges2, partContent, summary;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              _context2.prev = 1;\n              _context2.next = 4;\n              return PartAPI.get({\n                id: simulation.id\n              }, file);\n\n            case 4:\n              partContent = _context2.sent;\n\n              if (!partContent.error) {\n                _context2.next = 8;\n                break;\n              }\n\n              setPartSummary({\n                error: true,\n                message: partContent.message\n              });\n              return _context2.abrupt(\"return\");\n\n            case 8:\n              // Convert buffers\n              (_partContent$solids = partContent.solids) === null || _partContent$solids === void 0 ? void 0 : _partContent$solids.forEach(function (solid) {\n                solid.buffer = JSON.parse(Buffer.from(solid.buffer).toString());\n              });\n              (_partContent$faces = partContent.faces) === null || _partContent$faces === void 0 ? void 0 : _partContent$faces.forEach(function (face) {\n                face.buffer = JSON.parse(Buffer.from(face.buffer).toString());\n              });\n              (_partContent$edges = partContent.edges) === null || _partContent$edges === void 0 ? void 0 : _partContent$edges.forEach(function (edge) {\n                edge.buffer = JSON.parse(Buffer.from(edge.buffer).toString());\n              }); // Summary\n\n              summary = {\n                uuid: partContent.uuid,\n                solids: (_partContent$solids2 = partContent.solids) === null || _partContent$solids2 === void 0 ? void 0 : _partContent$solids2.map(function (solid) {\n                  return {\n                    name: solid.name,\n                    number: solid.number,\n                    uuid: solid.buffer.uuid\n                  };\n                }),\n                faces: (_partContent$faces2 = partContent.faces) === null || _partContent$faces2 === void 0 ? void 0 : _partContent$faces2.map(function (face) {\n                  return {\n                    name: face.name,\n                    number: face.number,\n                    uuid: face.buffer.uuid\n                  };\n                }),\n                edges: (_partContent$edges2 = partContent.edges) === null || _partContent$edges2 === void 0 ? void 0 : _partContent$edges2.map(function (edge) {\n                  return {\n                    name: edge.name,\n                    number: edge.number,\n                    uuid: edge.buffer.uuid\n                  };\n                })\n              };\n              setPart(partContent);\n              setPartSummary(summary);\n              _context2.next = 19;\n              break;\n\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](1);\n              Error(errors.partError, _context2.t0);\n\n            case 19:\n              _context2.prev = 19;\n              setLoading(false);\n              return _context2.finish(19);\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 16, 19, 22]]);\n    }));\n\n    return function loadPart(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsx(ThreeView, {\n    loading: loading,\n    part: part\n  });\n};\n\nexport default View;","map":null,"metadata":{},"sourceType":"module"}