{"ast":null,"code":"import _Card from \"antd/lib/card\";\nimport _Space from \"antd/lib/space\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _Button from \"antd/lib/button\";\nimport _Typography from \"antd/lib/typography\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { EditOutlined } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nimport { enable, disable, select } from '../../../../../store/select/action';\nimport Delete from '../delete';\n\nconst List = ({\n  project,\n  simulation,\n  onEdit\n}) => {\n  var _simulation$scheme, _simulation$scheme$co;\n\n  // State\n  const {\n    0: enabled,\n    1: setEnabled\n  } = useState(true); // Data\n\n  const boundaryConditions = (simulation === null || simulation === void 0 ? void 0 : (_simulation$scheme = simulation.scheme) === null || _simulation$scheme === void 0 ? void 0 : (_simulation$scheme$co = _simulation$scheme.configuration) === null || _simulation$scheme$co === void 0 ? void 0 : _simulation$scheme$co.boundaryConditions) || {};\n  const dispatch = useDispatch();\n  /**\n   * Highlight current\n   * @param {string} key Key\n   * @param {number} index Index\n   */\n\n  const highlight = (key, index) => {\n    var _boundaryConditions$k, _boundaryConditions$k2;\n\n    dispatch(enable());\n    const currentSelected = (_boundaryConditions$k = boundaryConditions[key]) === null || _boundaryConditions$k === void 0 ? void 0 : (_boundaryConditions$k2 = _boundaryConditions$k.values[index]) === null || _boundaryConditions$k2 === void 0 ? void 0 : _boundaryConditions$k2.selected;\n    currentSelected === null || currentSelected === void 0 ? void 0 : currentSelected.forEach(s => {\n      dispatch(select(s.uuid));\n    });\n  };\n  /**\n   * Unhighlight current\n   */\n\n\n  const unhighlight = () => {\n    dispatch(disable());\n  }; // List\n\n\n  const list = Object.keys(boundaryConditions).map(type => {\n    var _boundaryConditions$t;\n\n    if (type === 'index' || type === 'title' || type === 'done') return;\n    return (_boundaryConditions$t = boundaryConditions[type].values) === null || _boundaryConditions$t === void 0 ? void 0 : _boundaryConditions$t.map((child, index) => {\n      return /*#__PURE__*/_jsx(_Card, {\n        hoverable: true,\n        style: {\n          marginTop: '5px'\n        },\n        onMouseEnter: () => highlight(type, index),\n        onMouseLeave: () => {\n          enabled && unhighlight();\n        },\n        children: /*#__PURE__*/_jsxs(_Space, {\n          direction: \"vertical\",\n          children: [/*#__PURE__*/_jsx(_Typography.Text, {\n            children: child.name\n          }), /*#__PURE__*/_jsxs(_Space, {\n            children: [/*#__PURE__*/_jsx(_Button, {\n              icon: /*#__PURE__*/_jsx(EditOutlined, {}),\n              onClick: () => {\n                setEnabled(false);\n                onEdit(type, index);\n                setTimeout(() => setEnabled(true), 500);\n              }\n            }), /*#__PURE__*/_jsx(Delete, {\n              project: project,\n              simulation: simulation,\n              type: type,\n              index: index\n            })]\n          })]\n        })\n      }, index);\n    });\n  }).filter(l => l);\n  /**\n   * Render\n   */\n\n  return list;\n};\n\nexport default List;","map":null,"metadata":{},"sourceType":"module"}