{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/edit/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { Error } from '../../../../assets/notification';\nimport { EditButton } from '../../../../assets/button';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors boundaryCondition/edit\n */\n\nconst errors = {\n  updateError: 'Unable to edit the boundary condition'\n};\n/**\n * Edit boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nconst Edit = ({\n  disabled,\n  boundaryCondition,\n  oldBoundaryCondition,\n  project,\n  simulation,\n  part,\n  close\n}) => {\n  // State\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(); // Data\n\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations);\n  /**\n   * On edit\n   */\n\n  const onEdit = async () => {\n    setLoading(true);\n\n    try {\n      // New simulation\n      const newSimulation = _objectSpread({}, simulation);\n\n      const boundaryConditions = newSimulation.scheme.configuration.boundaryConditions; // Get type key\n\n      const type = boundaryCondition.type.key; // Get old type\n\n      const oldType = oldBoundaryCondition.type.key;\n\n      if (oldType !== type) {\n        const index = boundaryConditions[oldType].values.findIndex(b => b.uuid === oldBoundaryCondition.uuid);\n        boundaryConditions[oldType].values = [...boundaryConditions[oldType].values.slice(0, index), ...boundaryConditions[oldType].values.slice(index + 1)];\n      } // Modify selection\n\n\n      const selection = part.faces.map(f => {\n        if (boundaryCondition.selected.includes(f.uuid)) return {\n          uuid: f.uuid,\n          label: f.number\n        };\n      }).filter(s => s);\n      boundaryCondition.selected = selection; // Update local\n\n      if (oldType !== type) {\n        boundaryConditions[type].values = [...boundaryConditions[type].values, boundaryCondition];\n      } else {\n        const index = boundaryConditions[type].values.findIndex(b => b.uuid === boundaryCondition.uuid);\n        boundaryConditions[type].values = [...boundaryConditions[type].values.slice(0, index), boundaryCondition, ...boundaryConditions[type].values.slice(index + 1)];\n      } // Diff\n\n\n      const diff = _objectSpread({}, boundaryConditions); // Update\n\n\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'boundaryConditions'],\n        value: diff\n      }]); // Mutate\n\n      mutateOneSimulation(newSimulation); // Close\n\n      close();\n    } catch (err) {\n      Error(errors.updateError, err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(EditButton, {\n    disabled: disabled,\n    loading: loading,\n    onEdit: onEdit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Edit;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/edit/index.js"],"names":["useState","Error","EditButton","SimulationAPI","errors","updateError","Edit","disabled","boundaryCondition","oldBoundaryCondition","project","simulation","part","close","loading","setLoading","mutateOneSimulation","useSimulations","simulations","onEdit","newSimulation","boundaryConditions","scheme","configuration","type","key","oldType","index","values","findIndex","b","uuid","slice","selection","faces","map","f","selected","includes","label","number","filter","s","diff","update","id","method","path","value","err"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nimport { Error } from '../../../../assets/notification'\nimport { EditButton } from '../../../../assets/button'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\n/**\n * Errors boundaryCondition/edit\n */\nconst errors = {\n  updateError: 'Unable to edit the boundary condition'\n}\n\n/**\n * Edit boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\nconst Edit = ({\n  disabled,\n  boundaryCondition,\n  oldBoundaryCondition,\n  project,\n  simulation,\n  part,\n  close\n}) => {\n  // State\n  const [loading, setLoading] = useState()\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n\n  /**\n   * On edit\n   */\n  const onEdit = async () => {\n    setLoading(true)\n\n    try {\n      // New simulation\n      const newSimulation = { ...simulation }\n      const boundaryConditions =\n        newSimulation.scheme.configuration.boundaryConditions\n\n      // Get type key\n      const type = boundaryCondition.type.key\n\n      // Get old type\n      const oldType = oldBoundaryCondition.type.key\n\n      if (oldType !== type) {\n        const index = boundaryConditions[oldType].values.findIndex(\n          (b) => b.uuid === oldBoundaryCondition.uuid\n        )\n        boundaryConditions[oldType].values = [\n          ...boundaryConditions[oldType].values.slice(0, index),\n          ...boundaryConditions[oldType].values.slice(index + 1)\n        ]\n      }\n\n      // Modify selection\n      const selection = part.faces\n        .map((f) => {\n          if (boundaryCondition.selected.includes(f.uuid))\n            return {\n              uuid: f.uuid,\n              label: f.number\n            }\n        })\n        .filter((s) => s)\n      boundaryCondition.selected = selection\n\n      // Update local\n      if (oldType !== type) {\n        boundaryConditions[type].values = [\n          ...boundaryConditions[type].values,\n          boundaryCondition\n        ]\n      } else {\n        const index = boundaryConditions[type].values.findIndex(\n          (b) => b.uuid === boundaryCondition.uuid\n        )\n        boundaryConditions[type].values = [\n          ...boundaryConditions[type].values.slice(0, index),\n          boundaryCondition,\n          ...boundaryConditions[type].values.slice(index + 1)\n        ]\n      }\n\n      // Diff\n      const diff = {\n        ...boundaryConditions\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'boundaryConditions'],\n          value: diff\n        }\n      ])\n\n      // Mutate\n      mutateOneSimulation(newSimulation)\n\n      // Close\n      close()\n    } catch (err) {\n      Error(errors.updateError, err)\n    } finally {\n      setLoading(false)\n    }\n  }\n  /**\n   * Render\n   */\n  return <EditButton disabled={disabled} loading={loading} onEdit={onEdit} />\n}\n\nexport default Edit\n"]},"metadata":{},"sourceType":"module"}