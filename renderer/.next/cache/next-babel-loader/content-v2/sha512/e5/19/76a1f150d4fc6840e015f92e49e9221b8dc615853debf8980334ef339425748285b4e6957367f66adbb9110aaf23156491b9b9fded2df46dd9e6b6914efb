{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/delete/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { Error } from '../../../../assets/notification';\nimport { DeleteButton } from '../../../../assets/button';\nimport { useDispatch } from 'react-redux';\nimport { unselect } from '../../../../../store/select/action';\nimport SimulationAPI from '../../../../../../src/api/simulation';\n/**\n * Errors boundaryConditions/delete\n * @memberof module:renderer/components/project/simulation\n */\n\nconst errors = {\n  updateError: 'Unable to delete the boundary condition'\n};\n/**\n * Delete boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\n\nconst Delete = ({\n  project,\n  simulation,\n  type,\n  index\n}) => {\n  // State\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false); // Data\n\n  const [, {\n    mutateOneSimulation\n  }] = SimulationAPI.useSimulations(project === null || project === void 0 ? void 0 : project.simulations);\n  const dispatch = useDispatch();\n  /**\n   * On delete\n   */\n\n  const onDelete = async () => {\n    setLoading(true);\n\n    try {\n      // New simulation\n      const newSimulation = _objectSpread({}, simulation); // Update local\n\n\n      const boundaryConditions = newSimulation.scheme.configuration.boundaryConditions;\n      const typedBoundaryCondition = boundaryConditions[type]; // (unselect)\n\n      const boundaryCondition = typedBoundaryCondition.values[index];\n      boundaryCondition.selected.forEach(s => {\n        dispatch(unselect(s.uuid));\n      });\n      typedBoundaryCondition.values = [...typedBoundaryCondition.values.slice(0, index), ...typedBoundaryCondition.values.slice(index + 1)]; // Diff\n\n      let done = false;\n      Object.keys(boundaryConditions).forEach(t => {\n        var _boundaryConditions$t;\n\n        if (t === 'index' || t === 'title' || t === 'done') return;\n        if ((_boundaryConditions$t = boundaryConditions[t].values) !== null && _boundaryConditions$t !== void 0 && _boundaryConditions$t.length) done = true;\n      });\n\n      const diff = _objectSpread(_objectSpread({}, boundaryConditions), {}, {\n        done: done\n      }); // Update\n\n\n      await SimulationAPI.update({\n        id: simulation.id\n      }, [{\n        key: 'scheme',\n        type: 'json',\n        method: 'diff',\n        path: ['configuration', 'boundaryConditions'],\n        value: diff\n      }]);\n      mutateOneSimulation(newSimulation);\n    } catch (err) {\n      Error(errors.updateError, err);\n      setLoading(false);\n    }\n  };\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(DeleteButton, {\n    loading: loading,\n    onDelete: onDelete\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n};\n\nexport default Delete;","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/simulation/boundaryConditions/delete/index.js"],"names":["useState","Error","DeleteButton","useDispatch","unselect","SimulationAPI","errors","updateError","Delete","project","simulation","type","index","loading","setLoading","mutateOneSimulation","useSimulations","simulations","dispatch","onDelete","newSimulation","boundaryConditions","scheme","configuration","typedBoundaryCondition","boundaryCondition","values","selected","forEach","s","uuid","slice","done","Object","keys","t","length","diff","update","id","key","method","path","value","err"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nimport { Error } from '../../../../assets/notification'\nimport { DeleteButton } from '../../../../assets/button'\n\nimport { useDispatch } from 'react-redux'\nimport { unselect } from '../../../../../store/select/action'\n\nimport SimulationAPI from '../../../../../../src/api/simulation'\n\n/**\n * Errors boundaryConditions/delete\n * @memberof module:renderer/components/project/simulation\n */\nconst errors = {\n  updateError: 'Unable to delete the boundary condition'\n}\n\n/**\n * Delete boundary condition\n * @memberof module:renderer/components/project/simulation\n * @param {Object} props Props\n */\nconst Delete = ({ project, simulation, type, index }) => {\n  // State\n  const [loading, setLoading] = useState(false)\n\n  // Data\n  const [, { mutateOneSimulation }] = SimulationAPI.useSimulations(\n    project?.simulations\n  )\n  const dispatch = useDispatch()\n\n  /**\n   * On delete\n   */\n  const onDelete = async () => {\n    setLoading(true)\n\n    try {\n      // New simulation\n      const newSimulation = { ...simulation }\n\n      // Update local\n      const boundaryConditions =\n        newSimulation.scheme.configuration.boundaryConditions\n      const typedBoundaryCondition = boundaryConditions[type]\n\n      // (unselect)\n      const boundaryCondition = typedBoundaryCondition.values[index]\n      boundaryCondition.selected.forEach((s) => {\n        dispatch(unselect(s.uuid))\n      })\n\n      typedBoundaryCondition.values = [\n        ...typedBoundaryCondition.values.slice(0, index),\n        ...typedBoundaryCondition.values.slice(index + 1)\n      ]\n\n      // Diff\n      let done = false\n      Object.keys(boundaryConditions).forEach((t) => {\n        if (t === 'index' || t === 'title' || t === 'done') return\n        if (boundaryConditions[t].values?.length) done = true\n      })\n      const diff = {\n        ...boundaryConditions,\n        done: done\n      }\n\n      // Update\n      await SimulationAPI.update({ id: simulation.id }, [\n        {\n          key: 'scheme',\n          type: 'json',\n          method: 'diff',\n          path: ['configuration', 'boundaryConditions'],\n          value: diff\n        }\n      ])\n\n      mutateOneSimulation(newSimulation)\n    } catch (err) {\n      Error(errors.updateError, err)\n      setLoading(false)\n    }\n  }\n\n  /**\n   * Render\n   */\n  return <DeleteButton loading={loading} onDelete={onDelete} />\n}\n\nexport default Delete\n"]},"metadata":{},"sourceType":"module"}