{"ast":null,"code":"import _Tooltip from \"antd/lib/tooltip\";\nimport _Avatar from \"antd/lib/avatar\";\nimport _Typography from \"antd/lib/typography\";\nimport _Empty from \"antd/lib/empty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/data/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Generate color (HEX format) from string\n * @memberof module:renderer/components/project\n * @param {string} str String\n */\nconst stringToHex = str => {\n  let hash = 0;\n\n  for (let i = 0; i < str.length; ++i) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let colour = '#';\n\n  for (let i = 0; i < 3; i++) {\n    const value = hash >> i * 8 & 0xff;\n    colour += ('00' + value.toString(16)).substr(-2);\n  }\n\n  return colour;\n};\n/**\n * Project data\n * @memberof module:renderer/components/project\n * @param {Object} project Project\n * @param {Function} setTitle Set title\n */\n\n\nconst Data = (project, filter, setTitle) => {\n  var _project$title, _project$title$toLowe;\n\n  // Check\n  if (!project) return null; // Filter\n\n  if (filter && !((_project$title = project.title) !== null && _project$title !== void 0 && (_project$title$toLowe = _project$title.toLowerCase()) !== null && _project$title$toLowe !== void 0 && _project$title$toLowe.includes(filter.toLowerCase()))) return null; // Snapshot\n\n  const snapshot = project.avatar ? /*#__PURE__*/_jsxDEV(\"img\", {\n    src: project && project.avatar,\n    style: {\n      cursor: 'pointer'\n    },\n    width: \"100\",\n    height: \"100\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Empty, {\n    image: _Empty.PRESENTED_IMAGE_SIMPLE,\n    style: {\n      cursor: 'pointer'\n    },\n    description: 'No preview',\n    imageStyle: {\n      width: 150\n    },\n    description: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"No projects yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 20\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this); // Title\n\n  const title = /*#__PURE__*/_jsxDEV(_Typography.Paragraph, {\n    editable: {\n      maxLength: 50,\n      onChange: setTitle\n    },\n    children: project.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this); // Owners avatars\n\n\n  const owners = project && project.owners && project.owners.map(owner => {\n    const avatar = owner.avatar && Buffer.from(owner.avatar).toString();\n    let name = '';\n    let abbrev = '';\n\n    if (owner.firstname || owner.lastname) {\n      name = owner.firstname + ' ' + owner.lastname;\n      abbrev = (owner.firstname && owner.firstname[0]) + (owner.lastname && owner.lastname[0]);\n    } else {\n      name = owner.email;\n      abbrev = owner.email[0];\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Tooltip, {\n      title: name,\n      children: /*#__PURE__*/_jsxDEV(_Avatar, {\n        src: avatar,\n        style: {\n          backgroundColor: stringToHex(name)\n        },\n        children: abbrev.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, owner.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this);\n  }); // Users avatars\n\n  const users = project && project.users && project.users.map(user => {\n    const avatar = user.avatar && Buffer.from(user.avatar).toString();\n    let name = '';\n    let abbrev = '';\n\n    if (user.firstname || user.lastname) {\n      name = user.firstname + ' ' + user.lastname;\n      abbrev = (user.firstname && user.firstname[0]) + (user.lastname && user.lastname[0]);\n    } else {\n      name = user.email;\n      abbrev = user.email[0];\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Tooltip, {\n      title: name,\n      children: /*#__PURE__*/_jsxDEV(_Avatar, {\n        src: avatar,\n        style: {\n          backgroundColor: stringToHex(name)\n        },\n        children: abbrev.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this);\n  });\n  /**\n   * Not a render\n   */\n\n  return _objectSpread(_objectSpread({}, project), {}, {\n    key: project.id,\n    snapshot: snapshot,\n    title: title,\n    owners: /*#__PURE__*/_jsxDEV(_Avatar.Group, {\n      children: owners\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this),\n    users: /*#__PURE__*/_jsxDEV(_Avatar.Group, {\n      children: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 12\n    }, this)\n  });\n};\n\nexport default Data; // TODO\n// import {\n//   ShareAltOutlined,\n//   DeleteOutlined\n//   // SyncOutlined,\n//   // CloudSyncOutlined\n// } from '@ant-design/icons'\n// const tags = (\n//   <Space>\n//     <Tag icon={<SyncOutlined spin />} color=\"processing\">\n//       Running\n//     </Tag>\n//     <Tag icon={<CloudSyncOutlined />} color=\"success\">\n//       Backed-up in the cloud\n//     </Tag>\n//   </Space>\n// )\n// const sharedWith = (\n//   <Avatar.Group\n//     maxCount={3}\n//     maxStyle={{ color: '#f56a00', backgroundColor: '#fde3cf' }}\n//   >\n//     <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n//     <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>\n//     <Tooltip title=\"Ant User\" placement=\"top\">\n//       <Avatar style={{ backgroundColor: '#87d068' }}>F</Avatar>\n//     </Tooltip>\n//     <Avatar style={{ backgroundColor: '#1890ff' }}>S</Avatar>\n//   </Avatar.Group>\n// )","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/project/data/index.js"],"names":["stringToHex","str","hash","i","length","charCodeAt","colour","value","toString","substr","Data","project","filter","setTitle","title","toLowerCase","includes","snapshot","avatar","cursor","PRESENTED_IMAGE_SIMPLE","width","maxLength","onChange","owners","map","owner","Buffer","from","name","abbrev","firstname","lastname","email","backgroundColor","toUpperCase","id","users","user","key"],"mappings":"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","sourcesContent":["import { Avatar, Empty, Tooltip, Typography } from 'antd'\n\n/**\n * Generate color (HEX format) from string\n * @memberof module:renderer/components/project\n * @param {string} str String\n */\nconst stringToHex = (str) => {\n  let hash = 0\n  for (let i = 0; i < str.length; ++i) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n  }\n  let colour = '#'\n  for (let i = 0; i < 3; i++) {\n    const value = (hash >> (i * 8)) & 0xff\n    colour += ('00' + value.toString(16)).substr(-2)\n  }\n  return colour\n}\n\n/**\n * Project data\n * @memberof module:renderer/components/project\n * @param {Object} project Project\n * @param {Function} setTitle Set title\n */\nconst Data = (project, filter, setTitle) => {\n  // Check\n  if (!project) return null\n\n  // Filter\n  if (filter && !project.title?.toLowerCase()?.includes(filter.toLowerCase()))\n    return null\n\n  // Snapshot\n  const snapshot = project.avatar ? (\n    <img\n      src={project && project.avatar}\n      style={{ cursor: 'pointer' }}\n      width=\"100\"\n      height=\"100\"\n    />\n  ) : (\n    <Empty\n      image={Empty.PRESENTED_IMAGE_SIMPLE}\n      style={{ cursor: 'pointer' }}\n      description={'No preview'}\n      imageStyle={{ width: 150 }}\n      description={<span>No projects yet</span>}\n    />\n  )\n\n  // Title\n  const title = (\n    <Typography.Paragraph editable={{ maxLength: 50, onChange: setTitle }}>\n      {project.title}\n    </Typography.Paragraph>\n  )\n\n  // Owners avatars\n  const owners =\n    project &&\n    project.owners &&\n    project.owners.map((owner) => {\n      const avatar = owner.avatar && Buffer.from(owner.avatar).toString()\n      let name = ''\n      let abbrev = ''\n      if (owner.firstname || owner.lastname) {\n        name = owner.firstname + ' ' + owner.lastname\n        abbrev =\n          (owner.firstname && owner.firstname[0]) +\n          (owner.lastname && owner.lastname[0])\n      } else {\n        name = owner.email\n        abbrev = owner.email[0]\n      }\n\n      return (\n        <Tooltip key={owner.id} title={name}>\n          <Avatar src={avatar} style={{ backgroundColor: stringToHex(name) }}>\n            {abbrev.toUpperCase()}\n          </Avatar>\n        </Tooltip>\n      )\n    })\n\n  // Users avatars\n  const users =\n    project &&\n    project.users &&\n    project.users.map((user) => {\n      const avatar = user.avatar && Buffer.from(user.avatar).toString()\n      let name = ''\n      let abbrev = ''\n      if (user.firstname || user.lastname) {\n        name = user.firstname + ' ' + user.lastname\n        abbrev =\n          (user.firstname && user.firstname[0]) +\n          (user.lastname && user.lastname[0])\n      } else {\n        name = user.email\n        abbrev = user.email[0]\n      }\n\n      return (\n        <Tooltip key={user.id} title={name}>\n          <Avatar src={avatar} style={{ backgroundColor: stringToHex(name) }}>\n            {abbrev.toUpperCase()}\n          </Avatar>\n        </Tooltip>\n      )\n    })\n\n  /**\n   * Not a render\n   */\n  return {\n    ...project,\n    key: project.id,\n    snapshot: snapshot,\n    title: title,\n    owners: <Avatar.Group>{owners}</Avatar.Group>,\n    users: <Avatar.Group>{users}</Avatar.Group>\n  }\n}\n\nexport default Data\n\n// TODO\n// import {\n//   ShareAltOutlined,\n//   DeleteOutlined\n//   // SyncOutlined,\n//   // CloudSyncOutlined\n// } from '@ant-design/icons'\n\n// const tags = (\n//   <Space>\n//     <Tag icon={<SyncOutlined spin />} color=\"processing\">\n//       Running\n//     </Tag>\n//     <Tag icon={<CloudSyncOutlined />} color=\"success\">\n//       Backed-up in the cloud\n//     </Tag>\n//   </Space>\n// )\n\n// const sharedWith = (\n//   <Avatar.Group\n//     maxCount={3}\n//     maxStyle={{ color: '#f56a00', backgroundColor: '#fde3cf' }}\n//   >\n//     <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n//     <Avatar style={{ backgroundColor: '#f56a00' }}>K</Avatar>\n//     <Tooltip title=\"Ant User\" placement=\"top\">\n//       <Avatar style={{ backgroundColor: '#87d068' }}>F</Avatar>\n//     </Tooltip>\n//     <Avatar style={{ backgroundColor: '#1890ff' }}>S</Avatar>\n//   </Avatar.Group>\n// )\n"]},"metadata":{},"sourceType":"module"}