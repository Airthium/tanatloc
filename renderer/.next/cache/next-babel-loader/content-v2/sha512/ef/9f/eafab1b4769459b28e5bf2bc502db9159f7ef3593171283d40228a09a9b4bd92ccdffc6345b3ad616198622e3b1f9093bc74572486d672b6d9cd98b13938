{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/background/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n/** @module renderer/components/background */\nimport { useRef, useEffect } from 'react';\nimport { Mesh, MeshBasicMaterial, PerspectiveCamera, Scene, TetrahedronGeometry, Vector3, WebGLRenderer } from 'three/build/three.module';\n/**\n * Background\n */\n\nvar Background = function Background() {\n  _s();\n\n  // Parameters\n  var numberOfTetrahedra = 100;\n  var rotationSpeed = 0.005; // Ref\n\n  var mount = useRef(null); // Mount\n\n  useEffect(function () {\n    var div = mount.current;\n    var frameId;\n    var width = div.clientWidth;\n    var height = div.clientHeight; // Scene\n\n    var scene = new Scene(); // Camera\n\n    var camera = new PerspectiveCamera(10, width / height, 0.1, 1000);\n    camera.position.z = 10; // Renderer\n\n    var renderer = new WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      powerPreference: 'low-power'\n    });\n    renderer.setClearColor('#ffffff', 0);\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(window.devicePixelRatio || 1); // Mount\n\n    div.appendChild(renderer.domElement); // Tetrahedra\n    // Rotations\n\n    var rotationX = [];\n    var rotationY = [];\n    var rotationZ = []; // Visible height & width\n\n    var offset = camera.position.z;\n    var hFOV = camera.fov * Math.PI / 180;\n    var h = 2 * Math.tan(hFOV / 2) * offset;\n    var w = h * camera.aspect; // Build tetra\n\n    for (var i = 0; i < numberOfTetrahedra; ++i) {\n      var rand = Math.random();\n      var material = new MeshBasicMaterial({\n        color: rand * 0x0096c7 + (1 - rand) * 0xffffff,\n        wireframe: true,\n        transparent: true,\n        opacity: 0.2\n      });\n      var geometry = new TetrahedronGeometry(0.1 * Math.random());\n      geometry.translate(-1.2 * w / 2 + 1.2 * w * Math.random(), -1.2 * h / 2 + 1.2 * h * Math.random(), 0);\n      geometry.lookAt(new Vector3(-1 + 2 * Math.random(), -1 + 2 * Math.random(), -1 + 2 * Math.random()));\n      rotationX.push(-rotationSpeed / 2 + rotationSpeed * Math.random());\n      rotationY.push(-rotationSpeed / 2 + rotationSpeed * Math.random());\n      rotationZ.push(-rotationSpeed / 2 + rotationSpeed * Math.random());\n      var mesh = new Mesh(geometry, material);\n      scene.add(mesh);\n    }\n    /**\n     * Resize\n     */\n\n\n    var resize = function resize() {\n      width = div.clientWidth;\n      height = div.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    /**\n     * Render scene\n     */\n\n\n    var renderScene = function renderScene() {\n      scene.children.forEach(function (child, index) {\n        child.rotation.x += rotationY[index];\n        child.rotation.y += rotationX[index];\n        child.rotation.z += rotationZ[index];\n      });\n      renderer.render(scene, camera);\n    };\n    /**\n     * Animate\n     */\n\n\n    var animate = function animate() {\n      renderScene();\n      frameId = requestAnimationFrame(animate);\n    };\n    /**\n     * Stop\n     */\n\n\n    var stop = function stop() {\n      cancelAnimationFrame(frameId);\n    }; // Start\n\n\n    animate(); // Event listener\n\n    window.addEventListener('resize', resize); // Unmount\n\n    return function () {\n      // Stop\n      stop(); // Remove event listener\n\n      window.removeEventListener('resize', resize); // Unmount renderer\n\n      div.removeChild(renderer.domElement); // Clear scene\n\n      scene.children.forEach(function (child) {\n        child.geometry.dispose();\n        child.material.dispose();\n        scene.remove(child);\n      });\n    };\n  }, []);\n  /**\n   * Render\n   */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Background\",\n    ref: mount\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Background, \"VsDVEZQQomRDktK9EJ6nQJmx4cI=\");\n\n_c = Background;\nexport default Background;\n\nvar _c;\n\n$RefreshReg$(_c, \"Background\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/background/index.js"],"names":["useRef","useEffect","Mesh","MeshBasicMaterial","PerspectiveCamera","Scene","TetrahedronGeometry","Vector3","WebGLRenderer","Background","numberOfTetrahedra","rotationSpeed","mount","div","current","frameId","width","clientWidth","height","clientHeight","scene","camera","position","z","renderer","antialias","alpha","powerPreference","setClearColor","setSize","setPixelRatio","window","devicePixelRatio","appendChild","domElement","rotationX","rotationY","rotationZ","offset","hFOV","fov","Math","PI","h","tan","w","aspect","i","rand","random","material","color","wireframe","transparent","opacity","geometry","translate","lookAt","push","mesh","add","resize","updateProjectionMatrix","renderScene","children","forEach","child","index","rotation","x","y","render","animate","requestAnimationFrame","stop","cancelAnimationFrame","addEventListener","removeEventListener","removeChild","dispose","remove"],"mappings":"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","sourcesContent":["/** @module renderer/components/background */\n\nimport { useRef, useEffect } from 'react'\nimport {\n  Mesh,\n  MeshBasicMaterial,\n  PerspectiveCamera,\n  Scene,\n  TetrahedronGeometry,\n  Vector3,\n  WebGLRenderer\n} from 'three/build/three.module'\n\n/**\n * Background\n */\nconst Background = () => {\n  // Parameters\n  const numberOfTetrahedra = 100\n  const rotationSpeed = 0.005\n\n  // Ref\n  const mount = useRef(null)\n\n  // Mount\n  useEffect(() => {\n    const div = mount.current\n\n    let frameId\n\n    let width = div.clientWidth\n    let height = div.clientHeight\n\n    // Scene\n    const scene = new Scene()\n\n    // Camera\n    const camera = new PerspectiveCamera(10, width / height, 0.1, 1000)\n    camera.position.z = 10\n\n    // Renderer\n    const renderer = new WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      powerPreference: 'low-power'\n    })\n    renderer.setClearColor('#ffffff', 0)\n    renderer.setSize(width, height)\n    renderer.setPixelRatio(window.devicePixelRatio || 1)\n\n    // Mount\n    div.appendChild(renderer.domElement)\n\n    // Tetrahedra\n    // Rotations\n    const rotationX = []\n    const rotationY = []\n    const rotationZ = []\n    // Visible height & width\n    const offset = camera.position.z\n    const hFOV = (camera.fov * Math.PI) / 180\n    const h = 2 * Math.tan(hFOV / 2) * offset\n    const w = h * camera.aspect\n    // Build tetra\n    for (let i = 0; i < numberOfTetrahedra; ++i) {\n      const rand = Math.random()\n      const material = new MeshBasicMaterial({\n        color: rand * 0x0096c7 + (1 - rand) * 0xffffff,\n        wireframe: true,\n        transparent: true,\n        opacity: 0.2\n      })\n\n      const geometry = new TetrahedronGeometry(0.1 * Math.random())\n      geometry.translate(\n        (-1.2 * w) / 2 + 1.2 * w * Math.random(),\n        (-1.2 * h) / 2 + 1.2 * h * Math.random(),\n        0\n      )\n      geometry.lookAt(\n        new Vector3(\n          -1 + 2 * Math.random(),\n          -1 + 2 * Math.random(),\n          -1 + 2 * Math.random()\n        )\n      )\n      rotationX.push(-rotationSpeed / 2 + rotationSpeed * Math.random())\n      rotationY.push(-rotationSpeed / 2 + rotationSpeed * Math.random())\n      rotationZ.push(-rotationSpeed / 2 + rotationSpeed * Math.random())\n\n      const mesh = new Mesh(geometry, material)\n      scene.add(mesh)\n    }\n\n    /**\n     * Resize\n     */\n    const resize = () => {\n      width = div.clientWidth\n      height = div.clientHeight\n      renderer.setSize(width, height)\n      camera.aspect = width / height\n      camera.updateProjectionMatrix()\n    }\n\n    /**\n     * Render scene\n     */\n    const renderScene = () => {\n      scene.children.forEach((child, index) => {\n        child.rotation.x += rotationY[index]\n        child.rotation.y += rotationX[index]\n        child.rotation.z += rotationZ[index]\n      })\n\n      renderer.render(scene, camera)\n    }\n\n    /**\n     * Animate\n     */\n    const animate = () => {\n      renderScene()\n      frameId = requestAnimationFrame(animate)\n    }\n\n    /**\n     * Stop\n     */\n    const stop = () => {\n      cancelAnimationFrame(frameId)\n    }\n\n    // Start\n    animate()\n\n    // Event listener\n    window.addEventListener('resize', resize)\n\n    // Unmount\n    return () => {\n      // Stop\n      stop()\n\n      // Remove event listener\n      window.removeEventListener('resize', resize)\n\n      // Unmount renderer\n      div.removeChild(renderer.domElement)\n\n      // Clear scene\n      scene.children.forEach((child) => {\n        child.geometry.dispose()\n        child.material.dispose()\n        scene.remove(child)\n      })\n    }\n  }, [])\n\n  /**\n   * Render\n   */\n  return <div className=\"Background\" ref={mount} />\n}\n\nexport default Background\n"]},"metadata":{},"sourceType":"module"}