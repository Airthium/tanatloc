{"ast":null,"code":"import { Color } from '../../../build/three.module.js';\n\nvar Lut = function Lut(colormap, numberofcolors) {\n  this.lut = [];\n  this.setColorMap(colormap, numberofcolors);\n  return this;\n};\n\n_c = Lut;\nLut.prototype = {\n  constructor: Lut,\n  lut: [],\n  map: [],\n  n: 256,\n  minV: 0,\n  maxV: 1,\n  set: function set(value) {\n    if (value instanceof Lut) {\n      this.copy(value);\n    }\n\n    return this;\n  },\n  setMin: function setMin(min) {\n    this.minV = min;\n    return this;\n  },\n  setMax: function setMax(max) {\n    this.maxV = max;\n    return this;\n  },\n  setColorMap: function setColorMap(colormap, numberofcolors) {\n    this.map = ColorMapKeywords[colormap] || ColorMapKeywords.rainbow;\n    this.n = numberofcolors || 32;\n    var step = 1.0 / this.n;\n    this.lut.length = 0;\n\n    for (var i = 0; i <= 1; i += step) {\n      for (var j = 0; j < this.map.length - 1; j++) {\n        if (i >= this.map[j][0] && i < this.map[j + 1][0]) {\n          var min = this.map[j][0];\n          var max = this.map[j + 1][0];\n          var minColor = new Color(this.map[j][1]);\n          var maxColor = new Color(this.map[j + 1][1]);\n          var color = minColor.lerp(maxColor, (i - min) / (max - min));\n          this.lut.push(color);\n        }\n      }\n    }\n\n    return this;\n  },\n  copy: function copy(lut) {\n    this.lut = lut.lut;\n    this.map = lut.map;\n    this.n = lut.n;\n    this.minV = lut.minV;\n    this.maxV = lut.maxV;\n    return this;\n  },\n  getColor: function getColor(alpha) {\n    if (alpha <= this.minV) {\n      alpha = this.minV;\n    } else if (alpha >= this.maxV) {\n      alpha = this.maxV;\n    }\n\n    alpha = (alpha - this.minV) / (this.maxV - this.minV);\n    var colorPosition = Math.round(alpha * this.n);\n    colorPosition == this.n ? colorPosition -= 1 : colorPosition;\n    return this.lut[colorPosition];\n  },\n  addColorMap: function addColorMap(colormapName, arrayOfColors) {\n    ColorMapKeywords[colormapName] = arrayOfColors;\n  },\n  createCanvas: function createCanvas() {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = this.n;\n    this.updateCanvas(canvas);\n    return canvas;\n  },\n  updateCanvas: function updateCanvas(canvas) {\n    var ctx = canvas.getContext('2d', {\n      alpha: false\n    });\n    var imageData = ctx.getImageData(0, 0, 1, this.n);\n    var data = imageData.data;\n    var k = 0;\n    var step = 1.0 / this.n;\n\n    for (var i = 1; i >= 0; i -= step) {\n      for (var j = this.map.length - 1; j >= 0; j--) {\n        if (i < this.map[j][0] && i >= this.map[j - 1][0]) {\n          var min = this.map[j - 1][0];\n          var max = this.map[j][0];\n          var minColor = new Color(this.map[j - 1][1]);\n          var maxColor = new Color(this.map[j][1]);\n          var color = minColor.lerp(maxColor, (i - min) / (max - min));\n          data[k * 4] = Math.round(color.r * 255);\n          data[k * 4 + 1] = Math.round(color.g * 255);\n          data[k * 4 + 2] = Math.round(color.b * 255);\n          data[k * 4 + 3] = 255;\n          k += 1;\n        }\n      }\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n};\nvar ColorMapKeywords = {\n  'rainbow': [[0.0, 0x0000FF], [0.2, 0x00FFFF], [0.5, 0x00FF00], [0.8, 0xFFFF00], [1.0, 0xFF0000]],\n  'cooltowarm': [[0.0, 0x3C4EC2], [0.2, 0x9BBCFF], [0.5, 0xDCDCDC], [0.8, 0xF6A385], [1.0, 0xB40426]],\n  'blackbody': [[0.0, 0x000000], [0.2, 0x780000], [0.5, 0xE63200], [0.8, 0xFFFF00], [1.0, 0xFFFFFF]],\n  'grayscale': [[0.0, 0x000000], [0.2, 0x404040], [0.5, 0x7F7F80], [0.8, 0xBFBFBF], [1.0, 0xFFFFFF]]\n};\nexport { Lut, ColorMapKeywords };\n\nvar _c;\n\n$RefreshReg$(_c, \"Lut\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/node_modules/three/examples/jsm/math/Lut.js"],"names":["Color","Lut","colormap","numberofcolors","lut","setColorMap","prototype","constructor","map","n","minV","maxV","set","value","copy","setMin","min","setMax","max","ColorMapKeywords","rainbow","step","length","i","j","minColor","maxColor","color","lerp","push","getColor","alpha","colorPosition","Math","round","addColorMap","colormapName","arrayOfColors","createCanvas","canvas","document","createElement","width","height","updateCanvas","ctx","getContext","imageData","getImageData","data","k","r","g","b","putImageData"],"mappings":"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","sourcesContent":["import {\n\tColor\n} from '../../../build/three.module.js';\n\nvar Lut = function ( colormap, numberofcolors ) {\n\n\tthis.lut = [];\n\tthis.setColorMap( colormap, numberofcolors );\n\treturn this;\n\n};\n\nLut.prototype = {\n\n\tconstructor: Lut,\n\n\tlut: [], map: [], n: 256, minV: 0, maxV: 1,\n\n\tset: function ( value ) {\n\n\t\tif ( value instanceof Lut ) {\n\n\t\t\tthis.copy( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetMin: function ( min ) {\n\n\t\tthis.minV = min;\n\n\t\treturn this;\n\n\t},\n\n\tsetMax: function ( max ) {\n\n\t\tthis.maxV = max;\n\n\t\treturn this;\n\n\t},\n\n\tsetColorMap: function ( colormap, numberofcolors ) {\n\n\t\tthis.map = ColorMapKeywords[ colormap ] || ColorMapKeywords.rainbow;\n\t\tthis.n = numberofcolors || 32;\n\n\t\tvar step = 1.0 / this.n;\n\n\t\tthis.lut.length = 0;\n\t\tfor ( var i = 0; i <= 1; i += step ) {\n\n\t\t\tfor ( var j = 0; j < this.map.length - 1; j ++ ) {\n\n\t\t\t\tif ( i >= this.map[ j ][ 0 ] && i < this.map[ j + 1 ][ 0 ] ) {\n\n\t\t\t\t\tvar min = this.map[ j ][ 0 ];\n\t\t\t\t\tvar max = this.map[ j + 1 ][ 0 ];\n\n\t\t\t\t\tvar minColor = new Color( this.map[ j ][ 1 ] );\n\t\t\t\t\tvar maxColor = new Color( this.map[ j + 1 ][ 1 ] );\n\n\t\t\t\t\tvar color = minColor.lerp( maxColor, ( i - min ) / ( max - min ) );\n\n\t\t\t\t\tthis.lut.push( color );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( lut ) {\n\n\t\tthis.lut = lut.lut;\n\t\tthis.map = lut.map;\n\t\tthis.n = lut.n;\n\t\tthis.minV = lut.minV;\n\t\tthis.maxV = lut.maxV;\n\n\t\treturn this;\n\n\t},\n\n\tgetColor: function ( alpha ) {\n\n\t\tif ( alpha <= this.minV ) {\n\n\t\t\talpha = this.minV;\n\n\t\t} else if ( alpha >= this.maxV ) {\n\n\t\t\talpha = this.maxV;\n\n\t\t}\n\n\t\talpha = ( alpha - this.minV ) / ( this.maxV - this.minV );\n\n\t\tvar colorPosition = Math.round( alpha * this.n );\n\t\tcolorPosition == this.n ? colorPosition -= 1 : colorPosition;\n\n\t\treturn this.lut[ colorPosition ];\n\n\t},\n\n\taddColorMap: function ( colormapName, arrayOfColors ) {\n\n\t\tColorMapKeywords[ colormapName ] = arrayOfColors;\n\n\t},\n\n\tcreateCanvas: function () {\n\n\t\tvar canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = 1;\n\t\tcanvas.height = this.n;\n\n\t\tthis.updateCanvas( canvas );\n\n\t\treturn canvas;\n\n\t},\n\n\tupdateCanvas: function ( canvas ) {\n\n\t\tvar ctx = canvas.getContext( '2d', { alpha: false } );\n\n\t\tvar imageData = ctx.getImageData( 0, 0, 1, this.n );\n\n\t\tvar data = imageData.data;\n\n\t\tvar k = 0;\n\n\t\tvar step = 1.0 / this.n;\n\n\t\tfor ( var i = 1; i >= 0; i -= step ) {\n\n\t\t\tfor ( var j = this.map.length - 1; j >= 0; j -- ) {\n\n\t\t\t\tif ( i < this.map[ j ][ 0 ] && i >= this.map[ j - 1 ][ 0 ] ) {\n\n\t\t\t\t\tvar min = this.map[ j - 1 ][ 0 ];\n\t\t\t\t\tvar max = this.map[ j ][ 0 ];\n\n\t\t\t\t\tvar minColor = new Color( this.map[ j - 1 ][ 1 ] );\n\t\t\t\t\tvar maxColor = new Color( this.map[ j ][ 1 ] );\n\n\t\t\t\t\tvar color = minColor.lerp( maxColor, ( i - min ) / ( max - min ) );\n\n\t\t\t\t\tdata[ k * 4 ] = Math.round( color.r * 255 );\n\t\t\t\t\tdata[ k * 4 + 1 ] = Math.round( color.g * 255 );\n\t\t\t\t\tdata[ k * 4 + 2 ] = Math.round( color.b * 255 );\n\t\t\t\t\tdata[ k * 4 + 3 ] = 255;\n\n\t\t\t\t\tk += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tctx.putImageData( imageData, 0, 0 );\n\n\t\treturn canvas;\n\n\t}\n};\n\nvar ColorMapKeywords = {\n\n\t'rainbow': [[ 0.0, 0x0000FF ], [ 0.2, 0x00FFFF ], [ 0.5, 0x00FF00 ], [ 0.8, 0xFFFF00 ], [ 1.0, 0xFF0000 ]],\n\t'cooltowarm': [[ 0.0, 0x3C4EC2 ], [ 0.2, 0x9BBCFF ], [ 0.5, 0xDCDCDC ], [ 0.8, 0xF6A385 ], [ 1.0, 0xB40426 ]],\n\t'blackbody': [[ 0.0, 0x000000 ], [ 0.2, 0x780000 ], [ 0.5, 0xE63200 ], [ 0.8, 0xFFFF00 ], [ 1.0, 0xFFFFFF ]],\n\t'grayscale': [[ 0.0, 0x000000 ], [ 0.2, 0x404040 ], [ 0.5, 0x7F7F80 ], [ 0.8, 0xBFBFBF ], [ 1.0, 0xFFFFFF ]]\n\n};\n\nexport { Lut, ColorMapKeywords };\n"]},"metadata":{},"sourceType":"module"}