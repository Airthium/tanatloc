{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _Card from \"antd/lib/card\";\nimport _Space from \"antd/lib/space\";\nimport _Button from \"antd/lib/button\";\nimport _Typography from \"antd/lib/typography\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/account/hpc/list.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Error } from '../../assets/notification';\nimport PluginForm from './pluginForm';\nimport Delete from './delete';\nimport PluginAPI from '../../../../src/api/plugin';\n/**\n * Errors hpc/list\n */\n\nvar errors = {\n  updateError: 'Unable to update the plugin'\n};\n/**\n * Plugins list\n * @param {Object} props Props\n */\n\nvar List = function List(_ref) {\n  _s();\n\n  var plugin = _ref.plugin;\n\n  // State\n  var _useState = useState([]),\n      list = _useState[0],\n      setList = _useState[1];\n\n  var _useState2 = useState(false),\n      edit = _useState2[0],\n      setEdit = _useState2[1]; // Data\n\n\n  var _PluginAPI$usePlugins = PluginAPI.usePlugins(),\n      _PluginAPI$usePlugins2 = _slicedToArray(_PluginAPI$usePlugins, 2),\n      plugins = _PluginAPI$usePlugins2[0],\n      mutateOnePlugin = _PluginAPI$usePlugins2[1].mutateOnePlugin; // List\n\n\n  useEffect(function () {\n    var pluginsList = plugins.map(function (p) {\n      if (p.key !== plugin.key) return;\n      var configuration = p.configuration;\n      return /*#__PURE__*/_jsxDEV(_Card, {\n        title: configuration.name.value,\n        style: {\n          marginTop: '10px'\n        },\n        children: [edit ? /*#__PURE__*/_jsxDEV(PluginForm, {\n          plugin: p,\n          onFinish: function onFinish(values) {\n            return onEdit(p, values);\n          },\n          onCancel: function onCancel() {\n            return setEdit(false);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, _this) : Object.keys(configuration).map(function (key) {\n          if (key === 'name') return;\n          return /*#__PURE__*/_jsxDEV(_Typography.Paragraph, {\n            children: [/*#__PURE__*/_jsxDEV(_Typography.Text, {\n              strong: true,\n              children: [configuration[key].label, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 19\n            }, _this), ' ', /*#__PURE__*/_jsxDEV(_Typography.Text, {\n              children: configuration[key].type === 'password' ? '******' : configuration[key].value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 19\n            }, _this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, _this);\n        }), /*#__PURE__*/_jsxDEV(_Space, {\n          children: [/*#__PURE__*/_jsxDEV(_Button, {\n            disabled: edit,\n            onClick: function onClick() {\n              return setEdit(true);\n            },\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Delete, {\n            plugin: p\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, _this)]\n      }, p.uuid, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, _this);\n    });\n    setList(pluginsList);\n  }, [JSON.stringify(plugins), plugin, edit]);\n  /**\n   * On edit\n   * @param {Object} initialPlugin Plugin\n   * @param {Object} values Values\n   */\n\n  var onEdit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(initialPlugin, values) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              // Set values\n              Object.keys(values).forEach(function (key) {\n                initialPlugin.configuration[key].value = values[key];\n              }); // API\n\n              _context.next = 4;\n              return PluginAPI.update(initialPlugin);\n\n            case 4:\n              // Mutate\n              mutateOnePlugin(initialPlugin); // Finish\n\n              setEdit(false);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              Error(errors.updateError, _context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function onEdit(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Render\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: list\n  }, void 0, false);\n};\n\n_s(List, \"zRTUkCyn6FkljX2IQIWt1k4xmAo=\", false, function () {\n  return [PluginAPI.usePlugins];\n});\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/components/account/hpc/list.js"],"names":["useState","useEffect","Error","PluginForm","Delete","PluginAPI","errors","updateError","List","plugin","list","setList","edit","setEdit","usePlugins","plugins","mutateOnePlugin","pluginsList","map","p","key","configuration","name","value","marginTop","values","onEdit","Object","keys","label","type","uuid","JSON","stringify","initialPlugin","forEach","update"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Button, Card, Space, Typography } from 'antd'\n\nimport { Error } from '../../assets/notification'\nimport PluginForm from './pluginForm'\nimport Delete from './delete'\n\nimport PluginAPI from '../../../../src/api/plugin'\n\n/**\n * Errors hpc/list\n */\nconst errors = {\n  updateError: 'Unable to update the plugin'\n}\n\n/**\n * Plugins list\n * @param {Object} props Props\n */\nconst List = ({ plugin }) => {\n  // State\n  const [list, setList] = useState([])\n  const [edit, setEdit] = useState(false)\n\n  // Data\n  const [plugins, { mutateOnePlugin }] = PluginAPI.usePlugins()\n\n  // List\n  useEffect(() => {\n    const pluginsList = plugins.map((p) => {\n      if (p.key !== plugin.key) return\n\n      const configuration = p.configuration\n      return (\n        <Card\n          key={p.uuid}\n          title={configuration.name.value}\n          style={{ marginTop: '10px' }}\n        >\n          {edit ? (\n            <PluginForm\n              plugin={p}\n              onFinish={(values) => onEdit(p, values)}\n              onCancel={() => setEdit(false)}\n            />\n          ) : (\n            Object.keys(configuration).map((key) => {\n              if (key === 'name') return\n              return (\n                <Typography.Paragraph key={key}>\n                  <Typography.Text strong={true}>\n                    {configuration[key].label}:\n                  </Typography.Text>{' '}\n                  <Typography.Text>\n                    {configuration[key].type === 'password'\n                      ? '******'\n                      : configuration[key].value}\n                  </Typography.Text>\n                </Typography.Paragraph>\n              )\n            })\n          )}\n          <Space>\n            <Button disabled={edit} onClick={() => setEdit(true)}>\n              Edit\n            </Button>\n            <Delete plugin={p} />\n          </Space>\n        </Card>\n      )\n    })\n\n    setList(pluginsList)\n  }, [JSON.stringify(plugins), plugin, edit])\n\n  /**\n   * On edit\n   * @param {Object} initialPlugin Plugin\n   * @param {Object} values Values\n   */\n  const onEdit = async (initialPlugin, values) => {\n    try {\n      // Set values\n      Object.keys(values).forEach((key) => {\n        initialPlugin.configuration[key].value = values[key]\n      })\n\n      // API\n      await PluginAPI.update(initialPlugin)\n\n      // Mutate\n      mutateOnePlugin(initialPlugin)\n\n      // Finish\n      setEdit(false)\n    } catch (err) {\n      Error(errors.updateError, err)\n    }\n  }\n\n  /**\n   * Render\n   */\n  return <>{list}</>\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}