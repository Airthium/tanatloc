{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport auth, { authInitialState } from './auth/reducer';\nlet store;\nconst globalInitialState = {\n  auth: authInitialState\n}; // COMBINE\n\nconst combinedReducers = combineReducers({\n  auth\n}); // REDUCERS\n\nexport const reducer = (state = globalInitialState, action) => {\n  return combinedReducers(state, action);\n}; // PERSIST\n\nconst persistConfig = {\n  key: 'primary',\n  storage // whitelist: ['auth'] // place to select which state you want to persist\n\n};\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nfunction makeStore(initialState = globalInitialState) {\n  return createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware()));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : makeStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = makeStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/home/simon/Documents/Git/Airthium/tanatloc-ssr/renderer/store/store.js"],"names":["useMemo","createStore","applyMiddleware","combineReducers","composeWithDevTools","persistReducer","storage","auth","authInitialState","store","globalInitialState","combinedReducers","reducer","state","action","persistConfig","key","persistedReducer","makeStore","initialState","initializeStore","preloadedState","_store","getState","undefined","useStore"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,IAAP,IAAeC,gBAAf,QAAuC,gBAAvC;AAEA,IAAIC,KAAJ;AAEA,MAAMC,kBAAkB,GAAG;AACzBH,EAAAA,IAAI,EAAEC;AADmB,CAA3B,C,CAIA;;AACA,MAAMG,gBAAgB,GAAGR,eAAe,CAAC;AACvCI,EAAAA;AADuC,CAAD,CAAxC,C,CAIA;;AACA,OAAO,MAAMK,OAAO,GAAG,CAACC,KAAK,GAAGH,kBAAT,EAA6BI,MAA7B,KAAwC;AAC7D,SAAOH,gBAAgB,CAACE,KAAD,EAAQC,MAAR,CAAvB;AACD,CAFM,C,CAIP;;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,SADe;AAEpBV,EAAAA,OAFoB,CAGpB;;AAHoB,CAAtB;AAMA,MAAMW,gBAAgB,GAAGZ,cAAc,CAACU,aAAD,EAAgBH,OAAhB,CAAvC;;AAEA,SAASM,SAAT,CAAmBC,YAAY,GAAGT,kBAAlC,EAAsD;AACpD,SAAOT,WAAW,CAChBgB,gBADgB,EAEhBE,YAFgB,EAGhBf,mBAAmB,CAACF,eAAe,EAAhB,CAHH,CAAlB;AAKD;;AAED,OAAO,MAAMkB,eAAe,GAAIC,cAAD,IAAoB;AAAA;;AACjD,MAAIC,MAAM,cAAGb,KAAH,6CAAYS,SAAS,CAACG,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIZ,KAAtB,EAA6B;AAC3Ba,IAAAA,MAAM,GAAGJ,SAAS,iCACbT,KAAK,CAACc,QAAN,EADa,GAEbF,cAFa,EAAlB,CAD2B,CAK3B;;AACAZ,IAAAA,KAAK,GAAGe,SAAR;AACD,GAZgD,CAcjD;;;AACA,YAAmC,OAAOF,MAAP,CAfc,CAgBjD;;AACA,MAAI,CAACb,KAAL,EAAYA,KAAK,GAAGa,MAAR;AAEZ,SAAOA,MAAP;AACD,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBN,YAAlB,EAAgC;AACrC,QAAMV,KAAK,GAAGT,OAAO,CAAC,MAAMoB,eAAe,CAACD,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOV,KAAP;AACD","sourcesContent":["import { useMemo } from 'react'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport auth, { authInitialState } from './auth/reducer'\n\nlet store\n\nconst globalInitialState = {\n  auth: authInitialState\n}\n\n// COMBINE\nconst combinedReducers = combineReducers({\n  auth\n})\n\n// REDUCERS\nexport const reducer = (state = globalInitialState, action) => {\n  return combinedReducers(state, action)\n}\n\n// PERSIST\nconst persistConfig = {\n  key: 'primary',\n  storage\n  // whitelist: ['auth'] // place to select which state you want to persist\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\n\nfunction makeStore(initialState = globalInitialState) {\n  return createStore(\n    persistedReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware())\n  )\n}\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? makeStore(preloadedState)\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = makeStore({\n      ...store.getState(),\n      ...preloadedState\n    })\n    // Reset the current store\n    store = undefined\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === 'undefined') return _store\n  // Create the store once in the client\n  if (!store) store = _store\n\n  return _store\n}\n\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState])\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}