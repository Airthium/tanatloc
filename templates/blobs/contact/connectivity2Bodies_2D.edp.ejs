// This function helps to determine:

// 1- Connectivity matrix Conne: for each dof at the contact area gives the segment ID (1,...,Th.nbe) connected to the dof
// 2- Connectivity matrix vector Connevec: for each dof at the contact area gives the number of segments connected to the dof (1 or 2)
// 3- Segment dof segdof (2 dof because 2 vertices and corresponds to x dof)
// 4- Connectivity matrix Conorm: for each general dof => the segment ID (1,...,Th.nbe) connected to the dof
// 5- Connectivity matrix vector Conormvec: for each general dof gives the number of segments connected to the dof (1 or 2)
<%# TODO review with Houssam -%>
func int connectivity(int &nC1, int &nC2, int[int, int] &Conne1, int[int, int] &Conne2, int[int] &Connevec1, int[int] &Connevec2, int[int] &segdof1, int[int] &segdof2, int[int] &vertdof1, int[int] &vertdof2, real[int] &DofsOnCont1, real[int] &DofsOnCont2, int[int] &IDni1, int[int] &IDni2, int[int] &segid1, int[int] &segid2, int[int, int] &Conorm1, int[int, int] &Conorm2, int[int] &Conormvec1, int[int] &Conormvec2) {
    
    int nsegment1 = nC1 - 1;
    int nsegment2 = nC2 - 1;
    int tr = 0; // A counter
    
    IDni1 = - 1;
    IDni2 = - 1;
    
    // First body
    for (int ni = 0; ni < Th1.nbe; ni++) {
        // Loop on the boundary elements of the body 1
        int tri = Th1.be(ni).Element; // Triangle number
        int dof1x = Wh1(tri, 0); // x dof of the first node
        int dof2x = Wh1(tri, 1); // x dof of the second node
        int dof3x = Wh1(tri, 2); // x dof of the third node
        bool dofin1 = false; // First vertice in the contact area 1?
        bool dofin2 = false; // Second vertice in the contact area 1?
        bool dofin3 = false; // Third vertice in the contact area 1?
        
        if (DofsOnCont1[dof1x]) {
            dofin1 = true; // The first vertice belongs to the contact area 1
        }
        if (DofsOnCont1[dof2x]) {
            dofin2 = true; // The second vertice belongs to the contact area 1
        }
        if (DofsOnCont1[dof3x]) {
            dofin3 = true; // The third vertice belongs to the contact area 1
        }
        
        // ////
        real[int] v1 = [Th1.be(ni)[0].x, Th1.be(ni)[0].y]; // Coord of the first vertex of the bound_ele ni
        real[int] v2 = [Th1.be(ni)[1].x, Th1.be(ni)[1].y]; // Coord of the second vertex of the bound_ele ni
        
        real[int] vtri1 = [Th1[tri][0].x, Th1[tri][0].y]; // Coord of the vertex 0 of the triangle tri
        real[int] vtri2 = [Th1[tri][1].x, Th1[tri][1].y]; // Coord of the vertex 1 of the triangle tri
        real[int] vtri3 = [Th1[tri][2].x, Th1[tri][2].y]; // Coord of the vertex 2 of the triangle tri
        bool ver1bord, ver2bord, ver3bord; // Vertex belongs to the bord ni ?
        
        if (((v1[0] == vtri1[0]) && (v1[1] == vtri1[1])) || ((v2[0] == vtri1[0]) && (v2[1] == vtri1[1]))) {
            ver1bord = true; // Vertex 0 belongs to the bord ni
        }
        else {
            ver1bord = false;
        }
        
        if (((v1[0] == vtri2[0]) && (v1[1] == vtri2[1])) || ((v2[0] == vtri2[0]) && (v2[1] == vtri2[1]))) {
            ver2bord = true; // Vertex 1 belongs to the bord ni
        }
        else {
            ver2bord = false;
        }
        
        if (((v1[0] == vtri3[0]) && (v1[1] == vtri3[1])) || ((v2[0] == vtri3[0]) && (v2[1] == vtri3[1]))) {
            ver3bord = true; // Vertex 2 belongs to the bord ni
        }
        else {
            ver3bord = false;
        }
        // //
        if (ver1bord && ver2bord) {
            // the two vertices belong to the border (think about the corner)
            segdof1[2 * ni] = dof1x;
            segdof1[2 * ni + 1] = dof2x;
            vertdof1[ni] = dof3x; // Vertice which does not belong to the contact area
            
            int pln = Conormvec1[dof1x];
            Conorm1(dof1x, pln) = ni;
            Conormvec1[dof1x] += 1;
            pln = Conormvec1[dof2x];
            Conorm1(dof2x, pln) = ni;
            Conormvec1[dof2x] += 1;
            
            if (dofin1 && dofin2) {
                // A segment belonging to the contact area 1
                int pl = Connevec1[dof1x];
                Conne1(dof1x, pl) = ni;
                Connevec1[dof1x] += 1;
                pl = Connevec1[dof2x];
                Conne1(dof2x, pl) = ni;
                Connevec1[dof2x] += 1;
                IDni1[ni] = tr;
                segid1[tr] = ni;
                tr += 1;
            }
        }
        if (ver1bord && ver3bord) {
            // the two vertices belong to the border (think about the corner)
            segdof1[2 * ni] = dof1x;
            segdof1[2 * ni + 1] = dof3x;
            vertdof1[ni] = dof2x; // Vertice which does not belong to the contact area
            
            int pln = Conormvec1[dof1x];
            Conorm1(dof1x, pln) = ni;
            Conormvec1[dof1x] += 1;
            pln = Conormvec1[dof3x];
            Conorm1(dof3x, pln) = ni;
            Conormvec1[dof3x] += 1;
            
            if (dofin1 && dofin3) {
                // A segment belonging to the contact area 1
                int pl = Connevec1[dof1x];
                Conne1(dof1x, pl) = ni;
                Connevec1[dof1x] += 1;
                pl = Connevec1[dof3x];
                Conne1(dof3x, pl) = ni;
                Connevec1[dof3x] += 1;
                IDni1[ni] = tr;
                segid1[tr] = ni;
                tr += 1;
            }
        }
        if (ver2bord && ver3bord) {
            // the two vertices belong to the border (think about the corner)
            segdof1[2 * ni] = dof2x;
            segdof1[2 * ni + 1] = dof3x;
            vertdof1[ni] = dof1x; // Vertice which does not belong to the contact area
            
            int pln = Conormvec1[dof2x];
            Conorm1(dof2x, pln) = ni;
            Conormvec1[dof2x] += 1;
            pln = Conormvec1[dof3x];
            Conorm1(dof3x, pln) = ni;
            Conormvec1[dof3x] += 1;
            
            if (dofin2 && dofin3) {
                // A segment belonging to the contact area 1
                int pl = Connevec1[dof2x];
                Conne1(dof2x, pl) = ni;
                Connevec1[dof2x] += 1;
                pl = Connevec1[dof3x];
                Conne1(dof3x, pl) = ni;
                Connevec1[dof3x] += 1;
                IDni1[ni] = tr;
                segid1[tr] = ni;
                tr += 1;
            }
        }
    }
    
    // Second body
    
    tr = 0; // A counter
    for (int ni = 0; ni < Th2.nbe; ni++) {
        // Loop on the boundary elements of the body 1
        int tri = Th2.be(ni).Element; // Triangle number
        int dof1x = Wh2(tri, 0); // x dof of the first node
        int dof2x = Wh2(tri, 1); // x dof of the second node
        int dof3x = Wh2(tri, 2); // x dof of the third node
        bool dofin1 = false; // First vertice in the contact area 1?
        bool dofin2 = false; // Second vertice in the contact area 1?
        bool dofin3 = false; // Third vertice in the contact area 1?
        
        if (DofsOnCont2[dof1x]) {
            dofin1 = true; // The first vertice belongs to the contact area 1
        }
        if (DofsOnCont2[dof2x]) {
            dofin2 = true; // The second vertice belongs to the contact area 1
        }
        if (DofsOnCont2[dof3x]) {
            dofin3 = true; // The third vertice belongs to the contact area 1
        }
        
        // ////
        real[int] v1 = [Th2.be(ni)[0].x, Th2.be(ni)[0].y]; // Coord of the first vertex of the bound_ele ni
        real[int] v2 = [Th2.be(ni)[1].x, Th2.be(ni)[1].y]; // Coord of the second vertex of the bound_ele ni
        
        real[int] vtri1 = [Th2[tri][0].x, Th2[tri][0].y]; // Coord of the vertex 0 of the triangle tri
        real[int] vtri2 = [Th2[tri][1].x, Th2[tri][1].y]; // Coord of the vertex 1 of the triangle tri
        real[int] vtri3 = [Th2[tri][2].x, Th2[tri][2].y]; // Coord of the vertex 2 of the triangle tri
        bool ver1bord, ver2bord, ver3bord; // Vertex belongs to the bord ni ?
        
        if (((v1[0] == vtri1[0]) && (v1[1] == vtri1[1])) || ((v2[0] == vtri1[0]) && (v2[1] == vtri1[1]))) {
            ver1bord = true; // Vertex 0 belongs to the bord ni
        }
        else {
            ver1bord = false;
        }
        
        if (((v1[0] == vtri2[0]) && (v1[1] == vtri2[1])) || ((v2[0] == vtri2[0]) && (v2[1] == vtri2[1]))) {
            ver2bord = true; // Vertex 1 belongs to the bord ni
        }
        else {
            ver2bord = false;
        }
        
        if (((v1[0] == vtri3[0]) && (v1[1] == vtri3[1])) || ((v2[0] == vtri3[0]) && (v2[1] == vtri3[1]))) {
            ver3bord = true; // Vertex 2 belongs to the bord ni
        }
        else {
            ver3bord = false;
        }
        // //
        if (ver1bord && ver2bord) {
            // the two vertices belong to the border (think about the corner)
            segdof2[2 * ni] = dof1x;
            segdof2[2 * ni + 1] = dof2x;
            vertdof2[ni] = dof3x; // Vertice which does not belong to the contact area
            
            int pln = Conormvec2[dof1x];
            Conorm2(dof1x, pln) = ni;
            Conormvec2[dof1x] += 1;
            pln = Conormvec2[dof2x];
            Conorm2(dof2x, pln) = ni;
            Conormvec2[dof2x] += 1;
            
            if (dofin1 && dofin2) {
                // A segment belonging to the contact area 1
                int pl = Connevec2[dof1x];
                Conne2(dof1x, pl) = ni;
                Connevec2[dof1x] += 1;
                pl = Connevec2[dof2x];
                Conne2(dof2x, pl) = ni;
                Connevec2[dof2x] += 1;
                IDni2[ni] = tr;
                segid2[tr] = ni;
                tr += 1;
            }
        }
        if (ver1bord && ver3bord) {
            // the two vertices belong to the border (think about the corner)
            segdof2[2 * ni] = dof1x;
            segdof2[2 * ni + 1] = dof3x;
            vertdof2[ni] = dof2x; // Vertice which does not belong to the contact area
            
            int pln = Conormvec2[dof1x];
            Conorm2(dof1x, pln) = ni;
            Conormvec2[dof1x] += 1;
            pln = Conormvec2[dof3x];
            Conorm2(dof3x, pln) = ni;
            Conormvec2[dof3x] += 1;
            
            if (dofin1 && dofin3) {
                // A segment belonging to the contact area 1
                int pl = Connevec2[dof1x];
                Conne2(dof1x, pl) = ni;
                Connevec2[dof1x] += 1;
                pl = Connevec2[dof3x];
                Conne2(dof3x, pl) = ni;
                Connevec2[dof3x] += 1;
                IDni2[ni] = tr;
                segid2[tr] = ni;
                tr += 1;
            }
        }
        if (ver2bord && ver3bord) {
            // the two vertices belong to the border (think about the corner)
            segdof2[2 * ni] = dof2x;
            segdof2[2 * ni + 1] = dof3x;
            vertdof2[ni] = dof1x; // Vertice which does not belong to the contact area
            
            int pln = Conormvec2[dof2x];
            Conorm2(dof2x, pln) = ni;
            Conormvec2[dof2x] += 1;
            pln = Conormvec2[dof3x];
            Conorm2(dof3x, pln) = ni;
            Conormvec2[dof3x] += 1;
            
            if (dofin2 && dofin3) {
                // A segment belonging to the contact area 1
                int pl = Connevec2[dof2x];
                Conne2(dof2x, pl) = ni;
                Connevec2[dof2x] += 1;
                pl = Connevec2[dof3x];
                Conne2(dof3x, pl) = ni;
                Connevec2[dof3x] += 1;
                IDni2[ni] = tr;
                segid2[tr] = ni;
                tr += 1;
            }
        }
    }
    return 0;
}