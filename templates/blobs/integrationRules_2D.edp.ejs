// Integration points number by segment
int integrationPointsNumber;
// Positions
real[int] integrationPointsPositions;
// Weights
real[int] integrationPointsWeights;

func int integrationRule(string integrationRule) {
    if (integrationRule == "Gauss3") {
        // Gauss quadrature IP
        integrationPointsNumber = 3;
        real t1 = (1 - (3. / 5.)^0.5) / 2.;
        real t2 = 1. / 2.;
        real t3 = (1 + (3. / 5.)^0.5) / 2.;
        integrationPointsPositions = [
            t1,
            t2,
            t3
        ];
        integrationPointsWeights = [
            5. / 18.,
            8. / 18.,
            5. / 18.
        ];
    } else if (integrationRule == "Gauss5") {
        // Gauss quadrature 5 IP
        integrationPointsNumber = 5;
        real t1 = (1. + (- 0.90618)) / 2.;
        real t2 = (1. + (- 0.538469)) / 2.;
        real t3 = (1. + (0.)) / 2.;
        real t4 = (1. + (0.538469)) / 2.;
        real t5 = (1. + (0.90618)) / 2.;
        integrationPointsPositions = [
            t1,
            t2,
            t3,
            t4,
            t5
        ];
        integrationPointsWeights = [
            0.236927 / 2.,
            0.478629 / 2.,
            0.568889 / 2.,
            0.478629 / 2.,
            0.236927 / 2.
        ];
    } else if (integrationRule == "Gauss8") {
        // Gauss quadrature 8 IP
        integrationPointsNumber = 8;
        real t1 = (1. + (- 0.9602898564975363)) / 2.;
        real t2 = (1. + (- 0.7966664774136267)) / 2.;
        real t3 = (1. + (- 0.5255324099163290)) / 2.;
        real t4 = (1. + (- 0.1834346424956498)) / 2.;
        real t5 = (1. + (0.1834346424956498)) / 2.;
        real t6 = (1. + (0.5255324099163290)) / 2.;
        real t7 = (1. + (0.7966664774136267)) / 2.;
        real t8 = (1. + (0.9602898564975363)) / 2.;
        integrationPointsPositions = [
            t1,
            t2,
            t3,
            t4,
            t5,
            t6,
            t7,
            t8
        ];
        integrationPointsWeights = [
            0.1012285362903763 / 2.,
            0.2223810344533745 / 2.,
            0.3137066458778873 / 2.,
            0.3626837833783620 / 2.,
            0.3626837833783620 / 2.,
            0.3137066458778873 / 2.,
            0.2223810344533745 / 2.,
            0.1012285362903763 / 2.
        ];
    } else if (integrationRule == "Gauss10") {
        // Gauss quadrature 10 IP
        integrationPointsNumber = 10;
        real t1 = (1. + (- 0.9739065285171717)) / 2.;
        real t2 = (1. + (- 0.8650633666889845)) / 2.;
        real t3 = (1. + (- 0.6794095682990244)) / 2.;
        real t4 = (1. + (- 0.4333953941292472)) / 2.;
        real t5 = (1. + (- 0.1488743389816312)) / 2.;
        real t6 = (1. + (0.1488743389816312)) / 2.;
        real t7 = (1. + (0.4333953941292472)) / 2.;
        real t8 = (1. + (0.6794095682990244)) / 2.;
        real t9 = (1. + (0.8650633666889845)) / 2.;
        real t10 = (1. + (0.9739065285171717)) / 2.;
        integrationPointsPositions = [
            t1,
            t2,
            t3,
            t4,
            t5,
            t6,
            t7,
            t8,
            t9,
            t10
        ];
        integrationPointsWeights = [
            0.0666713443086881 / 2.,
            0.1494513491505806 / 2.,
            0.2190863625159820 / 2.,
            0.2692667193099963 / 2.,
            0.2955242247147529 / 2.,
            0.2955242247147529 / 2.,
            0.2692667193099963 / 2.,
            0.2190863625159820 / 2.,
            0.1494513491505806 / 2.,
            0.0666713443086881 / 2.
        ];
    } else if (integrationRule == "Iseg13") {
        integrationPointsNumber = 13;
        real t1 = (2. * 1 - 1) / (2. * 13.);
        real t2 = (2. * 2 - 1) / (2. * 13.);
        real t3 = (2. * 3 - 1) / (2. * 13.);
        real t4 = (2. * 4 - 1) / (2. * 13.);
        real t5 = (2. * 5 - 1) / (2. * 13.);
        real t6 = (2. * 6 - 1) / (2. * 13.);
        real t7 = (2. * 7 - 1) / (2. * 13.);
        real t8 = (2. * 8 - 1) / (2. * 13.);
        real t9 = (2. * 9 - 1) / (2. * 13.);
        real t10 = (2. * 10 - 1) / (2. * 13.);
        real t11 = (2. * 11 - 1) / (2. * 13.);
        real t12 = (2. * 12 - 1) / (2. * 13.);
        real t13 = (2. * 13 - 1) / (2. * 13.);
        integrationPointsPositions = [
            t1,
            t2,
            t3,
            t4,
            t5,
            t6,
            t7,
            t8,
            t9,
            t10,
            t11,
            t12,
            t13
        ];
        integrationPointsWeights = [
            1. / 13.,
            1. / 13.,
            1. / 13.,
            1. / 13.,
            1. / 13.,
            1. / 13.,
            1. / 13.,
            1. / 13.,
            1. / 13.,
            1. / 13.,
            1. / 13.,
            1. / 13.,
            1. / 13.
        ];
    }
    
    return 0;
}