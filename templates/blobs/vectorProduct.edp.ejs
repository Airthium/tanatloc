<% if (locals.dimension !== 2){ -%>
// vector product
func real[int] vectorProduct(real[int] &v1, real[int] &v2) {
    // Vector product
    real[int] product(3);
    product[0] = v1[1] * v2[2] - v1[2] * v2[1];
    product[1] = v1[2] * v2[0] - v1[0] * v2[2];
    product[2] = v1[0] * v2[1] - v1[1] * v2[0];
    return product;
}

// vector product (normalized)
func real[int] vectorProductNormalized(real[int] &v1, real[int] &v2) {
    // Normalized Vector product
    real[int] product(3);
    product[0] = v1[1] * v2[2] - v1[2] * v2[1];
    product[1] = v1[2] * v2[0] - v1[0] * v2[2];
    product[2] = v1[0] * v2[1] - v1[1] * v2[0];
    product = product / ((product[0]^2 + product[1]^2 + product[2]^2)^0.5); // normalized
    return product;
}
<% } -%>