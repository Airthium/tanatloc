try {
<%# Headers -%>
<%- helpers.indent(include('/blobs/headers.edp.ejs'), 1) -%>
    
<%# Dimension -%>
<%- helpers.indent(include('/blobs/dimensioning.edp.ejs', {
    dimension
}), 1) -%>
    
<%# Mesh -%>
<%
    const mesh = geometry.mesh
    mesh.name = variables[0].value
-%>
<%- helpers.indent(include('/blobs/mesh.edp.ejs', {
    dimension,
    mesh
}), 1) -%>
    
<%# Material -%>
<%- helpers.indent(include('/blobs/materials.edp.ejs', {
    materials
}), 1) -%>
    
<%# Finite element space -%>
<%
    const finiteElementSpace = parameters.finiteElementSpace.children[0]
    finiteElementSpace.name = 'Uh'
-%>
<%- helpers.indent(include('/blobs/fespace.edp.ejs', {
    mesh,
    dimension,
    finiteElementSpace
}), 1) -%>
    
<%# Finite element function -%>
<%
    const unknownFunctionX = variables[1].value
    const unknownFunctionY = variables[2].value
    const unknownFunctionZ = variables[3].value
    const unknownFunction =
        dimension === 2
            ? '[' + unknownFunctionX + ', ' + unknownFunctionY + ']'
            : '[' + unknownFunctionX + ', ' + unknownFunctionY + ', ' + unknownFunctionZ + ']'
    const testFunctionX = unknownFunctionX + 'h'
    const testFunctionY = unknownFunctionY + 'h'
    const testFunctionZ = unknownFunctionZ + 'h'
    const testFunction =
        dimension === 2
            ? '[' + testFunctionX + ',' + testFunctionY + ']'
            : '[' + testFunctionX + ', ' + testFunctionY + ', ' + testFunctionZ + ']'
    const freeFunctionX = unknownFunctionX + 'f'
    const freeFunctionY = unknownFunctionY + 'f'
    const freeFunctionZ = unknownFunctionZ + 'f'
    const freeFunction =
        dimension === 2
            ? '[' + freeFunctionX + ',' + freeFunctionY + ']'
            : '[' + freeFunctionX + ', ' + freeFunctionY + ', ' + freeFunctionZ + ']'
-%>
<%- helpers.indent(include('/blobs/fespaceFunction.edp.ejs', {
    finiteElementSpace,
    finiteElementFunction: dimension === 2 ? [unknownFunctionX, unknownFunctionY] : [unknownFunctionX, unknownFunctionY, unknownFunctionZ]
}), 1) -%>
    
<%# Macro -%>
<%- helpers.indent(include('/blobs/macro.edp.ejs', {
    dimension,
    type: ['Divergence', 'Epsilon']
}), 1) -%>
    
    // Variables
    real Mu = E / (2. * (1. + Nu));
    real Lambda = E * Nu / ((1. + Nu) * (1. - 2. * Nu));
    real g = <%- parameters.gravity.children[0].value ?? parameters.gravity.children[0].default -%>;
    
    appendPercent(10);
    
<%# Problem -%>
<%
    const fixed = boundaryConditions.fixed.values ?? []
    const displacement = boundaryConditions.displacement.values ?? []
    const normalPresure = boundaryConditions.pressure.values ?? []
    const componentsPresure = boundaryConditions.componentsPresure.values ?? []
    const rhs = parameters.rightHandSide.children
    const rhsX = rhs[0].value ?? rhs[0].default
    const rhsY = rhs[1].value ?? rhs[1].default
    const rhsZ = rhs[2].value ?? rhs[2].default
    
    const N = dimension === 2 ? '[N.x, N.y]' : '[N.x, N.y, N.z]'
-%>
    // Problem
    appendLog("Define the problem...");
    
    varf vLinearElasticity(<%- unknownFunction -%>, <%- testFunction -%>)
        = intN(<%- mesh.name -%>)(
            Lambda * Div(<%- unknownFunction -%>) * Div(<%- testFunction -%>)
            + 2. * Mu * (
                Epsilon(<%- unknownFunction -%>)' * Epsilon(<%- testFunction -%>)
            )
        )
<% for (const d of displacement){ -%>
        + on(<%- d.labels -%>
<% if (d.values[0].checked){ -%>, <%- unknownFunctionX -%> = 0<% } -%>
<% if (d.values[1].checked){ -%>, <%- unknownFunctionY -%> = 0<% } -%>
<% if (dimension !== 2 && d.values[2].checked){ -%>, <%- unknownFunctionZ -%> = 0<% } -%>)
<% } -%>
<% for (const f of fixed){ -%>
        + on(<%- f.labels -%>, <%- unknownFunctionX -%> = 0, <%- unknownFunctionY -%> = 0<% if (dimension !== 2){ -%>, <%- unknownFunctionZ -%> = 0<% } -%>)
<% } -%>
        ;
    
    varf vLinearElasticityRHS(<%- freeFunction -%>, <%- testFunction -%>)
        = intN(<%- mesh.name -%>)(
<% if (dimension === 2){ -%>
            Rho * g * [<%- rhsX -%>, <%- rhsY -%>]' * <%- testFunction %>
<% } else { -%>
            Rho * g * [<%- rhsX -%>, <%- rhsY -%>, <%- rhsZ -%>]' * <%- testFunction %>
<% } -%>
        )
<% for (const p of normalPresure){ -%>
        + intN1(<%- mesh.name -%>, <%- p.labels -%>)(
            (<%- p.values[0].value ?? p.values[0].default -%>) * <%- N -%>' * <%- testFunction %>
        )
<% } -%>
<% for (const p of componentsPresure){ -%>
        + intN1(<%- mesh.name -%>, <%- p.labels -%>)(
            (<%- p.values[0].value ?? p.values[0].default -%>) * <%- testFunctionX %>
            + (<%- p.values[1].value ?? p.values[1].default -%>) * <%- testFunctionY %>
<% if (dimension !== 2){ -%>
            + (<%- p.values[2].value ?? p.values[2].default -%>) * <%- testFunctionZ %>
<% } %>
        )
<% } -%>
<% for (const d of displacement){ -%>
        + on(<%- d.labels -%>
<% if (d.values[0].checked){ -%>, <%- freeFunctionX -%> = <%- d.values[0].value ?? d.values[0].default -%><% } -%>
<% if (d.values[1].checked){ -%>, <%- freeFunctionY -%> = <%- d.values[1].value ?? d.values[1].default -%><% } -%>
<% if (dimension !== 2 && d.values[2].checked){ -%>, <%- freeFunctionZ -%> = <%- d.values[2].value ?? d.values[2].default -%><% } -%>)
<% } -%>
<% for (const f of fixed){ -%>
        + on(<%- f.labels -%>, <%- freeFunctionX -%> = 0, <%- freeFunctionY -%> = 0<% if (dimension !== 2){ -%>, <%- freeFunctionZ -%> = 0<% } -%>)
<% } -%>
        ;
    
<%# Solver -%>
<% const solver = parameters.solver.children[0].value ?? parameters.solver.children[0].default -%>
<%- helpers.indent(include('/blobs/solver.edp.ejs', {
    solver
}), 1) -%>
    
<%# Solve -%>
    // Solve
    appendLog("Solve the problem...");
    
    matrix LinearElasticity = vLinearElasticity(<%- finiteElementSpace.name -%>, <%- finiteElementSpace.name -%>, solver = solver);
    real[int] LinearElasticityRHS = vLinearElasticityRHS(0, <%- finiteElementSpace.name -%>);
    <%- unknownFunctionX -%>[] = LinearElasticity^-1 * LinearElasticityRHS;
    
    // Von mises stress
    fespace Sh(<%- mesh.name -%>, P2);
    Sh epsilon11 = dx(<%- unknownFunctionX -%>);
    Sh epsilon22 = dy(<%- unknownFunctionY -%>);
    Sh epsilon33 = <% if (dimension === 2){ -%>0<% } else { -%>dz(<%- unknownFunctionZ -%>)<% } -%>;
    Sh epsilon12 = 0.5 * (dy(<%- unknownFunctionX -%>) + dx(<%- unknownFunctionY -%>));
    Sh epsilon13 = <% if (dimension === 2){ -%>0<% } else { -%>0.5 * (dz(<%- unknownFunctionX -%>) + dx(<%- unknownFunctionZ -%>))<% } -%>;
    Sh epsilon23 = <% if (dimension === 2){ -%>0<% } else { -%>0.5 * (dy(<%- unknownFunctionZ -%>) + dz(<%- unknownFunctionY -%>))<% } -%>;
    
    Sh traceEpsilon = epsilon11 + epsilon22 + epsilon33;
    
    Sh gamma11 = 2. * Mu * epsilon11 + Lambda * traceEpsilon;
    Sh gamma22 = 2. * Mu * epsilon22 + Lambda * traceEpsilon;
    Sh gamma33 = 2. * Mu * epsilon33 + Lambda * traceEpsilon;
    Sh gamma12 = 2. * Mu * epsilon12;
    Sh gamma13 = 2. * Mu * epsilon13;
    Sh gamma23 = 2. * Mu * epsilon23;
    
    Sh Sigma = sqrt(
        0.5 * ((gamma11 - gamma22)^2 + (gamma22 - gamma33)^2 + (gamma33 - gamma11)^2)
        + 3. * (gamma12^2 + gamma23^2 + gamma13^2)
    );
    
<% if (parameters.meshAdaptation.children[0].value){ -%>
    // Mesh adaptation
    fespace Hh(<%- mesh.name -%>, P0);
    Hh h = hTriangle;
    real minh = h[].min;
    real maxh = h[].max;
    int nLoops = <%- parameters.meshAdaptation.children[1].value ?? parameters.meshAdaptation.children[1].default -%>;
    for (int i = 0; i < nLoops; ++i) {
        int percent = 20. + 80 * i / nLoops;
        appendPercent(percent);

<% if (dimension === 2){ -%>
    <%- mesh.name -%> = adaptmesh(<%- mesh.name -%>, Sigma, hmin = minh / 5., hmax = maxh);
<% } else { -%>
        load "mshmet"
        load "mmg"
        real[int] metric = mshmet(<%- mesh.name -%>, Sigma, aniso = 1, hmin = minh / 5., hmax = maxh);
        <%- mesh.name -%> = mmg3d(<%- mesh.name -%>, metric = metric);
<% } -%>
        
        <%- unknownFunction -%> = <%- unknownFunction -%>;
        
        matrix LinearElasticity = vLinearElasticity(<%- finiteElementSpace.name -%>, <%- finiteElementSpace.name -%>, solver = solver);
        real[int] LinearElasticityRHS = vLinearElasticityRHS(0, <%- finiteElementSpace.name -%>);
        <%- unknownFunctionX -%>[] = LinearElasticity^-1 * LinearElasticityRHS;
    }
<% } -%>
    
<%# Sensors -%>
<%- helpers.indent(include('/blobs/sensors.edp.ejs', {
    path: run.dataPath,
    x: 0,
    sensors: run.sensors
}), 1) -%>
    
<%# Save -%>
<%- helpers.indent(include('/blobs/save.edp.ejs', {
    dimension,
    path: run.resultPath,
    name: '"Result"',
    mesh: mesh.name,
    geometry,
    results: run.results[0]
}), 1) -%>

    appendPercent(100);
    appendLog("End");
} catch (...) {
    appendError("An internal error occurs");
    exit(- 1);
}
