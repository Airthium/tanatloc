try {
<%# Headers -%>
<%- helpers.indent(include('/blobs/headers.edp.ejs'), 1) -%>
    
<%# Dimension -%>
<%- helpers.indent(include('/blobs/dimensioning.edp.ejs', {
    dimension
}), 1) -%>
    
<%# Mesh -%>
<%
    const mesh = geometry.mesh
    mesh.name = 'Mesh'
-%>
<% if (initialization.value && initialization.value.type === 'coupling'){ -%>
    meshN Mesh = readmesh3("<%= initialization.value.mesh -%>");
<% } else { -%>
<%- helpers.indent(include('/blobs/mesh.edp.ejs', {
        dimension,
        mesh
    }), 1) -%>
<% } -%>
    
    // Variables
    real t = 0.;
    real T = <%= parameters.time.children[0].value ?? parameters.time.children[0].default -%>;
    real dt = <%= parameters.time.children[1].value ?? parameters.time.children[1].default -%>;
    
<%# Materials -%>
<%- helpers.indent(include('/blobs/materials.edp.ejs', {
    materials
}), 1) -%>
    
<%# Finite element space -%>
<%
    const finiteElementSpace = parameters.finiteElementSpace.children[0]
    finiteElementSpace.name = 'Uh'
-%>
<%- helpers.indent(include('/blobs/fespace.edp.ejs', {
    mesh,
    dimension,
    finiteElementSpace
}), 1) -%>
    
<%# Finite element function -%>
<%
    let feFunction = ['Ux', 'Uy', 'Uz', 'p']
    
    let unknownFunction = '[Ux, Uy, Uz, p]'
    let testFunction = '[Uhx, Uhy, Uhz, ph]'
    let freeFunction = '[mUx, mUy, mUz, mp]'
    
    let U = '[Ux, Uy, Uz]'
    let Uh = '[Uhx, Uhy, Uhz]'
    let N = '[N.x, N.y, N.z]'
    
    if (dimension === 2){
        feFunction = ['Ux', 'Uy', 'p']
        
        unknownFunction = '[Ux, Uy, p]'
        testFunction = '[Uhx, Uhy, ph]'
        freeFunction = '[mUx, mUy, mp]'
        
        U = '[Ux, Uy]'
        Uh = '[Uhx, Uhy]'
        N = '[N.x, N.y]'
    }
-%>
<%- helpers.indent(include('/blobs/fespaceFunction.edp.ejs', {
    finiteElementSpace,
    finiteElementFunction: feFunction
}), 1) -%>
    
<%# Macro -%>
<%- helpers.indent(include('/blobs/macro.edp.ejs', {
    dimension,
    type: ['vectorialGradient', 'vectorialDivergence']
}), 1) -%>
    
<%# Problem -%>
<%
    const symmetric = parameters.symmetric.children[0].value ?? parameters.symmetric.children[0].default
    const wall = boundaryConditions.wall.values || []
    const freeOutlet = boundaryConditions.freeOutlet.values || []
    const dirichlet = boundaryConditions.dirichlet.values || []
    const neumann = boundaryConditions.neumann.values || []
    const rhs = parameters.rightHandSide.children
    const rhsX = rhs[0].value ?? rhs[0].default
    const rhsY = rhs[1].value ?? rhs[1].default
    const rhsZ = rhs[2].value ?? rhs[2].default
-%>
    // Problem
    appendLog("Define the problem...");
    
    real Rhodt = Rho / dt;
    varf vNavierStokes(<%= unknownFunction -%>, <%= testFunction -%>)
        = intN(Mesh)(
            Rhodt * <%= U -%>' * <%= Uh%>
            + Mu * (Grad(U) : Grad(Uh))
<% if (symmetric){ -%>
            + (Mu / 4.) * (
                (grad(Ux) + grad(Ux)')' * grad(Uhx)
                + (grad(Uy) + grad(Uy)')' * grad(Uhy)
<% if (dimension !== 2){ -%>
                + (grad(Uz) + grad(Uz)')' * grad(Uhz)
<% } -%>
            )
<% } else { -%>
            + Mu * (Grad(U) : Grad(Uh))
<% } -%>
            - p * Div(Uh)
            - Div(U) * ph
        )
<% for (const d of dirichlet){ -%>
        + on(<%= d.labels -%>
<% if (d.values[0].checked){ -%>, Ux = 0 <% } -%>
<% if (d.values[1].checked){ -%>, Uy = 0 <% } -%>
<% if (dimension !== 2 && d.values[2].checked){ -%>, Uz = 0 <% } -%>
        )
<% } -%>
<% for (const w of wall){ -%>
        + on(<%= w.labels -%>, Ux = 0, Uy = 0 <% if (dimension !== 2){ -%>, Uz = 0 <% } -%>)
<% } -%>
        ;
    
    varf vNavierStokesRHS(<%= freeFunction -%>, <%= testFunction -%>)
        = intN(Mesh)(
<% if (dimension === 2){ -%>
            Rhodt * [convect(<%= U -%>, - dt, Ux), convect(<%= U -%>, - dt, Uy)]' * <%= Uh -%>
            + [<%- rhsX -%>, <%- rhsY -%>]' * <%= Uh%>
<% } else { -%>
            Rhodt * [convect(<%= U -%>, - dt, Ux), convect(<%= U -%>, - dt, Uy), convect(<%= U -%>, - dt, Uz)]' * <%= Uh -%>
            + [<%- rhsX -%>, <%- rhsY -%>, <%- rhsZ -%>]' * <%= Uh%>
<% } -%>
        )
<% for (const n of neumann){ -%>
        - intN1(Mesh, <%= n.labels -%>)(
            (<%- n.values[0].value ?? n.values[0].default -%>) * <%= N -%>' * <%= Uh -%>
        )
<% } -%>
<% for (const d of dirichlet){ -%>
        + on(<%= d.labels -%>
<% if (d.values[0].checked){ -%>, mUx = <%- d.values[0].value ?? d.values[0].default -%> <% } -%>
<% if (d.values[1].checked){ -%>, mUy = <%- d.values[1].value ?? d.values[1].default -%> <% } -%>
<% if (dimension !== 2 && d.values[2].checked){ -%>, mUz = <%- d.values[2].value ?? d.values[2].default -%> <% } -%>
        )
<% } -%>
<% for (const w of wall){ -%>
        + on(<%= w.labels -%>, mUx = 0, mUy = 0 <% if (dimension !== 2){ -%>, mUz = 0 <% } -%>)
<% } -%>
        ;
    
<%# Solver -%>
<% const solver = parameters.solver.children[0].value ?? parameters.solver.children[0].default -%>
<%- helpers.indent(include('/blobs/solver.edp.ejs', {
    solver
}), 1) -%>
    
<%# Initialization -%>
<% if (initialization.value){ -%>
    // Initialization
<% if (initialization.value.type === 'coupling'){ -%>
    {
        ifstream couplingData("<%= initialization.value.dat -%>");
<% if (dimension === 2){ -%>
        couplingData > > Ux[] > > Uy[];
<% } else { -%>
        couplingData > > Ux[] > > Uy[] > > Uz[];
<% } -%>
    }
<% } else if (initialization.value.type === 'direct' && initialization.value.values){ -%>
<% if (dimension === 2){ -%>
    [<%= feFunction -%>] = [
<%= initialization.value.values[0] ?? initialization.direct.children[0].default -%>,
<%= initialization.value.values[1] ?? initialization.direct.children[1].default -%>
        0];
<% } else { -%>
    [<%= feFunction -%>] = [
<%= initialization.value.values[0] ?? initialization.direct.children[0].default -%>,
<%= initialization.value.values[1] ?? initialization.direct.children[1].default -%>,
<%= initialization.value.values[2] ?? initialization.direct.children[2].default -%>,
        0];
<% } -%>
<% } else { -%>
<% if (dimension === 2){ -%>
    [<%= feFunction -%>] = [
<%= initialization.direct.children[0].default -%>,
<%= initialization.direct.children[1].default -%>,
<%= initialization.direct.children[2].default -%>,
        0];
<% } else { -%>
    [<%= feFunction -%>] = [
<%= initialization.direct.children[0].default -%>,
<%= initialization.direct.children[1].default -%>
        0];
<% } -%>
<% } -%>
    
<% } -%>
    matrix NavierStokes = vNavierStokes(<%= finiteElementSpace.name -%>, <%= finiteElementSpace.name -%>, solver = solver);
    
<%# Time loop -%>
    // Time loop
    appendLog("Time loop...");
    
    int nbIter = T / dt;
    for (int timeIter = 0; timeIter < nbIter; ++timeIter) {
        // Update
        int percent = 100 * t / T;
        appendLog("[" + percent + "%]");
        t += dt;
        appendLog("Time: " + t);
        
        real[int] NavierStokesRHS = vNavierStokesRHS(0, <%= finiteElementSpace.name -%>);
        
        // Solve
        Ux[] = NavierStokes^-1 * NavierStokesRHS;
        
        // Save data
        real netFlow = intN1(Mesh)(<%= U -%>' * <%= N -%>);
        real div = intN(Mesh)(Div(U)) / intN(Mesh)(1);
<%- helpers.indent(include('/blobs/data.edp.ejs', {
    title: 'Time',
    path: run.dataPath,
    fileName: '"iter_"+timeIter',
    dataNames: ['Net flow', 'Divergence',],
    x: 't',
    ys: ['netFlow', 'div']
}), 2) -%>
        
<%# Sensors -%>
<%- helpers.indent(include('/blobs/sensors.edp.ejs', {
    path: run.dataPath,
    x: 't',
    sensors: run.sensors
}), 2) -%>
        
<%- helpers.indent(include('/blobs/coupling.edp.ejs', {
    path: run.couplingPath,
    mesh: mesh.name,
    name: '"Result_"+timeIter',
    data: dimension === 2 ? ['Ux', 'Uy'] : ['Ux', 'Uy', 'Uz']
}), 2) -%>
        
<%- helpers.indent(include('/blobs/save.edp.ejs', {
    dimension,
    path: run.resultPath,
    name: '"Result_"+timeIter',
    mesh: mesh.name,
    geometry,
    results: run.results[0]
}), 2) -%>
    }
    appendLog("[100%]");
    
    appendLog("End");
} catch (...) {
    appendError("An internal error occurs");
    exit(- 1);
}

