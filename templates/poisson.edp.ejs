try {
	<%# Headers -%>
	<%- include('/blobs/headers.edp.ejs') -%>

	<%# Dimension -%>
	<%- include('/blobs/dimensioning.edp.ejs', {
		dimension
	}); -%>

	<%# Mesh -%>
	<%
	const mesh = geometry.mesh
	mesh.name = 'Mesh'
	-%>
	<%- include('/blobs/mesh.edp.ejs', {
		dimension,
		mesh
	}); -%>

	<%# Finite element space -%>
	<%
	const finiteElementSpace = parameters.finiteElementSpace.children[0]
	finiteElementSpace.name = 'Uh'
	-%>
	<%- include('/blobs/fespace.edp.ejs', {
		mesh,
		finiteElementSpace
	}); -%>

	<%# Finite element function -%>
	<%- include('/blobs/fespaceFunction.edp.ejs', {
		finiteElementSpace,
		finiteElementFunction: ['u']
	}); -%>

	<%# Macro -%>
	<%- include('/blobs/macro.edp.ejs', {
		dimension,
		type: ['scalarGradient']
	}); -%>

	<%# Problem -%>
	<%
	const dirichlet = boundaryConditions.dirichlet.values || []
	const neumann = boundaryConditions.neumann.values || []
	const rhs = parameters.rightHandSide.children[0]
	const rhsValue = rhs.value || rhs.default
	-%>
	// Problem
	appendLog("Define the problem...");

	varf vLaplacian (u, uh)
		= intN(Mesh)(
			grad(u)' * grad(uh)
		)
	<% for (const d of dirichlet) { -%>
		+ on(<%= d.selected.map(s => s.label).filter(s => s).join() -%>, u=0)
	<% } -%>
		;

	varf vLaplacianRHS (u, uh)
		= intN(Mesh)(
			(<%- rhsValue -%>) * uh
		)
	<% for (const n of neumann) { -%>
		- intN1(Mesh, <%= n.selected.map(s => s.label).filter(s => s).join() %>) {
			(<%- n.values[0].value %>) * uh
		}
	<% } -%>
	<% for (const d of dirichlet) { -%>
		+ on(<%= d.selected.map(s => s.label).filter(s => s).join() -%>, u=<%- d.values[0].value -%>)
	<% } -%>
		;

	<%# Solver -%>
	<% const solver = parameters.solver.children[0].value || parameters.solver.children[0].default -%>
	<%- include('/blobs/solver.edp.ejs', {
		solver
	}) -%>

	<%# Solve -%>
	// Solve
	appendLog("Solve the problem...");

	matrix Laplacian = vLaplacian(<%= finiteElementSpace.name -%>, <%= finiteElementSpace.name -%>, solver=solver);
	real[int] LaplacianRHS = vLaplacianRHS(0, <%= finiteElementSpace.name -%>);
	u[] = Laplacian^-1 * LaplacianRHS;

	<%# Save -%>
	<%- include('/blobs/save.edp.ejs', {
		solution: {
			path: run.resultPath,
			name: '"Result"',
			mesh: mesh.name,
			sol: ['u'],
			dataName: run.results.map(r => r.name),
			order: [1]
		}
	}); -%>

	appendLog("End");
} catch(...) {
	appendError("An internal error occurs");
	exit(-1);
}