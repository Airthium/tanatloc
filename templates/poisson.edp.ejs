<%# Headers -%>
<%- include('blobs/headers.edp.ejs') -%>

<%# Dimension -%>
<%- include(`blobs/dimensioning.edp.ejs`, {
	dimension
}); -%>

<%# Mesh -%>
<%
const mesh = geometry.mesh
mesh.name = 'Th'
-%>
<%- include(`blobs/mesh.edp.ejs`, {
	dimension,
	mesh
}); -%>

<%# Finite element space -%>
<%
const finiteElementSpace = parameters.finiteElementSpace.children[0]
finiteElementSpace.name = 'Uh'
-%>
<%- include(`blobs/fespace.edp.ejs`, {
	mesh,
	finiteElementSpace
}); -%>

<%# Finite element function -%>
<%- include(`blobs/fespaceFunction.edp.ejs`, {
	finiteElementSpace,
	finiteElementFunction: ['u']
}); -%>

<%# Macro -%>
<%- include(`blobs/macro.edp.ejs`, {
	dimension,
	type: ['scalarGradient']
}); -%>

<%# Problem -%>
<%
const dirichlet = boundaryConditions.dirichlet.values || []
const neumann = boundaryConditions.neumann.values || []
const rhs = parameters.rightHandSide.children[0]
const rhsValue = rhs.value || rhs.default
-%>
// Problem
cout << "Define the problem..." << endl;
varf vLaplacian (u, uh)
	= intN(Th)(
		grad(u)' * grad(uh)
	)
<% for (const d of dirichlet) { -%>
	+ on(<%= d.selected.map(s => { return s.label}).filter(s => s).join() -%>, u=0)
<% } -%>
	;

varf vLaplacianRHS (u, uh)
	= intN(Th)(
		(<%- rhsValue -%>) * uh
	)
<% for (const n of neumann) { -%>
	- intN1(Th, <%= selected.map(s => { return s.label}).filter(s => s).join() %>) {
		(<%- n.values[0] %>) * uh
	}
<% } -%>
<% for (const d of dirichlet) { -%>
	+ on(<%= d.selected.map(s => { return s.label}).filter(s => s).join() -%>, u=<%- d.values[0] -%>)
<% } -%>
	;

<%# Solver -%>
<% const solver = parameters.solver.children[0].value || parameters.solver.children[0].default -%>
<%- include(`blobs/solver.edp.ejs`, {
	solver
}) -%>

<%# Solve -%>
// Solve
cout << "Solve the problem..." << endl;
matrix Laplacian = vLaplacian(<%= finiteElementSpace.name -%>, <%= finiteElementSpace.name -%>, solver=solver);
real[int] LaplacianRHS = vLaplacianRHS(0, <%= finiteElementSpace.name -%>);
u[] = Laplacian^-1 * LaplacianRHS;

<%# Save -%>
<%- include(`blobs/save.edp.ejs`, {
	solution: {
		path: `${run.path}`,
		name: '"Result"',
		mesh: mesh.name,
		sol: ['u'],
		dataName: [`${run.results.map(r => r.name)}`],
		order: [1]
	}
}); -%>