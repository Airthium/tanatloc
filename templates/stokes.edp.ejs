try {
<%# Headers -%>
<%- helpers.indent(include('/blobs/headers.edp.ejs'), 1) -%>
    
<%# Dimension -%>
<%- helpers.indent(include('/blobs/dimensioning.edp.ejs', {
    dimension
}), 1) -%>
    
<%# Mesh -%>
<%
    const mesh = geometry.children[0].mesh
    mesh.name = variables[0].value
-%>
<%- helpers.indent(include('/blobs/mesh.edp.ejs', {
    dimension,
    mesh
}), 1) -%>
    
<%# Materials -%>
<%- helpers.indent(include('/blobs/materials.edp.ejs', {
    materials
}), 1) -%>
    
<%# Finite element space -%>
<%
    const finiteElementSpace = parameters.finiteElementSpace.children[0]
    finiteElementSpace.name = 'Uh'
-%>
<%- helpers.indent(include('/blobs/fespace.edp.ejs', {
    mesh,
    dimension,
    finiteElementSpace
}), 1) -%>
    
<%# Finite element function -%>
<%
    const unknownFunctionX = variables[1].value
    const unknownFunctionY = variables[2].value
    const unknownFunctionZ = variables[3].value
    const unknownFunctionP = variables[4].value
    const unknownFunction =
        dimension === 2
            ? '[' + unknownFunctionX + ', ' + unknownFunctionY + ', ' + unknownFunctionP + ']'
            : '[' + unknownFunctionX + ', ' + unknownFunctionY + ', ' + unknownFunctionZ + ', ' + unknownFunctionP + ']'
    const testFunctionX = unknownFunctionX + 'h'
    const testFunctionY = unknownFunctionY + 'h'
    const testFunctionZ = unknownFunctionZ + 'h'
    const testFunctionP = unknownFunctionP + 'h'
    const testFunction =
        dimension === 2
            ? '[' + testFunctionX + ', ' + testFunctionY + ', ' + testFunctionP + ']'
            : '[' + testFunctionX + ', ' + testFunctionY + ', ' + testFunctionZ + ', ' + testFunctionP + ']'
    const freeFunctionX = unknownFunctionX + 'f'
    const freeFunctionY = unknownFunctionY + 'f'
    const freeFunctionZ = unknownFunctionZ + 'f'
    const freeFunctionP = unknownFunctionP + 'f'
    const freeFunction =
        dimension === 2
            ? '[' + freeFunctionX + ',' + freeFunctionY + ', ' + freeFunctionP + ']'
            : '[' + freeFunctionX + ', ' + freeFunctionY + ', ' + freeFunctionZ + ', ' + freeFunctionP + ']'
    
    const U =
        dimension === 2
            ? '[' + unknownFunctionX + ', ' + unknownFunctionY + ']'
            : '[' + unknownFunctionX + ', ' + unknownFunctionY + ', ' + unknownFunctionZ + ']'
    const Uh =
        dimension === 2
            ? '[' + testFunctionX + ', ' + testFunctionY + ']'
            : '[' + testFunctionX + ', ' + testFunctionY + ', ' + testFunctionZ + ']'
    const N = dimension === 2 ? '[N.x, N.y]' : '[N.x, N.y, N.z]'
-%>
<%- helpers.indent(include('/blobs/fespaceFunction.edp.ejs', {
    finiteElementSpace,
    finiteElementFunction:
        dimension === 2
            ? [unknownFunctionX, unknownFunctionY, unknownFunctionP]
            : [unknownFunctionX, unknownFunctionY, unknownFunctionZ, unknownFunctionP]
}), 1) -%>
    
<%# Macro -%>
<%- helpers.indent(include('/blobs/macro.edp.ejs', {
    dimension,
    type: ['Gradient', 'Divergence']
}), 1) -%>

    appendPercent(10);
    
<%# Problem -%>
<%
    const symmetric = parameters.symmetric.children[0].value ?? parameters.symmetric.children[0].default
    const wall = boundaryConditions.wall.values ?? []
    const freeOutlet = boundaryConditions.freeOutlet.values ?? []
    const dirichlet = boundaryConditions.dirichlet.values ?? []
    const neumann = boundaryConditions.neumann.values ?? []
    const rhs = parameters.rightHandSide.children
    const rhsX = rhs[0].value ?? rhs[0].default
    const rhsY = rhs[1].value ?? rhs[1].default
    const rhsZ = rhs[2].value ?? rhs[2].default
-%>
    // Problem
    appendLog("Define the problem...");
    
    varf vStokes(<%- unknownFunction -%>, <%- testFunction -%>)
        = intN(<%- mesh.name -%>)(
<% if (symmetric){ -%>
            (Mu / 4.) * (
                  (grad(<%- unknownFunctionX -%>) + grad(<%- unknownFunctionX -%>)')' * (grad(<%- testFunctionX -%>) + grad(<%- testFunctionX -%>)')
                + (grad(<%- unknownFunctionY -%>) + grad(<%- unknownFunctionY -%>)')' * (grad(<%- testFunctionY -%>) + grad(<%- testFunctionY -%>)')
<% if (dimension !== 2){ -%>
                + (grad(<%- unknownFunctionZ -%>) + grad(<%- unknownFunctionZ -%>)')' * (grad(<%- testFunctionZ -%>) + grad(<%- testFunctionZ -%>)')
<% } -%>
            )
<% } else { -%>
            Mu * (Grad(<%- U -%>) : Grad(<%- Uh -%>))
<% } -%>
            - <%- unknownFunctionP -%> * Div(<%- Uh -%>)
            - Div(<%- U -%>) * <%- testFunctionP %>
            - 1.e-9 * <%- unknownFunctionP -%> * <%- testFunctionP %>
        )
<% for (const d of dirichlet){ -%>
        + on(<%- d.labels -%>
<% if (d.values[0].checked){ -%>, <%- unknownFunctionX -%> = 0<% } -%>
<% if (d.values[1].checked){ -%>, <%- unknownFunctionY -%> = 0<% } -%>
<% if (dimension !== 2 && d.values[2].checked){ -%>, <%- unknownFunctionZ -%> = 0<% } %>)
<% } -%>
<% for (const w of wall){ -%>
        + on(<%- w.labels -%>, <%- unknownFunctionX -%> = 0, <%- unknownFunctionY -%> = 0<% if (dimension !== 2){ -%>, <%- unknownFunctionZ -%> = 0<% } -%>)
<% } -%>
        ;
    
    varf vStokesRHS(<%- freeFunction -%>, <%- testFunction -%>)
        = intN(<%- mesh.name -%>)(
<% if (dimension === 2){ -%>
            [<%- rhsX -%>, <%- rhsY -%>]' * <%- Uh%>
<% } else { -%>
            [<%- rhsX -%>, <%- rhsY -%>, <%- rhsZ -%>]' * <%- Uh%>
<% } -%>
        )
<% for (const n of neumann){ -%>
        - intN1(<%- mesh.name -%>, <%- n.labels -%>)(
            (<%- n.values[0].value ?? n.values[0].default -%>) * <%- N -%>' * <%- Uh %>
        )
<% } -%>
<% for (const d of dirichlet){ -%>
        + on(<%- d.labels -%>
<% if (d.values[0].checked){ -%>, <%- freeFunctionX -%> = <%- d.values[0].value ?? d.values[0].default -%><% } -%>
<% if (d.values[1].checked){ -%>, <%- freeFunctionY -%> = <%- d.values[1].value ?? d.values[1].default -%><% } -%>
<% if (dimension !== 2 && d.values[2].checked){ -%>, <%- freeFunctionZ -%> = <%- d.values[2].value ?? d.values[2].default -%><% } -%>)
<% } -%>
<% for (const w of wall){ -%>
        + on(<%- w.labels -%>, <%- freeFunctionX -%> = 0, <%- freeFunctionY -%> = 0<% if (dimension !== 2){ -%>, <%- freeFunctionZ -%> = 0<% } -%>)
<% } -%>
        ;
    
<%# Solver -%>
<% const solver = parameters.solver.children[0].value ?? parameters.solver.children[0].default -%>
<%- helpers.indent(include('/blobs/solver.edp.ejs', {
    solver
}), 1) -%>
    
<%# Solve -%>
    matrix Stokes = vStokes(<%- finiteElementSpace.name -%>, <%- finiteElementSpace.name -%>, solver = solver);
    real[int] StokesRHS = vStokesRHS(0, <%- finiteElementSpace.name -%>);
    
    // Solve
    <%- unknownFunctionX -%>[] = Stokes^-1 * StokesRHS;
    
<%# Save -%>
    // Save data
    real netFlow = intN1(<%- mesh.name -%>)(<%- U -%>' * <%- N -%>);
    real div = intN(<%- mesh.name -%>)(Div(<%- U -%>)) / intN(<%- mesh.name -%>)(1);
<%- helpers.indent(include('/blobs/data.edp.ejs', {
    title: '',
    path: run.dataPath,
    fileName: '"stokes"',
    dataNames: ['Net flow', 'Divergence'],
    x: '0',
    ys: ['netFlow', 'div']
}), 1) -%>
    
<%# Sensors -%>
<%- helpers.indent(include('/blobs/sensors.edp.ejs', {
    path: run.dataPath,
    x: 0,
    sensors: run.sensors
}), 1) -%>
    
<%- helpers.indent(include('/blobs/coupling.edp.ejs', {
    path: run.couplingPath,
    mesh: mesh.name,
    name: '"Result_"',
    data: dimension === 2
        ? [unknownFunctionX, unknownFunctionY]
        : [unknownFunctionX, unknownFunctionY, unknownFunctionZ]
}), 1) -%>
    
<%- helpers.indent(include('/blobs/save.edp.ejs', {
    dimension,
    path: run.resultPath,
    name: '"Result"',
    mesh: mesh.name,
    geometry,
    results: run.results[0]
}), 1) -%>
    
    appendPercent(100);
    appendLog("End");
} catch (...) {
    appendError("An internal error occurs");
    exit(- 1);
}

